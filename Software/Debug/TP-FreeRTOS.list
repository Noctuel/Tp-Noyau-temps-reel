
TP-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08006774  08006774  00016774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068ec  080068ec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080068ec  080068ec  000168ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068f4  080068f4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068f4  080068f4  000168f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068f8  080068f8  000168f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080068fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040b0  20000074  08006970  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004124  08006970  00024124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ccd  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003400  00000000  00000000  00036d71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  0003a178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001200  00000000  00000000  0003b4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dc6  00000000  00000000  0003c6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001700b  00000000  00000000  000654a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa123  00000000  00000000  0007c4b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001765d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057dc  00000000  00000000  00176624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800675c 	.word	0x0800675c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800675c 	.word	0x0800675c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000094 	.word	0x20000094
 80005e4:	200000e8 	.word	0x200000e8

080005e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_FREERTOS_Init+0x30>)
 80005f0:	1d3c      	adds	r4, r7, #4
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f002 ff6b 	bl	80034e0 <osThreadCreate>
 800060a:	4603      	mov	r3, r0
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <MX_FREERTOS_Init+0x34>)
 800060e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000610:	bf00      	nop
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bdb0      	pop	{r4, r5, r7, pc}
 8000618:	08006780 	.word	0x08006780
 800061c:	20000090 	.word	0x20000090

08000620 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f002 ffa5 	bl	8003578 <osDelay>
 800062e:	e7fb      	b.n	8000628 <StartDefaultTask+0x8>

08000630 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <MX_GPIO_Init+0xa4>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a22      	ldr	r2, [pc, #136]	; (80006d4 <MX_GPIO_Init+0xa4>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <MX_GPIO_Init+0xa4>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <MX_GPIO_Init+0xa4>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a1c      	ldr	r2, [pc, #112]	; (80006d4 <MX_GPIO_Init+0xa4>)
 8000664:	f043 0302 	orr.w	r3, r3, #2
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_GPIO_Init+0xa4>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <MX_GPIO_Init+0xa4>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a16      	ldr	r2, [pc, #88]	; (80006d4 <MX_GPIO_Init+0xa4>)
 800067c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_GPIO_Init+0xa4>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_GPIO_Init+0xa4>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a10      	ldr	r2, [pc, #64]	; (80006d4 <MX_GPIO_Init+0xa4>)
 8000694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_GPIO_Init+0xa4>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2102      	movs	r1, #2
 80006aa:	480b      	ldr	r0, [pc, #44]	; (80006d8 <MX_GPIO_Init+0xa8>)
 80006ac:	f000 fe2e 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006b0:	2302      	movs	r3, #2
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	2300      	movs	r3, #0
 80006be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_GPIO_Init+0xa8>)
 80006c8:	f000 fc74 	bl	8000fb4 <HAL_GPIO_Init>

}
 80006cc:	bf00      	nop
 80006ce:	3728      	adds	r7, #40	; 0x28
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40022000 	.word	0x40022000

080006dc <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80006e4:	1d39      	adds	r1, r7, #4
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006ea:	2201      	movs	r2, #1
 80006ec:	4803      	ldr	r0, [pc, #12]	; (80006fc <__io_putchar+0x20>)
 80006ee:	f002 fa51 	bl	8002b94 <HAL_UART_Transmit>
	return ch;
 80006f2:	687b      	ldr	r3, [r7, #4]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	2000033c 	.word	0x2000033c

08000700 <taskGive>:
		vTaskDelay(duree);
		compteur++;
	}
}*/

void taskGive(void * unused){
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	for(;;){
		printf("Give donne un semaphore\n\r");
 8000708:	4808      	ldr	r0, [pc, #32]	; (800072c <taskGive+0x2c>)
 800070a:	f005 f823 	bl	8005754 <iprintf>
		xSemaphoreGive(sem);
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <taskGive+0x30>)
 8000710:	6818      	ldr	r0, [r3, #0]
 8000712:	2300      	movs	r3, #0
 8000714:	2200      	movs	r2, #0
 8000716:	2100      	movs	r1, #0
 8000718:	f003 f8c2 	bl	80038a0 <xQueueGenericSend>
		printf("Give a donne un semaphore\n\r");
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <taskGive+0x34>)
 800071e:	f005 f819 	bl	8005754 <iprintf>
		vTaskDelay(100);
 8000722:	2064      	movs	r0, #100	; 0x64
 8000724:	f003 fd74 	bl	8004210 <vTaskDelay>
		printf("Give donne un semaphore\n\r");
 8000728:	e7ee      	b.n	8000708 <taskGive+0x8>
 800072a:	bf00      	nop
 800072c:	0800679c 	.word	0x0800679c
 8000730:	200002e8 	.word	0x200002e8
 8000734:	080067b8 	.word	0x080067b8

08000738 <taskTake>:
	}
}
void taskTake(void * unused){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	for(;;){
		printf("Take prend un semaphore\n\r");
 8000740:	4806      	ldr	r0, [pc, #24]	; (800075c <taskTake+0x24>)
 8000742:	f005 f807 	bl	8005754 <iprintf>
		xSemaphoreTake(sem, portMAX_DELAY);
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <taskTake+0x28>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800074e:	4618      	mov	r0, r3
 8000750:	f003 f9ac 	bl	8003aac <xQueueSemaphoreTake>
		printf("Take a pris un semaphore\n\r");
 8000754:	4803      	ldr	r0, [pc, #12]	; (8000764 <taskTake+0x2c>)
 8000756:	f004 fffd 	bl	8005754 <iprintf>
		printf("Take prend un semaphore\n\r");
 800075a:	e7f1      	b.n	8000740 <taskTake+0x8>
 800075c:	080067d4 	.word	0x080067d4
 8000760:	200002e8 	.word	0x200002e8
 8000764:	080067f0 	.word	0x080067f0

08000768 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800076e:	f000 fb12 	bl	8000d96 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000772:	f000 f839 	bl	80007e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000776:	f7ff ff5b 	bl	8000630 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800077a:	f000 fa31 	bl	8000be0 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	printf("\r\n===== START =====\r\n");
 800077e:	4814      	ldr	r0, [pc, #80]	; (80007d0 <main+0x68>)
 8000780:	f005 f86e 	bl	8005860 <puts>
	if (xReturned != pdPASS)
	{
		Error_Handler();
	}
	*/
	sem = xSemaphoreCreateBinary();
 8000784:	2203      	movs	r2, #3
 8000786:	2100      	movs	r1, #0
 8000788:	2001      	movs	r0, #1
 800078a:	f003 f827 	bl	80037dc <xQueueGenericCreate>
 800078e:	4603      	mov	r3, r0
 8000790:	4a10      	ldr	r2, [pc, #64]	; (80007d4 <main+0x6c>)
 8000792:	6013      	str	r3, [r2, #0]

	xTaskCreate(taskGive, "Give", 256, NULL, 1, NULL);
 8000794:	2300      	movs	r3, #0
 8000796:	9301      	str	r3, [sp, #4]
 8000798:	2301      	movs	r3, #1
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2300      	movs	r3, #0
 800079e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007a2:	490d      	ldr	r1, [pc, #52]	; (80007d8 <main+0x70>)
 80007a4:	480d      	ldr	r0, [pc, #52]	; (80007dc <main+0x74>)
 80007a6:	f003 fbfa 	bl	8003f9e <xTaskCreate>
	xTaskCreate(taskTake, "Take", 256, NULL, 2, NULL);
 80007aa:	2300      	movs	r3, #0
 80007ac:	9301      	str	r3, [sp, #4]
 80007ae:	2302      	movs	r3, #2
 80007b0:	9300      	str	r3, [sp, #0]
 80007b2:	2300      	movs	r3, #0
 80007b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007b8:	4909      	ldr	r1, [pc, #36]	; (80007e0 <main+0x78>)
 80007ba:	480a      	ldr	r0, [pc, #40]	; (80007e4 <main+0x7c>)
 80007bc:	f003 fbef 	bl	8003f9e <xTaskCreate>

	vTaskStartScheduler();
 80007c0:	f003 fd5c 	bl	800427c <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 80007c4:	f7ff ff10 	bl	80005e8 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 80007c8:	f002 fe83 	bl	80034d2 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80007cc:	e7fe      	b.n	80007cc <main+0x64>
 80007ce:	bf00      	nop
 80007d0:	0800680c 	.word	0x0800680c
 80007d4:	200002e8 	.word	0x200002e8
 80007d8:	08006824 	.word	0x08006824
 80007dc:	08000701 	.word	0x08000701
 80007e0:	0800682c 	.word	0x0800682c
 80007e4:	08000739 	.word	0x08000739

080007e8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b094      	sub	sp, #80	; 0x50
 80007ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0320 	add.w	r3, r7, #32
 80007f2:	2230      	movs	r2, #48	; 0x30
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f004 ffa4 	bl	8005744 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800080c:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <SystemClock_Config+0xd0>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	4a29      	ldr	r2, [pc, #164]	; (80008b8 <SystemClock_Config+0xd0>)
 8000812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000816:	6413      	str	r3, [r2, #64]	; 0x40
 8000818:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <SystemClock_Config+0xd0>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000824:	4b25      	ldr	r3, [pc, #148]	; (80008bc <SystemClock_Config+0xd4>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a24      	ldr	r2, [pc, #144]	; (80008bc <SystemClock_Config+0xd4>)
 800082a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800082e:	6013      	str	r3, [r2, #0]
 8000830:	4b22      	ldr	r3, [pc, #136]	; (80008bc <SystemClock_Config+0xd4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800083c:	2302      	movs	r3, #2
 800083e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000840:	2301      	movs	r3, #1
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000844:	2310      	movs	r3, #16
 8000846:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000848:	2302      	movs	r3, #2
 800084a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800084c:	2300      	movs	r3, #0
 800084e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000850:	2308      	movs	r3, #8
 8000852:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 216;
 8000854:	23d8      	movs	r3, #216	; 0xd8
 8000856:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000858:	2302      	movs	r3, #2
 800085a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800085c:	2302      	movs	r3, #2
 800085e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000860:	f107 0320 	add.w	r3, r7, #32
 8000864:	4618      	mov	r0, r3
 8000866:	f000 fdbb 	bl	80013e0 <HAL_RCC_OscConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0x8c>
	{
		Error_Handler();
 8000870:	f000 f838 	bl	80008e4 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000874:	f000 fd64 	bl	8001340 <HAL_PWREx_EnableOverDrive>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 800087e:	f000 f831 	bl	80008e4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000882:	230f      	movs	r3, #15
 8000884:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000886:	2302      	movs	r3, #2
 8000888:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800088e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000892:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000898:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	2107      	movs	r1, #7
 80008a0:	4618      	mov	r0, r3
 80008a2:	f001 f841 	bl	8001928 <HAL_RCC_ClockConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0xc8>
	{
		Error_Handler();
 80008ac:	f000 f81a 	bl	80008e4 <Error_Handler>
	}
}
 80008b0:	bf00      	nop
 80008b2:	3750      	adds	r7, #80	; 0x50
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40007000 	.word	0x40007000

080008c0 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d101      	bne.n	80008d6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80008d2:	f000 fa6d 	bl	8000db0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40001000 	.word	0x40001000

080008e4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008ec:	e7fe      	b.n	80008ec <Error_Handler+0x8>
	...

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <HAL_MspInit+0x4c>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	4a10      	ldr	r2, [pc, #64]	; (800093c <HAL_MspInit+0x4c>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000900:	6413      	str	r3, [r2, #64]	; 0x40
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_MspInit+0x4c>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <HAL_MspInit+0x4c>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <HAL_MspInit+0x4c>)
 8000914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000918:	6453      	str	r3, [r2, #68]	; 0x44
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <HAL_MspInit+0x4c>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	210f      	movs	r1, #15
 800092a:	f06f 0001 	mvn.w	r0, #1
 800092e:	f000 fb17 	bl	8000f60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800

08000940 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08e      	sub	sp, #56	; 0x38
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000948:	2300      	movs	r3, #0
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000950:	4b33      	ldr	r3, [pc, #204]	; (8000a20 <HAL_InitTick+0xe0>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	4a32      	ldr	r2, [pc, #200]	; (8000a20 <HAL_InitTick+0xe0>)
 8000956:	f043 0310 	orr.w	r3, r3, #16
 800095a:	6413      	str	r3, [r2, #64]	; 0x40
 800095c:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <HAL_InitTick+0xe0>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	f003 0310 	and.w	r3, r3, #16
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000968:	f107 0210 	add.w	r2, r7, #16
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4611      	mov	r1, r2
 8000972:	4618      	mov	r0, r3
 8000974:	f001 f9be 	bl	8001cf4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000978:	6a3b      	ldr	r3, [r7, #32]
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800097c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800097e:	2b00      	cmp	r3, #0
 8000980:	d103      	bne.n	800098a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000982:	f001 f98f 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8000986:	6378      	str	r0, [r7, #52]	; 0x34
 8000988:	e004      	b.n	8000994 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800098a:	f001 f98b 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 800098e:	4603      	mov	r3, r0
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000996:	4a23      	ldr	r2, [pc, #140]	; (8000a24 <HAL_InitTick+0xe4>)
 8000998:	fba2 2303 	umull	r2, r3, r2, r3
 800099c:	0c9b      	lsrs	r3, r3, #18
 800099e:	3b01      	subs	r3, #1
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009a2:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <HAL_InitTick+0xe8>)
 80009a4:	4a21      	ldr	r2, [pc, #132]	; (8000a2c <HAL_InitTick+0xec>)
 80009a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009a8:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <HAL_InitTick+0xe8>)
 80009aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009ae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009b0:	4a1d      	ldr	r2, [pc, #116]	; (8000a28 <HAL_InitTick+0xe8>)
 80009b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <HAL_InitTick+0xe8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <HAL_InitTick+0xe8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <HAL_InitTick+0xe8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80009c8:	4817      	ldr	r0, [pc, #92]	; (8000a28 <HAL_InitTick+0xe8>)
 80009ca:	f001 fdb5 	bl	8002538 <HAL_TIM_Base_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d11b      	bne.n	8000a14 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009dc:	4812      	ldr	r0, [pc, #72]	; (8000a28 <HAL_InitTick+0xe8>)
 80009de:	f001 fe0d 	bl	80025fc <HAL_TIM_Base_Start_IT>
 80009e2:	4603      	mov	r3, r0
 80009e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d111      	bne.n	8000a14 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009f0:	2036      	movs	r0, #54	; 0x36
 80009f2:	f000 fad1 	bl	8000f98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b0f      	cmp	r3, #15
 80009fa:	d808      	bhi.n	8000a0e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009fc:	2200      	movs	r2, #0
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	2036      	movs	r0, #54	; 0x36
 8000a02:	f000 faad 	bl	8000f60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a06:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <HAL_InitTick+0xf0>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	e002      	b.n	8000a14 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3738      	adds	r7, #56	; 0x38
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800
 8000a24:	431bde83 	.word	0x431bde83
 8000a28:	200002ec 	.word	0x200002ec
 8000a2c:	40001000 	.word	0x40001000
 8000a30:	20000004 	.word	0x20000004

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <NMI_Handler+0x4>

08000a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <MemManage_Handler+0x4>

08000a46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <BusFault_Handler+0x4>

08000a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <UsageFault_Handler+0x4>

08000a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a64:	4802      	ldr	r0, [pc, #8]	; (8000a70 <TIM6_DAC_IRQHandler+0x10>)
 8000a66:	f001 fe41 	bl	80026ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200002ec 	.word	0x200002ec

08000a74 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	e00a      	b.n	8000a9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a86:	f3af 8000 	nop.w
 8000a8a:	4601      	mov	r1, r0
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	1c5a      	adds	r2, r3, #1
 8000a90:	60ba      	str	r2, [r7, #8]
 8000a92:	b2ca      	uxtb	r2, r1
 8000a94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	697a      	ldr	r2, [r7, #20]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	dbf0      	blt.n	8000a86 <_read+0x12>
  }

  return len;
 8000aa4:	687b      	ldr	r3, [r7, #4]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b086      	sub	sp, #24
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	60f8      	str	r0, [r7, #12]
 8000ab6:	60b9      	str	r1, [r7, #8]
 8000ab8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	e009      	b.n	8000ad4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	1c5a      	adds	r2, r3, #1
 8000ac4:	60ba      	str	r2, [r7, #8]
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fe07 	bl	80006dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	dbf1      	blt.n	8000ac0 <_write+0x12>
  }
  return len;
 8000adc:	687b      	ldr	r3, [r7, #4]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <_close>:

int _close(int file)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
 8000b06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b0e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <_isatty>:

int _isatty(int file)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3714      	adds	r7, #20
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
	...

08000b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b58:	4a14      	ldr	r2, [pc, #80]	; (8000bac <_sbrk+0x5c>)
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <_sbrk+0x60>)
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <_sbrk+0x64>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d102      	bne.n	8000b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <_sbrk+0x64>)
 8000b6e:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <_sbrk+0x68>)
 8000b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d207      	bcs.n	8000b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b80:	f004 fda8 	bl	80056d4 <__errno>
 8000b84:	4603      	mov	r3, r0
 8000b86:	220c      	movs	r2, #12
 8000b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b8e:	e009      	b.n	8000ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <_sbrk+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b96:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <_sbrk+0x64>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <_sbrk+0x64>)
 8000ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20050000 	.word	0x20050000
 8000bb0:	00000400 	.word	0x00000400
 8000bb4:	20000338 	.word	0x20000338
 8000bb8:	20004128 	.word	0x20004128

08000bbc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <SystemInit+0x20>)
 8000bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <SystemInit+0x20>)
 8000bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000be6:	4a15      	ldr	r2, [pc, #84]	; (8000c3c <MX_USART1_UART_Init+0x5c>)
 8000be8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bea:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c22:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c24:	f001 ff68 	bl	8002af8 <HAL_UART_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c2e:	f7ff fe59 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2000033c 	.word	0x2000033c
 8000c3c:	40011000 	.word	0x40011000

08000c40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b0ac      	sub	sp, #176	; 0xb0
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c58:	f107 0318 	add.w	r3, r7, #24
 8000c5c:	2284      	movs	r2, #132	; 0x84
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f004 fd6f 	bl	8005744 <memset>
  if(uartHandle->Instance==USART1)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a32      	ldr	r2, [pc, #200]	; (8000d34 <HAL_UART_MspInit+0xf4>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d15c      	bne.n	8000d2a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c70:	2340      	movs	r3, #64	; 0x40
 8000c72:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c74:	2300      	movs	r3, #0
 8000c76:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c78:	f107 0318 	add.w	r3, r7, #24
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f001 f86b 	bl	8001d58 <HAL_RCCEx_PeriphCLKConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c88:	f7ff fe2c 	bl	80008e4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c8c:	4b2a      	ldr	r3, [pc, #168]	; (8000d38 <HAL_UART_MspInit+0xf8>)
 8000c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c90:	4a29      	ldr	r2, [pc, #164]	; (8000d38 <HAL_UART_MspInit+0xf8>)
 8000c92:	f043 0310 	orr.w	r3, r3, #16
 8000c96:	6453      	str	r3, [r2, #68]	; 0x44
 8000c98:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <HAL_UART_MspInit+0xf8>)
 8000c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9c:	f003 0310 	and.w	r3, r3, #16
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca4:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <HAL_UART_MspInit+0xf8>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	4a23      	ldr	r2, [pc, #140]	; (8000d38 <HAL_UART_MspInit+0xf8>)
 8000caa:	f043 0302 	orr.w	r3, r3, #2
 8000cae:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb0:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <HAL_UART_MspInit+0xf8>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbc:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <HAL_UART_MspInit+0xf8>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc0:	4a1d      	ldr	r2, [pc, #116]	; (8000d38 <HAL_UART_MspInit+0xf8>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <HAL_UART_MspInit+0xf8>)
 8000cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cec:	2307      	movs	r3, #7
 8000cee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4810      	ldr	r0, [pc, #64]	; (8000d3c <HAL_UART_MspInit+0xfc>)
 8000cfa:	f000 f95b 	bl	8000fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d12:	2303      	movs	r3, #3
 8000d14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d18:	2307      	movs	r3, #7
 8000d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d22:	4619      	mov	r1, r3
 8000d24:	4806      	ldr	r0, [pc, #24]	; (8000d40 <HAL_UART_MspInit+0x100>)
 8000d26:	f000 f945 	bl	8000fb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	37b0      	adds	r7, #176	; 0xb0
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40011000 	.word	0x40011000
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40020400 	.word	0x40020400
 8000d40:	40020000 	.word	0x40020000

08000d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d48:	480d      	ldr	r0, [pc, #52]	; (8000d80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d4a:	490e      	ldr	r1, [pc, #56]	; (8000d84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d4c:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d60:	4c0b      	ldr	r4, [pc, #44]	; (8000d90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d6e:	f7ff ff25 	bl	8000bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d72:	f004 fcb5 	bl	80056e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d76:	f7ff fcf7 	bl	8000768 <main>
  bx  lr    
 8000d7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d7c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d88:	080068fc 	.word	0x080068fc
  ldr r2, =_sbss
 8000d8c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d90:	20004124 	.word	0x20004124

08000d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC_IRQHandler>

08000d96 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9a:	2003      	movs	r0, #3
 8000d9c:	f000 f8d5 	bl	8000f4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da0:	200f      	movs	r0, #15
 8000da2:	f7ff fdcd 	bl	8000940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da6:	f7ff fda3 	bl	80008f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x20>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	200003c4 	.word	0x200003c4

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_GetTick+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	200003c4 	.word	0x200003c4

08000df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <__NVIC_SetPriorityGrouping+0x40>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1e:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <__NVIC_SetPriorityGrouping+0x40>)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	60d3      	str	r3, [r2, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00
 8000e34:	05fa0000 	.word	0x05fa0000

08000e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <__NVIC_GetPriorityGrouping+0x18>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	f003 0307 	and.w	r3, r3, #7
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db0b      	blt.n	8000e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f003 021f 	and.w	r2, r3, #31
 8000e6c:	4907      	ldr	r1, [pc, #28]	; (8000e8c <__NVIC_EnableIRQ+0x38>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	095b      	lsrs	r3, r3, #5
 8000e74:	2001      	movs	r0, #1
 8000e76:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000e100 	.word	0xe000e100

08000e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	6039      	str	r1, [r7, #0]
 8000e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db0a      	blt.n	8000eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	490c      	ldr	r1, [pc, #48]	; (8000edc <__NVIC_SetPriority+0x4c>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb8:	e00a      	b.n	8000ed0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4908      	ldr	r1, [pc, #32]	; (8000ee0 <__NVIC_SetPriority+0x50>)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	0112      	lsls	r2, r2, #4
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	440b      	add	r3, r1
 8000ece:	761a      	strb	r2, [r3, #24]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f1c3 0307 	rsb	r3, r3, #7
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf28      	it	cs
 8000f02:	2304      	movcs	r3, #4
 8000f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	d902      	bls.n	8000f14 <NVIC_EncodePriority+0x30>
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3b03      	subs	r3, #3
 8000f12:	e000      	b.n	8000f16 <NVIC_EncodePriority+0x32>
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43da      	mvns	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	401a      	ands	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	4313      	orrs	r3, r2
         );
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3724      	adds	r7, #36	; 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ff4c 	bl	8000df0 <__NVIC_SetPriorityGrouping>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f72:	f7ff ff61 	bl	8000e38 <__NVIC_GetPriorityGrouping>
 8000f76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	68b9      	ldr	r1, [r7, #8]
 8000f7c:	6978      	ldr	r0, [r7, #20]
 8000f7e:	f7ff ffb1 	bl	8000ee4 <NVIC_EncodePriority>
 8000f82:	4602      	mov	r2, r0
 8000f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f88:	4611      	mov	r1, r2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ff80 	bl	8000e90 <__NVIC_SetPriority>
}
 8000f90:	bf00      	nop
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ff54 	bl	8000e54 <__NVIC_EnableIRQ>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
 8000fd2:	e175      	b.n	80012c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	f040 8164 	bne.w	80012ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d005      	beq.n	800100a <HAL_GPIO_Init+0x56>
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d130      	bne.n	800106c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	2203      	movs	r2, #3
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001040:	2201      	movs	r2, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	091b      	lsrs	r3, r3, #4
 8001056:	f003 0201 	and.w	r2, r3, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b03      	cmp	r3, #3
 8001076:	d017      	beq.n	80010a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	2203      	movs	r2, #3
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d123      	bne.n	80010fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	08da      	lsrs	r2, r3, #3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3208      	adds	r2, #8
 80010bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	220f      	movs	r2, #15
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	691a      	ldr	r2, [r3, #16]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	08da      	lsrs	r2, r3, #3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3208      	adds	r2, #8
 80010f6:	69b9      	ldr	r1, [r7, #24]
 80010f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0203 	and.w	r2, r3, #3
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001138:	2b00      	cmp	r3, #0
 800113a:	f000 80be 	beq.w	80012ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	4b66      	ldr	r3, [pc, #408]	; (80012d8 <HAL_GPIO_Init+0x324>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	4a65      	ldr	r2, [pc, #404]	; (80012d8 <HAL_GPIO_Init+0x324>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001148:	6453      	str	r3, [r2, #68]	; 0x44
 800114a:	4b63      	ldr	r3, [pc, #396]	; (80012d8 <HAL_GPIO_Init+0x324>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001156:	4a61      	ldr	r2, [pc, #388]	; (80012dc <HAL_GPIO_Init+0x328>)
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	3302      	adds	r3, #2
 800115e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	220f      	movs	r2, #15
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a58      	ldr	r2, [pc, #352]	; (80012e0 <HAL_GPIO_Init+0x32c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d037      	beq.n	80011f2 <HAL_GPIO_Init+0x23e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a57      	ldr	r2, [pc, #348]	; (80012e4 <HAL_GPIO_Init+0x330>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d031      	beq.n	80011ee <HAL_GPIO_Init+0x23a>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a56      	ldr	r2, [pc, #344]	; (80012e8 <HAL_GPIO_Init+0x334>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d02b      	beq.n	80011ea <HAL_GPIO_Init+0x236>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a55      	ldr	r2, [pc, #340]	; (80012ec <HAL_GPIO_Init+0x338>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d025      	beq.n	80011e6 <HAL_GPIO_Init+0x232>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a54      	ldr	r2, [pc, #336]	; (80012f0 <HAL_GPIO_Init+0x33c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d01f      	beq.n	80011e2 <HAL_GPIO_Init+0x22e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a53      	ldr	r2, [pc, #332]	; (80012f4 <HAL_GPIO_Init+0x340>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d019      	beq.n	80011de <HAL_GPIO_Init+0x22a>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a52      	ldr	r2, [pc, #328]	; (80012f8 <HAL_GPIO_Init+0x344>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d013      	beq.n	80011da <HAL_GPIO_Init+0x226>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a51      	ldr	r2, [pc, #324]	; (80012fc <HAL_GPIO_Init+0x348>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d00d      	beq.n	80011d6 <HAL_GPIO_Init+0x222>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a50      	ldr	r2, [pc, #320]	; (8001300 <HAL_GPIO_Init+0x34c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d007      	beq.n	80011d2 <HAL_GPIO_Init+0x21e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4f      	ldr	r2, [pc, #316]	; (8001304 <HAL_GPIO_Init+0x350>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d101      	bne.n	80011ce <HAL_GPIO_Init+0x21a>
 80011ca:	2309      	movs	r3, #9
 80011cc:	e012      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011ce:	230a      	movs	r3, #10
 80011d0:	e010      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011d2:	2308      	movs	r3, #8
 80011d4:	e00e      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011d6:	2307      	movs	r3, #7
 80011d8:	e00c      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011da:	2306      	movs	r3, #6
 80011dc:	e00a      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011de:	2305      	movs	r3, #5
 80011e0:	e008      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011e2:	2304      	movs	r3, #4
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011e6:	2303      	movs	r3, #3
 80011e8:	e004      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_GPIO_Init+0x240>
 80011f2:	2300      	movs	r3, #0
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	f002 0203 	and.w	r2, r2, #3
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4093      	lsls	r3, r2
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001204:	4935      	ldr	r1, [pc, #212]	; (80012dc <HAL_GPIO_Init+0x328>)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001212:	4b3d      	ldr	r3, [pc, #244]	; (8001308 <HAL_GPIO_Init+0x354>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001236:	4a34      	ldr	r2, [pc, #208]	; (8001308 <HAL_GPIO_Init+0x354>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800123c:	4b32      	ldr	r3, [pc, #200]	; (8001308 <HAL_GPIO_Init+0x354>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001260:	4a29      	ldr	r2, [pc, #164]	; (8001308 <HAL_GPIO_Init+0x354>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001266:	4b28      	ldr	r3, [pc, #160]	; (8001308 <HAL_GPIO_Init+0x354>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800128a:	4a1f      	ldr	r2, [pc, #124]	; (8001308 <HAL_GPIO_Init+0x354>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001290:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <HAL_GPIO_Init+0x354>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012b4:	4a14      	ldr	r2, [pc, #80]	; (8001308 <HAL_GPIO_Init+0x354>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3301      	adds	r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	2b0f      	cmp	r3, #15
 80012c4:	f67f ae86 	bls.w	8000fd4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40013800 	.word	0x40013800
 80012e0:	40020000 	.word	0x40020000
 80012e4:	40020400 	.word	0x40020400
 80012e8:	40020800 	.word	0x40020800
 80012ec:	40020c00 	.word	0x40020c00
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40021400 	.word	0x40021400
 80012f8:	40021800 	.word	0x40021800
 80012fc:	40021c00 	.word	0x40021c00
 8001300:	40022000 	.word	0x40022000
 8001304:	40022400 	.word	0x40022400
 8001308:	40013c00 	.word	0x40013c00

0800130c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001328:	e003      	b.n	8001332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800132a:	887b      	ldrh	r3, [r7, #2]
 800132c:	041a      	lsls	r2, r3, #16
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	619a      	str	r2, [r3, #24]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	4a22      	ldr	r2, [pc, #136]	; (80013d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	6413      	str	r3, [r2, #64]	; 0x40
 8001356:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001362:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a1d      	ldr	r2, [pc, #116]	; (80013dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800136c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800136e:	f7ff fd33 	bl	8000dd8 <HAL_GetTick>
 8001372:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001374:	e009      	b.n	800138a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001376:	f7ff fd2f 	bl	8000dd8 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001384:	d901      	bls.n	800138a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e022      	b.n	80013d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001396:	d1ee      	bne.n	8001376 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001398:	4b10      	ldr	r3, [pc, #64]	; (80013dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0f      	ldr	r2, [pc, #60]	; (80013dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800139e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013a4:	f7ff fd18 	bl	8000dd8 <HAL_GetTick>
 80013a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013aa:	e009      	b.n	80013c0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013ac:	f7ff fd14 	bl	8000dd8 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013ba:	d901      	bls.n	80013c0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e007      	b.n	80013d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_PWREx_EnableOverDrive+0x9c>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013cc:	d1ee      	bne.n	80013ac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40007000 	.word	0x40007000

080013e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80013e8:	2300      	movs	r3, #0
 80013ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e291      	b.n	800191a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 8087 	beq.w	8001512 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001404:	4b96      	ldr	r3, [pc, #600]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 030c 	and.w	r3, r3, #12
 800140c:	2b04      	cmp	r3, #4
 800140e:	d00c      	beq.n	800142a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001410:	4b93      	ldr	r3, [pc, #588]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 030c 	and.w	r3, r3, #12
 8001418:	2b08      	cmp	r3, #8
 800141a:	d112      	bne.n	8001442 <HAL_RCC_OscConfig+0x62>
 800141c:	4b90      	ldr	r3, [pc, #576]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001424:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001428:	d10b      	bne.n	8001442 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800142a:	4b8d      	ldr	r3, [pc, #564]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d06c      	beq.n	8001510 <HAL_RCC_OscConfig+0x130>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d168      	bne.n	8001510 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e26b      	b.n	800191a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800144a:	d106      	bne.n	800145a <HAL_RCC_OscConfig+0x7a>
 800144c:	4b84      	ldr	r3, [pc, #528]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a83      	ldr	r2, [pc, #524]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	e02e      	b.n	80014b8 <HAL_RCC_OscConfig+0xd8>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10c      	bne.n	800147c <HAL_RCC_OscConfig+0x9c>
 8001462:	4b7f      	ldr	r3, [pc, #508]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a7e      	ldr	r2, [pc, #504]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	4b7c      	ldr	r3, [pc, #496]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a7b      	ldr	r2, [pc, #492]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001474:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e01d      	b.n	80014b8 <HAL_RCC_OscConfig+0xd8>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001484:	d10c      	bne.n	80014a0 <HAL_RCC_OscConfig+0xc0>
 8001486:	4b76      	ldr	r3, [pc, #472]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a75      	ldr	r2, [pc, #468]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 800148c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	4b73      	ldr	r3, [pc, #460]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a72      	ldr	r2, [pc, #456]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	e00b      	b.n	80014b8 <HAL_RCC_OscConfig+0xd8>
 80014a0:	4b6f      	ldr	r3, [pc, #444]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a6e      	ldr	r2, [pc, #440]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 80014a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	4b6c      	ldr	r3, [pc, #432]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a6b      	ldr	r2, [pc, #428]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 80014b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d013      	beq.n	80014e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7ff fc8a 	bl	8000dd8 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c8:	f7ff fc86 	bl	8000dd8 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	; 0x64
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e21f      	b.n	800191a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014da:	4b61      	ldr	r3, [pc, #388]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0xe8>
 80014e6:	e014      	b.n	8001512 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e8:	f7ff fc76 	bl	8000dd8 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f0:	f7ff fc72 	bl	8000dd8 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b64      	cmp	r3, #100	; 0x64
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e20b      	b.n	800191a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001502:	4b57      	ldr	r3, [pc, #348]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x110>
 800150e:	e000      	b.n	8001512 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d069      	beq.n	80015f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800151e:	4b50      	ldr	r3, [pc, #320]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00b      	beq.n	8001542 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800152a:	4b4d      	ldr	r3, [pc, #308]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b08      	cmp	r3, #8
 8001534:	d11c      	bne.n	8001570 <HAL_RCC_OscConfig+0x190>
 8001536:	4b4a      	ldr	r3, [pc, #296]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d116      	bne.n	8001570 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001542:	4b47      	ldr	r3, [pc, #284]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d005      	beq.n	800155a <HAL_RCC_OscConfig+0x17a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d001      	beq.n	800155a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e1df      	b.n	800191a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155a:	4b41      	ldr	r3, [pc, #260]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	493d      	ldr	r1, [pc, #244]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 800156a:	4313      	orrs	r3, r2
 800156c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156e:	e040      	b.n	80015f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d023      	beq.n	80015c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001578:	4b39      	ldr	r3, [pc, #228]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a38      	ldr	r2, [pc, #224]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001584:	f7ff fc28 	bl	8000dd8 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800158c:	f7ff fc24 	bl	8000dd8 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e1bd      	b.n	800191a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159e:	4b30      	ldr	r3, [pc, #192]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015aa:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4929      	ldr	r1, [pc, #164]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	600b      	str	r3, [r1, #0]
 80015be:	e018      	b.n	80015f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015c0:	4b27      	ldr	r3, [pc, #156]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a26      	ldr	r2, [pc, #152]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 80015c6:	f023 0301 	bic.w	r3, r3, #1
 80015ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015cc:	f7ff fc04 	bl	8000dd8 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d4:	f7ff fc00 	bl	8000dd8 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e199      	b.n	800191a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e6:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d038      	beq.n	8001670 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d019      	beq.n	800163a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800160a:	4a15      	ldr	r2, [pc, #84]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001612:	f7ff fbe1 	bl	8000dd8 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161a:	f7ff fbdd 	bl	8000dd8 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e176      	b.n	800191a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 800162e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x23a>
 8001638:	e01a      	b.n	8001670 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 800163c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800163e:	4a08      	ldr	r2, [pc, #32]	; (8001660 <HAL_RCC_OscConfig+0x280>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001646:	f7ff fbc7 	bl	8000dd8 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800164c:	e00a      	b.n	8001664 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164e:	f7ff fbc3 	bl	8000dd8 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d903      	bls.n	8001664 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e15c      	b.n	800191a <HAL_RCC_OscConfig+0x53a>
 8001660:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001664:	4b91      	ldr	r3, [pc, #580]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 8001666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1ee      	bne.n	800164e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80a4 	beq.w	80017c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800167e:	4b8b      	ldr	r3, [pc, #556]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10d      	bne.n	80016a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	4b88      	ldr	r3, [pc, #544]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	4a87      	ldr	r2, [pc, #540]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 8001690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001694:	6413      	str	r3, [r2, #64]	; 0x40
 8001696:	4b85      	ldr	r3, [pc, #532]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016a2:	2301      	movs	r3, #1
 80016a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a6:	4b82      	ldr	r3, [pc, #520]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d118      	bne.n	80016e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80016b2:	4b7f      	ldr	r3, [pc, #508]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a7e      	ldr	r2, [pc, #504]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 80016b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016be:	f7ff fb8b 	bl	8000dd8 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c6:	f7ff fb87 	bl	8000dd8 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b64      	cmp	r3, #100	; 0x64
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e120      	b.n	800191a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d8:	4b75      	ldr	r3, [pc, #468]	; (80018b0 <HAL_RCC_OscConfig+0x4d0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0f0      	beq.n	80016c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d106      	bne.n	80016fa <HAL_RCC_OscConfig+0x31a>
 80016ec:	4b6f      	ldr	r3, [pc, #444]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 80016ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f0:	4a6e      	ldr	r2, [pc, #440]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6713      	str	r3, [r2, #112]	; 0x70
 80016f8:	e02d      	b.n	8001756 <HAL_RCC_OscConfig+0x376>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0x33c>
 8001702:	4b6a      	ldr	r3, [pc, #424]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 8001704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001706:	4a69      	ldr	r2, [pc, #420]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	6713      	str	r3, [r2, #112]	; 0x70
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 8001710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001712:	4a66      	ldr	r2, [pc, #408]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 8001714:	f023 0304 	bic.w	r3, r3, #4
 8001718:	6713      	str	r3, [r2, #112]	; 0x70
 800171a:	e01c      	b.n	8001756 <HAL_RCC_OscConfig+0x376>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b05      	cmp	r3, #5
 8001722:	d10c      	bne.n	800173e <HAL_RCC_OscConfig+0x35e>
 8001724:	4b61      	ldr	r3, [pc, #388]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 8001726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001728:	4a60      	ldr	r2, [pc, #384]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 800172a:	f043 0304 	orr.w	r3, r3, #4
 800172e:	6713      	str	r3, [r2, #112]	; 0x70
 8001730:	4b5e      	ldr	r3, [pc, #376]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001734:	4a5d      	ldr	r2, [pc, #372]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6713      	str	r3, [r2, #112]	; 0x70
 800173c:	e00b      	b.n	8001756 <HAL_RCC_OscConfig+0x376>
 800173e:	4b5b      	ldr	r3, [pc, #364]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 8001740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001742:	4a5a      	ldr	r2, [pc, #360]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 8001744:	f023 0301 	bic.w	r3, r3, #1
 8001748:	6713      	str	r3, [r2, #112]	; 0x70
 800174a:	4b58      	ldr	r3, [pc, #352]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 800174c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174e:	4a57      	ldr	r2, [pc, #348]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 8001750:	f023 0304 	bic.w	r3, r3, #4
 8001754:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d015      	beq.n	800178a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175e:	f7ff fb3b 	bl	8000dd8 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001764:	e00a      	b.n	800177c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001766:	f7ff fb37 	bl	8000dd8 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	f241 3288 	movw	r2, #5000	; 0x1388
 8001774:	4293      	cmp	r3, r2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e0ce      	b.n	800191a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177c:	4b4b      	ldr	r3, [pc, #300]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0ee      	beq.n	8001766 <HAL_RCC_OscConfig+0x386>
 8001788:	e014      	b.n	80017b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178a:	f7ff fb25 	bl	8000dd8 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001790:	e00a      	b.n	80017a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001792:	f7ff fb21 	bl	8000dd8 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e0b8      	b.n	800191a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a8:	4b40      	ldr	r3, [pc, #256]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 80017aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1ee      	bne.n	8001792 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017b4:	7dfb      	ldrb	r3, [r7, #23]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d105      	bne.n	80017c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ba:	4b3c      	ldr	r3, [pc, #240]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a3b      	ldr	r2, [pc, #236]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 80017c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 80a4 	beq.w	8001918 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017d0:	4b36      	ldr	r3, [pc, #216]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d06b      	beq.n	80018b4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d149      	bne.n	8001878 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e4:	4b31      	ldr	r3, [pc, #196]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a30      	ldr	r2, [pc, #192]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 80017ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff faf2 	bl	8000dd8 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f8:	f7ff faee 	bl	8000dd8 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e087      	b.n	800191a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180a:	4b28      	ldr	r3, [pc, #160]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69da      	ldr	r2, [r3, #28]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	019b      	lsls	r3, r3, #6
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	085b      	lsrs	r3, r3, #1
 800182e:	3b01      	subs	r3, #1
 8001830:	041b      	lsls	r3, r3, #16
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001838:	061b      	lsls	r3, r3, #24
 800183a:	4313      	orrs	r3, r2
 800183c:	4a1b      	ldr	r2, [pc, #108]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 800183e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001842:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a18      	ldr	r2, [pc, #96]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 800184a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800184e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff fac2 	bl	8000dd8 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001858:	f7ff fabe 	bl	8000dd8 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e057      	b.n	800191a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x478>
 8001876:	e04f      	b.n	8001918 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0b      	ldr	r2, [pc, #44]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 800187e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff faa8 	bl	8000dd8 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188c:	f7ff faa4 	bl	8000dd8 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e03d      	b.n	800191a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189e:	4b03      	ldr	r3, [pc, #12]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x4ac>
 80018aa:	e035      	b.n	8001918 <HAL_RCC_OscConfig+0x538>
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <HAL_RCC_OscConfig+0x544>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d028      	beq.n	8001914 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d121      	bne.n	8001914 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018da:	429a      	cmp	r2, r3
 80018dc:	d11a      	bne.n	8001914 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018e4:	4013      	ands	r3, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d111      	bne.n	8001914 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fa:	085b      	lsrs	r3, r3, #1
 80018fc:	3b01      	subs	r3, #1
 80018fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001900:	429a      	cmp	r2, r3
 8001902:	d107      	bne.n	8001914 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001910:	429a      	cmp	r2, r3
 8001912:	d001      	beq.n	8001918 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800

08001928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0d0      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001940:	4b6a      	ldr	r3, [pc, #424]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 030f 	and.w	r3, r3, #15
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d910      	bls.n	8001970 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b67      	ldr	r3, [pc, #412]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 020f 	bic.w	r2, r3, #15
 8001956:	4965      	ldr	r1, [pc, #404]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	4b63      	ldr	r3, [pc, #396]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0b8      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d020      	beq.n	80019be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001988:	4b59      	ldr	r3, [pc, #356]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	4a58      	ldr	r2, [pc, #352]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 800198e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001992:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019a0:	4b53      	ldr	r3, [pc, #332]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4a52      	ldr	r2, [pc, #328]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 80019a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ac:	4b50      	ldr	r3, [pc, #320]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	494d      	ldr	r1, [pc, #308]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d040      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d2:	4b47      	ldr	r3, [pc, #284]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d115      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e07f      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ea:	4b41      	ldr	r3, [pc, #260]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d109      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e073      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fa:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e06b      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a0a:	4b39      	ldr	r3, [pc, #228]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f023 0203 	bic.w	r2, r3, #3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	4936      	ldr	r1, [pc, #216]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a1c:	f7ff f9dc 	bl	8000dd8 <HAL_GetTick>
 8001a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a22:	e00a      	b.n	8001a3a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a24:	f7ff f9d8 	bl	8000dd8 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e053      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 020c 	and.w	r2, r3, #12
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d1eb      	bne.n	8001a24 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a4c:	4b27      	ldr	r3, [pc, #156]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 030f 	and.w	r3, r3, #15
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d210      	bcs.n	8001a7c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5a:	4b24      	ldr	r3, [pc, #144]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 020f 	bic.w	r2, r3, #15
 8001a62:	4922      	ldr	r1, [pc, #136]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d001      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e032      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d008      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	4916      	ldr	r1, [pc, #88]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d009      	beq.n	8001aba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	490e      	ldr	r1, [pc, #56]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aba:	f000 f821 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	490a      	ldr	r1, [pc, #40]	; (8001af4 <HAL_RCC_ClockConfig+0x1cc>)
 8001acc:	5ccb      	ldrb	r3, [r1, r3]
 8001ace:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad2:	4a09      	ldr	r2, [pc, #36]	; (8001af8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_RCC_ClockConfig+0x1d4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe ff30 	bl	8000940 <HAL_InitTick>

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023c00 	.word	0x40023c00
 8001af0:	40023800 	.word	0x40023800
 8001af4:	0800683c 	.word	0x0800683c
 8001af8:	20000000 	.word	0x20000000
 8001afc:	20000004 	.word	0x20000004

08001b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b04:	b090      	sub	sp, #64	; 0x40
 8001b06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b10:	2300      	movs	r3, #0
 8001b12:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b18:	4b59      	ldr	r3, [pc, #356]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d00d      	beq.n	8001b40 <HAL_RCC_GetSysClockFreq+0x40>
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	f200 80a1 	bhi.w	8001c6c <HAL_RCC_GetSysClockFreq+0x16c>
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <HAL_RCC_GetSysClockFreq+0x34>
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d003      	beq.n	8001b3a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b32:	e09b      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b34:	4b53      	ldr	r3, [pc, #332]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b36:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b38:	e09b      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b3a:	4b53      	ldr	r3, [pc, #332]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b3e:	e098      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b40:	4b4f      	ldr	r3, [pc, #316]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b48:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b4a:	4b4d      	ldr	r3, [pc, #308]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d028      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b56:	4b4a      	ldr	r3, [pc, #296]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	099b      	lsrs	r3, r3, #6
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	623b      	str	r3, [r7, #32]
 8001b60:	627a      	str	r2, [r7, #36]	; 0x24
 8001b62:	6a3b      	ldr	r3, [r7, #32]
 8001b64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4b47      	ldr	r3, [pc, #284]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b6c:	fb03 f201 	mul.w	r2, r3, r1
 8001b70:	2300      	movs	r3, #0
 8001b72:	fb00 f303 	mul.w	r3, r0, r3
 8001b76:	4413      	add	r3, r2
 8001b78:	4a43      	ldr	r2, [pc, #268]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b7a:	fba0 1202 	umull	r1, r2, r0, r2
 8001b7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b80:	460a      	mov	r2, r1
 8001b82:	62ba      	str	r2, [r7, #40]	; 0x28
 8001b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b86:	4413      	add	r3, r2
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	61bb      	str	r3, [r7, #24]
 8001b90:	61fa      	str	r2, [r7, #28]
 8001b92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b9a:	f7fe fb89 	bl	80002b0 <__aeabi_uldivmod>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ba6:	e053      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba8:	4b35      	ldr	r3, [pc, #212]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	099b      	lsrs	r3, r3, #6
 8001bae:	2200      	movs	r2, #0
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	617a      	str	r2, [r7, #20]
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001bba:	f04f 0b00 	mov.w	fp, #0
 8001bbe:	4652      	mov	r2, sl
 8001bc0:	465b      	mov	r3, fp
 8001bc2:	f04f 0000 	mov.w	r0, #0
 8001bc6:	f04f 0100 	mov.w	r1, #0
 8001bca:	0159      	lsls	r1, r3, #5
 8001bcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bd0:	0150      	lsls	r0, r2, #5
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	ebb2 080a 	subs.w	r8, r2, sl
 8001bda:	eb63 090b 	sbc.w	r9, r3, fp
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	f04f 0300 	mov.w	r3, #0
 8001be6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001bea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001bee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001bf2:	ebb2 0408 	subs.w	r4, r2, r8
 8001bf6:	eb63 0509 	sbc.w	r5, r3, r9
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	00eb      	lsls	r3, r5, #3
 8001c04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c08:	00e2      	lsls	r2, r4, #3
 8001c0a:	4614      	mov	r4, r2
 8001c0c:	461d      	mov	r5, r3
 8001c0e:	eb14 030a 	adds.w	r3, r4, sl
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	eb45 030b 	adc.w	r3, r5, fp
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c26:	4629      	mov	r1, r5
 8001c28:	028b      	lsls	r3, r1, #10
 8001c2a:	4621      	mov	r1, r4
 8001c2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c30:	4621      	mov	r1, r4
 8001c32:	028a      	lsls	r2, r1, #10
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	60fa      	str	r2, [r7, #12]
 8001c40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c44:	f7fe fb34 	bl	80002b0 <__aeabi_uldivmod>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	0c1b      	lsrs	r3, r3, #16
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001c60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c6a:	e002      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c6e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3740      	adds	r7, #64	; 0x40
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	00f42400 	.word	0x00f42400
 8001c88:	017d7840 	.word	0x017d7840

08001c8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000000 	.word	0x20000000

08001ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ca8:	f7ff fff0 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	0a9b      	lsrs	r3, r3, #10
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4903      	ldr	r1, [pc, #12]	; (8001cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	0800684c 	.word	0x0800684c

08001ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cd0:	f7ff ffdc 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	0b5b      	lsrs	r3, r3, #13
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	4903      	ldr	r1, [pc, #12]	; (8001cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ce2:	5ccb      	ldrb	r3, [r1, r3]
 8001ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	0800684c 	.word	0x0800684c

08001cf4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	220f      	movs	r2, #15
 8001d02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 0203 	and.w	r2, r3, #3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d10:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	08db      	lsrs	r3, r3, #3
 8001d2e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d36:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <HAL_RCC_GetClockConfig+0x60>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 020f 	and.w	r2, r3, #15
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	601a      	str	r2, [r3, #0]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40023c00 	.word	0x40023c00

08001d58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d012      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d80:	4b69      	ldr	r3, [pc, #420]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	4a68      	ldr	r2, [pc, #416]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d86:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d8a:	6093      	str	r3, [r2, #8]
 8001d8c:	4b66      	ldr	r3, [pc, #408]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d94:	4964      	ldr	r1, [pc, #400]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001da2:	2301      	movs	r3, #1
 8001da4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d017      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001db2:	4b5d      	ldr	r3, [pc, #372]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001db8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc0:	4959      	ldr	r1, [pc, #356]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001dde:	2301      	movs	r3, #1
 8001de0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d017      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001dee:	4b4e      	ldr	r3, [pc, #312]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001df4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	494a      	ldr	r1, [pc, #296]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0320 	and.w	r3, r3, #32
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 808b 	beq.w	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e3c:	4b3a      	ldr	r3, [pc, #232]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	4a39      	ldr	r2, [pc, #228]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e46:	6413      	str	r3, [r2, #64]	; 0x40
 8001e48:	4b37      	ldr	r3, [pc, #220]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e54:	4b35      	ldr	r3, [pc, #212]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a34      	ldr	r2, [pc, #208]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e60:	f7fe ffba 	bl	8000dd8 <HAL_GetTick>
 8001e64:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e68:	f7fe ffb6 	bl	8000dd8 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b64      	cmp	r3, #100	; 0x64
 8001e74:	d901      	bls.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e357      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e7a:	4b2c      	ldr	r3, [pc, #176]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e86:	4b28      	ldr	r3, [pc, #160]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e8e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d035      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d02e      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ea4:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eae:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb2:	4a1d      	ldr	r2, [pc, #116]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eba:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebe:	4a1a      	ldr	r2, [pc, #104]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001ec6:	4a18      	ldr	r2, [pc, #96]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ecc:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d114      	bne.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed8:	f7fe ff7e 	bl	8000dd8 <HAL_GetTick>
 8001edc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ede:	e00a      	b.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee0:	f7fe ff7a 	bl	8000dd8 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e319      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0ee      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f0e:	d111      	bne.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f1e:	400b      	ands	r3, r1
 8001f20:	4901      	ldr	r1, [pc, #4]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
 8001f26:	e00b      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40007000 	.word	0x40007000
 8001f30:	0ffffcff 	.word	0x0ffffcff
 8001f34:	4baa      	ldr	r3, [pc, #680]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	4aa9      	ldr	r2, [pc, #676]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f3a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001f3e:	6093      	str	r3, [r2, #8]
 8001f40:	4ba7      	ldr	r3, [pc, #668]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f4c:	49a4      	ldr	r1, [pc, #656]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0310 	and.w	r3, r3, #16
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d010      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f5e:	4ba0      	ldr	r3, [pc, #640]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f64:	4a9e      	ldr	r2, [pc, #632]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f6e:	4b9c      	ldr	r3, [pc, #624]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f70:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f78:	4999      	ldr	r1, [pc, #612]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00a      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f8c:	4b94      	ldr	r3, [pc, #592]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f9a:	4991      	ldr	r1, [pc, #580]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00a      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fae:	4b8c      	ldr	r3, [pc, #560]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fbc:	4988      	ldr	r1, [pc, #544]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00a      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fd0:	4b83      	ldr	r3, [pc, #524]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fde:	4980      	ldr	r1, [pc, #512]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00a      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001ff2:	4b7b      	ldr	r3, [pc, #492]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002000:	4977      	ldr	r1, [pc, #476]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002002:	4313      	orrs	r3, r2
 8002004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00a      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002014:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201a:	f023 0203 	bic.w	r2, r3, #3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	496f      	ldr	r1, [pc, #444]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002024:	4313      	orrs	r3, r2
 8002026:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00a      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002036:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203c:	f023 020c 	bic.w	r2, r3, #12
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002044:	4966      	ldr	r1, [pc, #408]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002046:	4313      	orrs	r3, r2
 8002048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00a      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002058:	4b61      	ldr	r3, [pc, #388]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800205a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002066:	495e      	ldr	r1, [pc, #376]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002068:	4313      	orrs	r3, r2
 800206a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00a      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800207a:	4b59      	ldr	r3, [pc, #356]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002080:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002088:	4955      	ldr	r1, [pc, #340]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800208a:	4313      	orrs	r3, r2
 800208c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00a      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800209c:	4b50      	ldr	r3, [pc, #320]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800209e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020aa:	494d      	ldr	r1, [pc, #308]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00a      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80020be:	4b48      	ldr	r3, [pc, #288]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020cc:	4944      	ldr	r1, [pc, #272]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00a      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80020e0:	4b3f      	ldr	r3, [pc, #252]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ee:	493c      	ldr	r1, [pc, #240]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00a      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002102:	4b37      	ldr	r3, [pc, #220]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002108:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002110:	4933      	ldr	r1, [pc, #204]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002112:	4313      	orrs	r3, r2
 8002114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00a      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002124:	4b2e      	ldr	r3, [pc, #184]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002132:	492b      	ldr	r1, [pc, #172]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002134:	4313      	orrs	r3, r2
 8002136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d011      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002154:	4922      	ldr	r1, [pc, #136]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002156:	4313      	orrs	r3, r2
 8002158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002160:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002164:	d101      	bne.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002166:	2301      	movs	r3, #1
 8002168:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002176:	2301      	movs	r3, #1
 8002178:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002186:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002194:	4912      	ldr	r1, [pc, #72]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00b      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021a8:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021b8:	4909      	ldr	r1, [pc, #36]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d006      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 80d9 	beq.w	8002386 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80021d4:	4b02      	ldr	r3, [pc, #8]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a01      	ldr	r2, [pc, #4]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80021de:	e001      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80021e0:	40023800 	.word	0x40023800
 80021e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021e6:	f7fe fdf7 	bl	8000dd8 <HAL_GetTick>
 80021ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021ec:	e008      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80021ee:	f7fe fdf3 	bl	8000dd8 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b64      	cmp	r3, #100	; 0x64
 80021fa:	d901      	bls.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e194      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002200:	4b6c      	ldr	r3, [pc, #432]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f0      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d021      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800221c:	2b00      	cmp	r3, #0
 800221e:	d11d      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002220:	4b64      	ldr	r3, [pc, #400]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002226:	0c1b      	lsrs	r3, r3, #16
 8002228:	f003 0303 	and.w	r3, r3, #3
 800222c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800222e:	4b61      	ldr	r3, [pc, #388]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002234:	0e1b      	lsrs	r3, r3, #24
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	019a      	lsls	r2, r3, #6
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	041b      	lsls	r3, r3, #16
 8002246:	431a      	orrs	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	061b      	lsls	r3, r3, #24
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	071b      	lsls	r3, r3, #28
 8002254:	4957      	ldr	r1, [pc, #348]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002256:	4313      	orrs	r3, r2
 8002258:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d004      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002270:	d00a      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800227a:	2b00      	cmp	r3, #0
 800227c:	d02e      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002286:	d129      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002288:	4b4a      	ldr	r3, [pc, #296]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800228a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800228e:	0c1b      	lsrs	r3, r3, #16
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002296:	4b47      	ldr	r3, [pc, #284]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800229c:	0f1b      	lsrs	r3, r3, #28
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	019a      	lsls	r2, r3, #6
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	041b      	lsls	r3, r3, #16
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	061b      	lsls	r3, r3, #24
 80022b6:	431a      	orrs	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	071b      	lsls	r3, r3, #28
 80022bc:	493d      	ldr	r1, [pc, #244]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80022c4:	4b3b      	ldr	r3, [pc, #236]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022ca:	f023 021f 	bic.w	r2, r3, #31
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	3b01      	subs	r3, #1
 80022d4:	4937      	ldr	r1, [pc, #220]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d01d      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022e8:	4b32      	ldr	r3, [pc, #200]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022ee:	0e1b      	lsrs	r3, r3, #24
 80022f0:	f003 030f 	and.w	r3, r3, #15
 80022f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022f6:	4b2f      	ldr	r3, [pc, #188]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022fc:	0f1b      	lsrs	r3, r3, #28
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	019a      	lsls	r2, r3, #6
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	041b      	lsls	r3, r3, #16
 8002310:	431a      	orrs	r2, r3
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	061b      	lsls	r3, r3, #24
 8002316:	431a      	orrs	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	071b      	lsls	r3, r3, #28
 800231c:	4925      	ldr	r1, [pc, #148]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800231e:	4313      	orrs	r3, r2
 8002320:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d011      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	019a      	lsls	r2, r3, #6
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	041b      	lsls	r3, r3, #16
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	061b      	lsls	r3, r3, #24
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	071b      	lsls	r3, r3, #28
 800234c:	4919      	ldr	r1, [pc, #100]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002354:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a16      	ldr	r2, [pc, #88]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800235a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800235e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002360:	f7fe fd3a 	bl	8000dd8 <HAL_GetTick>
 8002364:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002366:	e008      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002368:	f7fe fd36 	bl	8000dd8 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b64      	cmp	r3, #100	; 0x64
 8002374:	d901      	bls.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e0d7      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800237a:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	2b01      	cmp	r3, #1
 800238a:	f040 80cd 	bne.w	8002528 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800238e:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a08      	ldr	r2, [pc, #32]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002398:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800239a:	f7fe fd1d 	bl	8000dd8 <HAL_GetTick>
 800239e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023a0:	e00a      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80023a2:	f7fe fd19 	bl	8000dd8 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b64      	cmp	r3, #100	; 0x64
 80023ae:	d903      	bls.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e0ba      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80023b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023b8:	4b5e      	ldr	r3, [pc, #376]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023c4:	d0ed      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x682>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d009      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d02e      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d12a      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80023ee:	4b51      	ldr	r3, [pc, #324]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f4:	0c1b      	lsrs	r3, r3, #16
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80023fc:	4b4d      	ldr	r3, [pc, #308]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002402:	0f1b      	lsrs	r3, r3, #28
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	019a      	lsls	r2, r3, #6
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	041b      	lsls	r3, r3, #16
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	061b      	lsls	r3, r3, #24
 800241c:	431a      	orrs	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	071b      	lsls	r3, r3, #28
 8002422:	4944      	ldr	r1, [pc, #272]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002424:	4313      	orrs	r3, r2
 8002426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800242a:	4b42      	ldr	r3, [pc, #264]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800242c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002430:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	3b01      	subs	r3, #1
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	493d      	ldr	r1, [pc, #244]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800243e:	4313      	orrs	r3, r2
 8002440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d022      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002454:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002458:	d11d      	bne.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800245a:	4b36      	ldr	r3, [pc, #216]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800245c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002460:	0e1b      	lsrs	r3, r3, #24
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002468:	4b32      	ldr	r3, [pc, #200]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246e:	0f1b      	lsrs	r3, r3, #28
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	019a      	lsls	r2, r3, #6
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	041b      	lsls	r3, r3, #16
 8002482:	431a      	orrs	r2, r3
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	061b      	lsls	r3, r3, #24
 8002488:	431a      	orrs	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	071b      	lsls	r3, r3, #28
 800248e:	4929      	ldr	r1, [pc, #164]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d028      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024a2:	4b24      	ldr	r3, [pc, #144]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a8:	0e1b      	lsrs	r3, r3, #24
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024b0:	4b20      	ldr	r3, [pc, #128]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b6:	0c1b      	lsrs	r3, r3, #16
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	019a      	lsls	r2, r3, #6
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	041b      	lsls	r3, r3, #16
 80024c8:	431a      	orrs	r2, r3
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	061b      	lsls	r3, r3, #24
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	071b      	lsls	r3, r3, #28
 80024d6:	4917      	ldr	r1, [pc, #92]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80024de:	4b15      	ldr	r3, [pc, #84]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	4911      	ldr	r1, [pc, #68]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80024f4:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a0e      	ldr	r2, [pc, #56]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002500:	f7fe fc6a 	bl	8000dd8 <HAL_GetTick>
 8002504:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002506:	e008      	b.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002508:	f7fe fc66 	bl	8000dd8 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	; 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e007      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002522:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002526:	d1ef      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3720      	adds	r7, #32
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40023800 	.word	0x40023800

08002538 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e049      	b.n	80025de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f841 	bl	80025e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3304      	adds	r3, #4
 8002574:	4619      	mov	r1, r3
 8002576:	4610      	mov	r0, r2
 8002578:	f000 fa00 	bl	800297c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b01      	cmp	r3, #1
 800260e:	d001      	beq.n	8002614 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e054      	b.n	80026be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0201 	orr.w	r2, r2, #1
 800262a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a26      	ldr	r2, [pc, #152]	; (80026cc <HAL_TIM_Base_Start_IT+0xd0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d022      	beq.n	800267c <HAL_TIM_Base_Start_IT+0x80>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800263e:	d01d      	beq.n	800267c <HAL_TIM_Base_Start_IT+0x80>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a22      	ldr	r2, [pc, #136]	; (80026d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d018      	beq.n	800267c <HAL_TIM_Base_Start_IT+0x80>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a21      	ldr	r2, [pc, #132]	; (80026d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d013      	beq.n	800267c <HAL_TIM_Base_Start_IT+0x80>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a1f      	ldr	r2, [pc, #124]	; (80026d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00e      	beq.n	800267c <HAL_TIM_Base_Start_IT+0x80>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a1e      	ldr	r2, [pc, #120]	; (80026dc <HAL_TIM_Base_Start_IT+0xe0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d009      	beq.n	800267c <HAL_TIM_Base_Start_IT+0x80>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a1c      	ldr	r2, [pc, #112]	; (80026e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d004      	beq.n	800267c <HAL_TIM_Base_Start_IT+0x80>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a1b      	ldr	r2, [pc, #108]	; (80026e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d115      	bne.n	80026a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <HAL_TIM_Base_Start_IT+0xec>)
 8002684:	4013      	ands	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2b06      	cmp	r3, #6
 800268c:	d015      	beq.n	80026ba <HAL_TIM_Base_Start_IT+0xbe>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002694:	d011      	beq.n	80026ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f042 0201 	orr.w	r2, r2, #1
 80026a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a6:	e008      	b.n	80026ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0201 	orr.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	e000      	b.n	80026bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40010000 	.word	0x40010000
 80026d0:	40000400 	.word	0x40000400
 80026d4:	40000800 	.word	0x40000800
 80026d8:	40000c00 	.word	0x40000c00
 80026dc:	40010400 	.word	0x40010400
 80026e0:	40014000 	.word	0x40014000
 80026e4:	40001800 	.word	0x40001800
 80026e8:	00010007 	.word	0x00010007

080026ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d122      	bne.n	8002748 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b02      	cmp	r3, #2
 800270e:	d11b      	bne.n	8002748 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0202 	mvn.w	r2, #2
 8002718:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f905 	bl	800293e <HAL_TIM_IC_CaptureCallback>
 8002734:	e005      	b.n	8002742 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f8f7 	bl	800292a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f908 	bl	8002952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b04      	cmp	r3, #4
 8002754:	d122      	bne.n	800279c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b04      	cmp	r3, #4
 8002762:	d11b      	bne.n	800279c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f06f 0204 	mvn.w	r2, #4
 800276c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2202      	movs	r2, #2
 8002772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f8db 	bl	800293e <HAL_TIM_IC_CaptureCallback>
 8002788:	e005      	b.n	8002796 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f8cd 	bl	800292a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f8de 	bl	8002952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d122      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d11b      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f06f 0208 	mvn.w	r2, #8
 80027c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2204      	movs	r2, #4
 80027c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f8b1 	bl	800293e <HAL_TIM_IC_CaptureCallback>
 80027dc:	e005      	b.n	80027ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f8a3 	bl	800292a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f8b4 	bl	8002952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	2b10      	cmp	r3, #16
 80027fc:	d122      	bne.n	8002844 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b10      	cmp	r3, #16
 800280a:	d11b      	bne.n	8002844 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0210 	mvn.w	r2, #16
 8002814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2208      	movs	r2, #8
 800281a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f887 	bl	800293e <HAL_TIM_IC_CaptureCallback>
 8002830:	e005      	b.n	800283e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f879 	bl	800292a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f88a 	bl	8002952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b01      	cmp	r3, #1
 8002850:	d10e      	bne.n	8002870 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b01      	cmp	r3, #1
 800285e:	d107      	bne.n	8002870 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 0201 	mvn.w	r2, #1
 8002868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fe f828 	bl	80008c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287a:	2b80      	cmp	r3, #128	; 0x80
 800287c:	d10e      	bne.n	800289c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002888:	2b80      	cmp	r3, #128	; 0x80
 800288a:	d107      	bne.n	800289c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f91a 	bl	8002ad0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028aa:	d10e      	bne.n	80028ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b6:	2b80      	cmp	r3, #128	; 0x80
 80028b8:	d107      	bne.n	80028ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80028c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f90d 	bl	8002ae4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d4:	2b40      	cmp	r3, #64	; 0x40
 80028d6:	d10e      	bne.n	80028f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e2:	2b40      	cmp	r3, #64	; 0x40
 80028e4:	d107      	bne.n	80028f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f838 	bl	8002966 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	2b20      	cmp	r3, #32
 8002902:	d10e      	bne.n	8002922 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f003 0320 	and.w	r3, r3, #32
 800290e:	2b20      	cmp	r3, #32
 8002910:	d107      	bne.n	8002922 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f06f 0220 	mvn.w	r2, #32
 800291a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f8cd 	bl	8002abc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a40      	ldr	r2, [pc, #256]	; (8002a90 <TIM_Base_SetConfig+0x114>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d013      	beq.n	80029bc <TIM_Base_SetConfig+0x40>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299a:	d00f      	beq.n	80029bc <TIM_Base_SetConfig+0x40>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a3d      	ldr	r2, [pc, #244]	; (8002a94 <TIM_Base_SetConfig+0x118>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d00b      	beq.n	80029bc <TIM_Base_SetConfig+0x40>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a3c      	ldr	r2, [pc, #240]	; (8002a98 <TIM_Base_SetConfig+0x11c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d007      	beq.n	80029bc <TIM_Base_SetConfig+0x40>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a3b      	ldr	r2, [pc, #236]	; (8002a9c <TIM_Base_SetConfig+0x120>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d003      	beq.n	80029bc <TIM_Base_SetConfig+0x40>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a3a      	ldr	r2, [pc, #232]	; (8002aa0 <TIM_Base_SetConfig+0x124>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d108      	bne.n	80029ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a2f      	ldr	r2, [pc, #188]	; (8002a90 <TIM_Base_SetConfig+0x114>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d02b      	beq.n	8002a2e <TIM_Base_SetConfig+0xb2>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029dc:	d027      	beq.n	8002a2e <TIM_Base_SetConfig+0xb2>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a2c      	ldr	r2, [pc, #176]	; (8002a94 <TIM_Base_SetConfig+0x118>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d023      	beq.n	8002a2e <TIM_Base_SetConfig+0xb2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a2b      	ldr	r2, [pc, #172]	; (8002a98 <TIM_Base_SetConfig+0x11c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d01f      	beq.n	8002a2e <TIM_Base_SetConfig+0xb2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a2a      	ldr	r2, [pc, #168]	; (8002a9c <TIM_Base_SetConfig+0x120>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d01b      	beq.n	8002a2e <TIM_Base_SetConfig+0xb2>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a29      	ldr	r2, [pc, #164]	; (8002aa0 <TIM_Base_SetConfig+0x124>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d017      	beq.n	8002a2e <TIM_Base_SetConfig+0xb2>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a28      	ldr	r2, [pc, #160]	; (8002aa4 <TIM_Base_SetConfig+0x128>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d013      	beq.n	8002a2e <TIM_Base_SetConfig+0xb2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a27      	ldr	r2, [pc, #156]	; (8002aa8 <TIM_Base_SetConfig+0x12c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00f      	beq.n	8002a2e <TIM_Base_SetConfig+0xb2>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a26      	ldr	r2, [pc, #152]	; (8002aac <TIM_Base_SetConfig+0x130>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00b      	beq.n	8002a2e <TIM_Base_SetConfig+0xb2>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a25      	ldr	r2, [pc, #148]	; (8002ab0 <TIM_Base_SetConfig+0x134>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d007      	beq.n	8002a2e <TIM_Base_SetConfig+0xb2>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a24      	ldr	r2, [pc, #144]	; (8002ab4 <TIM_Base_SetConfig+0x138>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d003      	beq.n	8002a2e <TIM_Base_SetConfig+0xb2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a23      	ldr	r2, [pc, #140]	; (8002ab8 <TIM_Base_SetConfig+0x13c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d108      	bne.n	8002a40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a0a      	ldr	r2, [pc, #40]	; (8002a90 <TIM_Base_SetConfig+0x114>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d003      	beq.n	8002a74 <TIM_Base_SetConfig+0xf8>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a0c      	ldr	r2, [pc, #48]	; (8002aa0 <TIM_Base_SetConfig+0x124>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d103      	bne.n	8002a7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	615a      	str	r2, [r3, #20]
}
 8002a82:	bf00      	nop
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40010000 	.word	0x40010000
 8002a94:	40000400 	.word	0x40000400
 8002a98:	40000800 	.word	0x40000800
 8002a9c:	40000c00 	.word	0x40000c00
 8002aa0:	40010400 	.word	0x40010400
 8002aa4:	40014000 	.word	0x40014000
 8002aa8:	40014400 	.word	0x40014400
 8002aac:	40014800 	.word	0x40014800
 8002ab0:	40001800 	.word	0x40001800
 8002ab4:	40001c00 	.word	0x40001c00
 8002ab8:	40002000 	.word	0x40002000

08002abc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e040      	b.n	8002b8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7fe f890 	bl	8000c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2224      	movs	r2, #36	; 0x24
 8002b24:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0201 	bic.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f8b0 	bl	8002c9c <UART_SetConfig>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e022      	b.n	8002b8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fb08 	bl	8003164 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0201 	orr.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fb8f 	bl	80032a8 <UART_CheckIdleState>
 8002b8a:	4603      	mov	r3, r0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08a      	sub	sp, #40	; 0x28
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	603b      	str	r3, [r7, #0]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ba8:	2b20      	cmp	r3, #32
 8002baa:	d171      	bne.n	8002c90 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <HAL_UART_Transmit+0x24>
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e06a      	b.n	8002c92 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2221      	movs	r2, #33	; 0x21
 8002bc8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bca:	f7fe f905 	bl	8000dd8 <HAL_GetTick>
 8002bce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	88fa      	ldrh	r2, [r7, #6]
 8002bd4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	88fa      	ldrh	r2, [r7, #6]
 8002bdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be8:	d108      	bne.n	8002bfc <HAL_UART_Transmit+0x68>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d104      	bne.n	8002bfc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	61bb      	str	r3, [r7, #24]
 8002bfa:	e003      	b.n	8002c04 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c04:	e02c      	b.n	8002c60 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2180      	movs	r1, #128	; 0x80
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 fb80 	bl	8003316 <UART_WaitOnFlagUntilTimeout>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e038      	b.n	8002c92 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10b      	bne.n	8002c3e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	3302      	adds	r3, #2
 8002c3a:	61bb      	str	r3, [r7, #24]
 8002c3c:	e007      	b.n	8002c4e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	781a      	ldrb	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1cc      	bne.n	8002c06 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	2200      	movs	r2, #0
 8002c74:	2140      	movs	r1, #64	; 0x40
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 fb4d 	bl	8003316 <UART_WaitOnFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e005      	b.n	8002c92 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	e000      	b.n	8002c92 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002c90:	2302      	movs	r3, #2
  }
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3720      	adds	r7, #32
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	4ba6      	ldr	r3, [pc, #664]	; (8002f60 <UART_SetConfig+0x2c4>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	6979      	ldr	r1, [r7, #20]
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a94      	ldr	r2, [pc, #592]	; (8002f64 <UART_SetConfig+0x2c8>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d120      	bne.n	8002d5a <UART_SetConfig+0xbe>
 8002d18:	4b93      	ldr	r3, [pc, #588]	; (8002f68 <UART_SetConfig+0x2cc>)
 8002d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	d816      	bhi.n	8002d54 <UART_SetConfig+0xb8>
 8002d26:	a201      	add	r2, pc, #4	; (adr r2, 8002d2c <UART_SetConfig+0x90>)
 8002d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2c:	08002d3d 	.word	0x08002d3d
 8002d30:	08002d49 	.word	0x08002d49
 8002d34:	08002d43 	.word	0x08002d43
 8002d38:	08002d4f 	.word	0x08002d4f
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	77fb      	strb	r3, [r7, #31]
 8002d40:	e150      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002d42:	2302      	movs	r3, #2
 8002d44:	77fb      	strb	r3, [r7, #31]
 8002d46:	e14d      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002d48:	2304      	movs	r3, #4
 8002d4a:	77fb      	strb	r3, [r7, #31]
 8002d4c:	e14a      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002d4e:	2308      	movs	r3, #8
 8002d50:	77fb      	strb	r3, [r7, #31]
 8002d52:	e147      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002d54:	2310      	movs	r3, #16
 8002d56:	77fb      	strb	r3, [r7, #31]
 8002d58:	e144      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a83      	ldr	r2, [pc, #524]	; (8002f6c <UART_SetConfig+0x2d0>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d132      	bne.n	8002dca <UART_SetConfig+0x12e>
 8002d64:	4b80      	ldr	r3, [pc, #512]	; (8002f68 <UART_SetConfig+0x2cc>)
 8002d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	2b0c      	cmp	r3, #12
 8002d70:	d828      	bhi.n	8002dc4 <UART_SetConfig+0x128>
 8002d72:	a201      	add	r2, pc, #4	; (adr r2, 8002d78 <UART_SetConfig+0xdc>)
 8002d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d78:	08002dad 	.word	0x08002dad
 8002d7c:	08002dc5 	.word	0x08002dc5
 8002d80:	08002dc5 	.word	0x08002dc5
 8002d84:	08002dc5 	.word	0x08002dc5
 8002d88:	08002db9 	.word	0x08002db9
 8002d8c:	08002dc5 	.word	0x08002dc5
 8002d90:	08002dc5 	.word	0x08002dc5
 8002d94:	08002dc5 	.word	0x08002dc5
 8002d98:	08002db3 	.word	0x08002db3
 8002d9c:	08002dc5 	.word	0x08002dc5
 8002da0:	08002dc5 	.word	0x08002dc5
 8002da4:	08002dc5 	.word	0x08002dc5
 8002da8:	08002dbf 	.word	0x08002dbf
 8002dac:	2300      	movs	r3, #0
 8002dae:	77fb      	strb	r3, [r7, #31]
 8002db0:	e118      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002db2:	2302      	movs	r3, #2
 8002db4:	77fb      	strb	r3, [r7, #31]
 8002db6:	e115      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002db8:	2304      	movs	r3, #4
 8002dba:	77fb      	strb	r3, [r7, #31]
 8002dbc:	e112      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002dbe:	2308      	movs	r3, #8
 8002dc0:	77fb      	strb	r3, [r7, #31]
 8002dc2:	e10f      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002dc4:	2310      	movs	r3, #16
 8002dc6:	77fb      	strb	r3, [r7, #31]
 8002dc8:	e10c      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a68      	ldr	r2, [pc, #416]	; (8002f70 <UART_SetConfig+0x2d4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d120      	bne.n	8002e16 <UART_SetConfig+0x17a>
 8002dd4:	4b64      	ldr	r3, [pc, #400]	; (8002f68 <UART_SetConfig+0x2cc>)
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dda:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002dde:	2b30      	cmp	r3, #48	; 0x30
 8002de0:	d013      	beq.n	8002e0a <UART_SetConfig+0x16e>
 8002de2:	2b30      	cmp	r3, #48	; 0x30
 8002de4:	d814      	bhi.n	8002e10 <UART_SetConfig+0x174>
 8002de6:	2b20      	cmp	r3, #32
 8002de8:	d009      	beq.n	8002dfe <UART_SetConfig+0x162>
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	d810      	bhi.n	8002e10 <UART_SetConfig+0x174>
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <UART_SetConfig+0x15c>
 8002df2:	2b10      	cmp	r3, #16
 8002df4:	d006      	beq.n	8002e04 <UART_SetConfig+0x168>
 8002df6:	e00b      	b.n	8002e10 <UART_SetConfig+0x174>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	77fb      	strb	r3, [r7, #31]
 8002dfc:	e0f2      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	77fb      	strb	r3, [r7, #31]
 8002e02:	e0ef      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002e04:	2304      	movs	r3, #4
 8002e06:	77fb      	strb	r3, [r7, #31]
 8002e08:	e0ec      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002e0a:	2308      	movs	r3, #8
 8002e0c:	77fb      	strb	r3, [r7, #31]
 8002e0e:	e0e9      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002e10:	2310      	movs	r3, #16
 8002e12:	77fb      	strb	r3, [r7, #31]
 8002e14:	e0e6      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a56      	ldr	r2, [pc, #344]	; (8002f74 <UART_SetConfig+0x2d8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d120      	bne.n	8002e62 <UART_SetConfig+0x1c6>
 8002e20:	4b51      	ldr	r3, [pc, #324]	; (8002f68 <UART_SetConfig+0x2cc>)
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e2a:	2bc0      	cmp	r3, #192	; 0xc0
 8002e2c:	d013      	beq.n	8002e56 <UART_SetConfig+0x1ba>
 8002e2e:	2bc0      	cmp	r3, #192	; 0xc0
 8002e30:	d814      	bhi.n	8002e5c <UART_SetConfig+0x1c0>
 8002e32:	2b80      	cmp	r3, #128	; 0x80
 8002e34:	d009      	beq.n	8002e4a <UART_SetConfig+0x1ae>
 8002e36:	2b80      	cmp	r3, #128	; 0x80
 8002e38:	d810      	bhi.n	8002e5c <UART_SetConfig+0x1c0>
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <UART_SetConfig+0x1a8>
 8002e3e:	2b40      	cmp	r3, #64	; 0x40
 8002e40:	d006      	beq.n	8002e50 <UART_SetConfig+0x1b4>
 8002e42:	e00b      	b.n	8002e5c <UART_SetConfig+0x1c0>
 8002e44:	2300      	movs	r3, #0
 8002e46:	77fb      	strb	r3, [r7, #31]
 8002e48:	e0cc      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	77fb      	strb	r3, [r7, #31]
 8002e4e:	e0c9      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002e50:	2304      	movs	r3, #4
 8002e52:	77fb      	strb	r3, [r7, #31]
 8002e54:	e0c6      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002e56:	2308      	movs	r3, #8
 8002e58:	77fb      	strb	r3, [r7, #31]
 8002e5a:	e0c3      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002e5c:	2310      	movs	r3, #16
 8002e5e:	77fb      	strb	r3, [r7, #31]
 8002e60:	e0c0      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a44      	ldr	r2, [pc, #272]	; (8002f78 <UART_SetConfig+0x2dc>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d125      	bne.n	8002eb8 <UART_SetConfig+0x21c>
 8002e6c:	4b3e      	ldr	r3, [pc, #248]	; (8002f68 <UART_SetConfig+0x2cc>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e7a:	d017      	beq.n	8002eac <UART_SetConfig+0x210>
 8002e7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e80:	d817      	bhi.n	8002eb2 <UART_SetConfig+0x216>
 8002e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e86:	d00b      	beq.n	8002ea0 <UART_SetConfig+0x204>
 8002e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e8c:	d811      	bhi.n	8002eb2 <UART_SetConfig+0x216>
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <UART_SetConfig+0x1fe>
 8002e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e96:	d006      	beq.n	8002ea6 <UART_SetConfig+0x20a>
 8002e98:	e00b      	b.n	8002eb2 <UART_SetConfig+0x216>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	77fb      	strb	r3, [r7, #31]
 8002e9e:	e0a1      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	77fb      	strb	r3, [r7, #31]
 8002ea4:	e09e      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002ea6:	2304      	movs	r3, #4
 8002ea8:	77fb      	strb	r3, [r7, #31]
 8002eaa:	e09b      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002eac:	2308      	movs	r3, #8
 8002eae:	77fb      	strb	r3, [r7, #31]
 8002eb0:	e098      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002eb2:	2310      	movs	r3, #16
 8002eb4:	77fb      	strb	r3, [r7, #31]
 8002eb6:	e095      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a2f      	ldr	r2, [pc, #188]	; (8002f7c <UART_SetConfig+0x2e0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d125      	bne.n	8002f0e <UART_SetConfig+0x272>
 8002ec2:	4b29      	ldr	r3, [pc, #164]	; (8002f68 <UART_SetConfig+0x2cc>)
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ecc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ed0:	d017      	beq.n	8002f02 <UART_SetConfig+0x266>
 8002ed2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ed6:	d817      	bhi.n	8002f08 <UART_SetConfig+0x26c>
 8002ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002edc:	d00b      	beq.n	8002ef6 <UART_SetConfig+0x25a>
 8002ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ee2:	d811      	bhi.n	8002f08 <UART_SetConfig+0x26c>
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <UART_SetConfig+0x254>
 8002ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eec:	d006      	beq.n	8002efc <UART_SetConfig+0x260>
 8002eee:	e00b      	b.n	8002f08 <UART_SetConfig+0x26c>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	77fb      	strb	r3, [r7, #31]
 8002ef4:	e076      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	77fb      	strb	r3, [r7, #31]
 8002efa:	e073      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002efc:	2304      	movs	r3, #4
 8002efe:	77fb      	strb	r3, [r7, #31]
 8002f00:	e070      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002f02:	2308      	movs	r3, #8
 8002f04:	77fb      	strb	r3, [r7, #31]
 8002f06:	e06d      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002f08:	2310      	movs	r3, #16
 8002f0a:	77fb      	strb	r3, [r7, #31]
 8002f0c:	e06a      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a1b      	ldr	r2, [pc, #108]	; (8002f80 <UART_SetConfig+0x2e4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d138      	bne.n	8002f8a <UART_SetConfig+0x2ee>
 8002f18:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <UART_SetConfig+0x2cc>)
 8002f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002f22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f26:	d017      	beq.n	8002f58 <UART_SetConfig+0x2bc>
 8002f28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f2c:	d82a      	bhi.n	8002f84 <UART_SetConfig+0x2e8>
 8002f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f32:	d00b      	beq.n	8002f4c <UART_SetConfig+0x2b0>
 8002f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f38:	d824      	bhi.n	8002f84 <UART_SetConfig+0x2e8>
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <UART_SetConfig+0x2aa>
 8002f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f42:	d006      	beq.n	8002f52 <UART_SetConfig+0x2b6>
 8002f44:	e01e      	b.n	8002f84 <UART_SetConfig+0x2e8>
 8002f46:	2300      	movs	r3, #0
 8002f48:	77fb      	strb	r3, [r7, #31]
 8002f4a:	e04b      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	77fb      	strb	r3, [r7, #31]
 8002f50:	e048      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002f52:	2304      	movs	r3, #4
 8002f54:	77fb      	strb	r3, [r7, #31]
 8002f56:	e045      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002f58:	2308      	movs	r3, #8
 8002f5a:	77fb      	strb	r3, [r7, #31]
 8002f5c:	e042      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002f5e:	bf00      	nop
 8002f60:	efff69f3 	.word	0xefff69f3
 8002f64:	40011000 	.word	0x40011000
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40004400 	.word	0x40004400
 8002f70:	40004800 	.word	0x40004800
 8002f74:	40004c00 	.word	0x40004c00
 8002f78:	40005000 	.word	0x40005000
 8002f7c:	40011400 	.word	0x40011400
 8002f80:	40007800 	.word	0x40007800
 8002f84:	2310      	movs	r3, #16
 8002f86:	77fb      	strb	r3, [r7, #31]
 8002f88:	e02c      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a72      	ldr	r2, [pc, #456]	; (8003158 <UART_SetConfig+0x4bc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d125      	bne.n	8002fe0 <UART_SetConfig+0x344>
 8002f94:	4b71      	ldr	r3, [pc, #452]	; (800315c <UART_SetConfig+0x4c0>)
 8002f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f9e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002fa2:	d017      	beq.n	8002fd4 <UART_SetConfig+0x338>
 8002fa4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002fa8:	d817      	bhi.n	8002fda <UART_SetConfig+0x33e>
 8002faa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fae:	d00b      	beq.n	8002fc8 <UART_SetConfig+0x32c>
 8002fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb4:	d811      	bhi.n	8002fda <UART_SetConfig+0x33e>
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <UART_SetConfig+0x326>
 8002fba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fbe:	d006      	beq.n	8002fce <UART_SetConfig+0x332>
 8002fc0:	e00b      	b.n	8002fda <UART_SetConfig+0x33e>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	77fb      	strb	r3, [r7, #31]
 8002fc6:	e00d      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	77fb      	strb	r3, [r7, #31]
 8002fcc:	e00a      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002fce:	2304      	movs	r3, #4
 8002fd0:	77fb      	strb	r3, [r7, #31]
 8002fd2:	e007      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002fd4:	2308      	movs	r3, #8
 8002fd6:	77fb      	strb	r3, [r7, #31]
 8002fd8:	e004      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002fda:	2310      	movs	r3, #16
 8002fdc:	77fb      	strb	r3, [r7, #31]
 8002fde:	e001      	b.n	8002fe4 <UART_SetConfig+0x348>
 8002fe0:	2310      	movs	r3, #16
 8002fe2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fec:	d15b      	bne.n	80030a6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002fee:	7ffb      	ldrb	r3, [r7, #31]
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d828      	bhi.n	8003046 <UART_SetConfig+0x3aa>
 8002ff4:	a201      	add	r2, pc, #4	; (adr r2, 8002ffc <UART_SetConfig+0x360>)
 8002ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffa:	bf00      	nop
 8002ffc:	08003021 	.word	0x08003021
 8003000:	08003029 	.word	0x08003029
 8003004:	08003031 	.word	0x08003031
 8003008:	08003047 	.word	0x08003047
 800300c:	08003037 	.word	0x08003037
 8003010:	08003047 	.word	0x08003047
 8003014:	08003047 	.word	0x08003047
 8003018:	08003047 	.word	0x08003047
 800301c:	0800303f 	.word	0x0800303f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003020:	f7fe fe40 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8003024:	61b8      	str	r0, [r7, #24]
        break;
 8003026:	e013      	b.n	8003050 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003028:	f7fe fe50 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 800302c:	61b8      	str	r0, [r7, #24]
        break;
 800302e:	e00f      	b.n	8003050 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003030:	4b4b      	ldr	r3, [pc, #300]	; (8003160 <UART_SetConfig+0x4c4>)
 8003032:	61bb      	str	r3, [r7, #24]
        break;
 8003034:	e00c      	b.n	8003050 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003036:	f7fe fd63 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 800303a:	61b8      	str	r0, [r7, #24]
        break;
 800303c:	e008      	b.n	8003050 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800303e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003042:	61bb      	str	r3, [r7, #24]
        break;
 8003044:	e004      	b.n	8003050 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	77bb      	strb	r3, [r7, #30]
        break;
 800304e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d074      	beq.n	8003140 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	005a      	lsls	r2, r3, #1
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	085b      	lsrs	r3, r3, #1
 8003060:	441a      	add	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	fbb2 f3f3 	udiv	r3, r2, r3
 800306a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	2b0f      	cmp	r3, #15
 8003070:	d916      	bls.n	80030a0 <UART_SetConfig+0x404>
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003078:	d212      	bcs.n	80030a0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	b29b      	uxth	r3, r3
 800307e:	f023 030f 	bic.w	r3, r3, #15
 8003082:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	085b      	lsrs	r3, r3, #1
 8003088:	b29b      	uxth	r3, r3
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	b29a      	uxth	r2, r3
 8003090:	89fb      	ldrh	r3, [r7, #14]
 8003092:	4313      	orrs	r3, r2
 8003094:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	89fa      	ldrh	r2, [r7, #14]
 800309c:	60da      	str	r2, [r3, #12]
 800309e:	e04f      	b.n	8003140 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	77bb      	strb	r3, [r7, #30]
 80030a4:	e04c      	b.n	8003140 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030a6:	7ffb      	ldrb	r3, [r7, #31]
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d828      	bhi.n	80030fe <UART_SetConfig+0x462>
 80030ac:	a201      	add	r2, pc, #4	; (adr r2, 80030b4 <UART_SetConfig+0x418>)
 80030ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b2:	bf00      	nop
 80030b4:	080030d9 	.word	0x080030d9
 80030b8:	080030e1 	.word	0x080030e1
 80030bc:	080030e9 	.word	0x080030e9
 80030c0:	080030ff 	.word	0x080030ff
 80030c4:	080030ef 	.word	0x080030ef
 80030c8:	080030ff 	.word	0x080030ff
 80030cc:	080030ff 	.word	0x080030ff
 80030d0:	080030ff 	.word	0x080030ff
 80030d4:	080030f7 	.word	0x080030f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030d8:	f7fe fde4 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 80030dc:	61b8      	str	r0, [r7, #24]
        break;
 80030de:	e013      	b.n	8003108 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030e0:	f7fe fdf4 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 80030e4:	61b8      	str	r0, [r7, #24]
        break;
 80030e6:	e00f      	b.n	8003108 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030e8:	4b1d      	ldr	r3, [pc, #116]	; (8003160 <UART_SetConfig+0x4c4>)
 80030ea:	61bb      	str	r3, [r7, #24]
        break;
 80030ec:	e00c      	b.n	8003108 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ee:	f7fe fd07 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 80030f2:	61b8      	str	r0, [r7, #24]
        break;
 80030f4:	e008      	b.n	8003108 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030fa:	61bb      	str	r3, [r7, #24]
        break;
 80030fc:	e004      	b.n	8003108 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	77bb      	strb	r3, [r7, #30]
        break;
 8003106:	bf00      	nop
    }

    if (pclk != 0U)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d018      	beq.n	8003140 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	085a      	lsrs	r2, r3, #1
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	441a      	add	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003120:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	2b0f      	cmp	r3, #15
 8003126:	d909      	bls.n	800313c <UART_SetConfig+0x4a0>
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312e:	d205      	bcs.n	800313c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	b29a      	uxth	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	60da      	str	r2, [r3, #12]
 800313a:	e001      	b.n	8003140 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800314c:	7fbb      	ldrb	r3, [r7, #30]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3720      	adds	r7, #32
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40007c00 	.word	0x40007c00
 800315c:	40023800 	.word	0x40023800
 8003160:	00f42400 	.word	0x00f42400

08003164 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00a      	beq.n	800318e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00a      	beq.n	80031b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00a      	beq.n	80031d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	f003 0310 	and.w	r3, r3, #16
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00a      	beq.n	8003216 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	f003 0320 	and.w	r3, r3, #32
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003240:	2b00      	cmp	r3, #0
 8003242:	d01a      	beq.n	800327a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003262:	d10a      	bne.n	800327a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	605a      	str	r2, [r3, #4]
  }
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032b8:	f7fd fd8e 	bl	8000dd8 <HAL_GetTick>
 80032bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d10e      	bne.n	80032ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f81b 	bl	8003316 <UART_WaitOnFlagUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e011      	b.n	800330e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2220      	movs	r2, #32
 80032ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b09c      	sub	sp, #112	; 0x70
 800331a:	af00      	add	r7, sp, #0
 800331c:	60f8      	str	r0, [r7, #12]
 800331e:	60b9      	str	r1, [r7, #8]
 8003320:	603b      	str	r3, [r7, #0]
 8003322:	4613      	mov	r3, r2
 8003324:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003326:	e0a7      	b.n	8003478 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003328:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800332a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800332e:	f000 80a3 	beq.w	8003478 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003332:	f7fd fd51 	bl	8000dd8 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800333e:	429a      	cmp	r2, r3
 8003340:	d302      	bcc.n	8003348 <UART_WaitOnFlagUntilTimeout+0x32>
 8003342:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003344:	2b00      	cmp	r3, #0
 8003346:	d13f      	bne.n	80033c8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003350:	e853 3f00 	ldrex	r3, [r3]
 8003354:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003358:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800335c:	667b      	str	r3, [r7, #100]	; 0x64
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003366:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003368:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800336c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800336e:	e841 2300 	strex	r3, r2, [r1]
 8003372:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1e6      	bne.n	8003348 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	3308      	adds	r3, #8
 8003380:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003384:	e853 3f00 	ldrex	r3, [r3]
 8003388:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800338a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338c:	f023 0301 	bic.w	r3, r3, #1
 8003390:	663b      	str	r3, [r7, #96]	; 0x60
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3308      	adds	r3, #8
 8003398:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800339a:	64ba      	str	r2, [r7, #72]	; 0x48
 800339c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80033a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033a2:	e841 2300 	strex	r3, r2, [r1]
 80033a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80033a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1e5      	bne.n	800337a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2220      	movs	r2, #32
 80033b2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e068      	b.n	800349a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d050      	beq.n	8003478 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033e4:	d148      	bne.n	8003478 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f8:	e853 3f00 	ldrex	r3, [r3]
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003404:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	461a      	mov	r2, r3
 800340c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340e:	637b      	str	r3, [r7, #52]	; 0x34
 8003410:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003412:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003416:	e841 2300 	strex	r3, r2, [r1]
 800341a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800341c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1e6      	bne.n	80033f0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	3308      	adds	r3, #8
 8003428:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	e853 3f00 	ldrex	r3, [r3]
 8003430:	613b      	str	r3, [r7, #16]
   return(result);
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f023 0301 	bic.w	r3, r3, #1
 8003438:	66bb      	str	r3, [r7, #104]	; 0x68
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	3308      	adds	r3, #8
 8003440:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003442:	623a      	str	r2, [r7, #32]
 8003444:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003446:	69f9      	ldr	r1, [r7, #28]
 8003448:	6a3a      	ldr	r2, [r7, #32]
 800344a:	e841 2300 	strex	r3, r2, [r1]
 800344e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1e5      	bne.n	8003422 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2220      	movs	r2, #32
 800345a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2220      	movs	r2, #32
 8003460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2220      	movs	r2, #32
 8003468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e010      	b.n	800349a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	69da      	ldr	r2, [r3, #28]
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	4013      	ands	r3, r2
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	429a      	cmp	r2, r3
 8003486:	bf0c      	ite	eq
 8003488:	2301      	moveq	r3, #1
 800348a:	2300      	movne	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	461a      	mov	r2, r3
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	429a      	cmp	r2, r3
 8003494:	f43f af48 	beq.w	8003328 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3770      	adds	r7, #112	; 0x70
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b085      	sub	sp, #20
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	4603      	mov	r3, r0
 80034aa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80034b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034b4:	2b84      	cmp	r3, #132	; 0x84
 80034b6:	d005      	beq.n	80034c4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80034b8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4413      	add	r3, r2
 80034c0:	3303      	adds	r3, #3
 80034c2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80034c4:	68fb      	ldr	r3, [r7, #12]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80034d6:	f000 fed1 	bl	800427c <vTaskStartScheduler>
  
  return osOK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	bd80      	pop	{r7, pc}

080034e0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80034e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034e2:	b089      	sub	sp, #36	; 0x24
 80034e4:	af04      	add	r7, sp, #16
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d020      	beq.n	8003534 <osThreadCreate+0x54>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d01c      	beq.n	8003534 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685c      	ldr	r4, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681d      	ldr	r5, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691e      	ldr	r6, [r3, #16]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff ffc8 	bl	80034a2 <makeFreeRtosPriority>
 8003512:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800351c:	9202      	str	r2, [sp, #8]
 800351e:	9301      	str	r3, [sp, #4]
 8003520:	9100      	str	r1, [sp, #0]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	4632      	mov	r2, r6
 8003526:	4629      	mov	r1, r5
 8003528:	4620      	mov	r0, r4
 800352a:	f000 fcd5 	bl	8003ed8 <xTaskCreateStatic>
 800352e:	4603      	mov	r3, r0
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	e01c      	b.n	800356e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685c      	ldr	r4, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003540:	b29e      	uxth	r6, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff ffaa 	bl	80034a2 <makeFreeRtosPriority>
 800354e:	4602      	mov	r2, r0
 8003550:	f107 030c 	add.w	r3, r7, #12
 8003554:	9301      	str	r3, [sp, #4]
 8003556:	9200      	str	r2, [sp, #0]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	4632      	mov	r2, r6
 800355c:	4629      	mov	r1, r5
 800355e:	4620      	mov	r0, r4
 8003560:	f000 fd1d 	bl	8003f9e <xTaskCreate>
 8003564:	4603      	mov	r3, r0
 8003566:	2b01      	cmp	r3, #1
 8003568:	d001      	beq.n	800356e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800356a:	2300      	movs	r3, #0
 800356c:	e000      	b.n	8003570 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800356e:	68fb      	ldr	r3, [r7, #12]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003578 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <osDelay+0x16>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	e000      	b.n	8003590 <osDelay+0x18>
 800358e:	2301      	movs	r3, #1
 8003590:	4618      	mov	r0, r3
 8003592:	f000 fe3d 	bl	8004210 <vTaskDelay>
  
  return osOK;
 8003596:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f103 0208 	add.w	r2, r3, #8
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f103 0208 	add.w	r2, r3, #8
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f103 0208 	add.w	r2, r3, #8
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035fa:	b480      	push	{r7}
 80035fc:	b085      	sub	sp, #20
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	601a      	str	r2, [r3, #0]
}
 8003636:	bf00      	nop
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003642:	b480      	push	{r7}
 8003644:	b085      	sub	sp, #20
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003658:	d103      	bne.n	8003662 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	e00c      	b.n	800367c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3308      	adds	r3, #8
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	e002      	b.n	8003670 <vListInsert+0x2e>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	429a      	cmp	r2, r3
 800367a:	d2f6      	bcs.n	800366a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	601a      	str	r2, [r3, #0]
}
 80036a8:	bf00      	nop
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6892      	ldr	r2, [r2, #8]
 80036ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6852      	ldr	r2, [r2, #4]
 80036d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d103      	bne.n	80036e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	1e5a      	subs	r2, r3, #1
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10c      	bne.n	8003736 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800371c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003720:	b672      	cpsid	i
 8003722:	f383 8811 	msr	BASEPRI, r3
 8003726:	f3bf 8f6f 	isb	sy
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	b662      	cpsie	i
 8003730:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003732:	bf00      	nop
 8003734:	e7fe      	b.n	8003734 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8003736:	f001 fd01 	bl	800513c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003742:	68f9      	ldr	r1, [r7, #12]
 8003744:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003746:	fb01 f303 	mul.w	r3, r1, r3
 800374a:	441a      	add	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003766:	3b01      	subs	r3, #1
 8003768:	68f9      	ldr	r1, [r7, #12]
 800376a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	441a      	add	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	22ff      	movs	r2, #255	; 0xff
 800377a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	22ff      	movs	r2, #255	; 0xff
 8003782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d114      	bne.n	80037b6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d01a      	beq.n	80037ca <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	3310      	adds	r3, #16
 8003798:	4618      	mov	r0, r3
 800379a:	f000 ffbd 	bl	8004718 <xTaskRemoveFromEventList>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d012      	beq.n	80037ca <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80037a4:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <xQueueGenericReset+0xd0>)
 80037a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	f3bf 8f6f 	isb	sy
 80037b4:	e009      	b.n	80037ca <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	3310      	adds	r3, #16
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff fef0 	bl	80035a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	3324      	adds	r3, #36	; 0x24
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff feeb 	bl	80035a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80037ca:	f001 fceb 	bl	80051a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80037ce:	2301      	movs	r3, #1
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	e000ed04 	.word	0xe000ed04

080037dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	; 0x28
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	4613      	mov	r3, r2
 80037e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10c      	bne.n	800380a <xQueueGenericCreate+0x2e>
	__asm volatile
 80037f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f4:	b672      	cpsid	i
 80037f6:	f383 8811 	msr	BASEPRI, r3
 80037fa:	f3bf 8f6f 	isb	sy
 80037fe:	f3bf 8f4f 	dsb	sy
 8003802:	b662      	cpsie	i
 8003804:	613b      	str	r3, [r7, #16]
}
 8003806:	bf00      	nop
 8003808:	e7fe      	b.n	8003808 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d102      	bne.n	8003816 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003810:	2300      	movs	r3, #0
 8003812:	61fb      	str	r3, [r7, #28]
 8003814:	e004      	b.n	8003820 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	fb02 f303 	mul.w	r3, r2, r3
 800381e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	3348      	adds	r3, #72	; 0x48
 8003824:	4618      	mov	r0, r3
 8003826:	f001 fd71 	bl	800530c <pvPortMalloc>
 800382a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d011      	beq.n	8003856 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	3348      	adds	r3, #72	; 0x48
 800383a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003844:	79fa      	ldrb	r2, [r7, #7]
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	4613      	mov	r3, r2
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	68b9      	ldr	r1, [r7, #8]
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 f805 	bl	8003860 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003856:	69bb      	ldr	r3, [r7, #24]
	}
 8003858:	4618      	mov	r0, r3
 800385a:	3720      	adds	r7, #32
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d103      	bne.n	800387c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	e002      	b.n	8003882 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800388e:	2101      	movs	r1, #1
 8003890:	69b8      	ldr	r0, [r7, #24]
 8003892:	f7ff ff39 	bl	8003708 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003896:	bf00      	nop
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08e      	sub	sp, #56	; 0x38
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038ae:	2300      	movs	r3, #0
 80038b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80038b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10c      	bne.n	80038d6 <xQueueGenericSend+0x36>
	__asm volatile
 80038bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c0:	b672      	cpsid	i
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	b662      	cpsie	i
 80038d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038d2:	bf00      	nop
 80038d4:	e7fe      	b.n	80038d4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d103      	bne.n	80038e4 <xQueueGenericSend+0x44>
 80038dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <xQueueGenericSend+0x48>
 80038e4:	2301      	movs	r3, #1
 80038e6:	e000      	b.n	80038ea <xQueueGenericSend+0x4a>
 80038e8:	2300      	movs	r3, #0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10c      	bne.n	8003908 <xQueueGenericSend+0x68>
	__asm volatile
 80038ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f2:	b672      	cpsid	i
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	b662      	cpsie	i
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003904:	bf00      	nop
 8003906:	e7fe      	b.n	8003906 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d103      	bne.n	8003916 <xQueueGenericSend+0x76>
 800390e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <xQueueGenericSend+0x7a>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <xQueueGenericSend+0x7c>
 800391a:	2300      	movs	r3, #0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10c      	bne.n	800393a <xQueueGenericSend+0x9a>
	__asm volatile
 8003920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003924:	b672      	cpsid	i
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	b662      	cpsie	i
 8003934:	623b      	str	r3, [r7, #32]
}
 8003936:	bf00      	nop
 8003938:	e7fe      	b.n	8003938 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800393a:	f001 f8b1 	bl	8004aa0 <xTaskGetSchedulerState>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d102      	bne.n	800394a <xQueueGenericSend+0xaa>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <xQueueGenericSend+0xae>
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <xQueueGenericSend+0xb0>
 800394e:	2300      	movs	r3, #0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10c      	bne.n	800396e <xQueueGenericSend+0xce>
	__asm volatile
 8003954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003958:	b672      	cpsid	i
 800395a:	f383 8811 	msr	BASEPRI, r3
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	b662      	cpsie	i
 8003968:	61fb      	str	r3, [r7, #28]
}
 800396a:	bf00      	nop
 800396c:	e7fe      	b.n	800396c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800396e:	f001 fbe5 	bl	800513c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397a:	429a      	cmp	r2, r3
 800397c:	d302      	bcc.n	8003984 <xQueueGenericSend+0xe4>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b02      	cmp	r3, #2
 8003982:	d129      	bne.n	80039d8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	68b9      	ldr	r1, [r7, #8]
 8003988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800398a:	f000 f9bb 	bl	8003d04 <prvCopyDataToQueue>
 800398e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	2b00      	cmp	r3, #0
 8003996:	d010      	beq.n	80039ba <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399a:	3324      	adds	r3, #36	; 0x24
 800399c:	4618      	mov	r0, r3
 800399e:	f000 febb 	bl	8004718 <xTaskRemoveFromEventList>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d013      	beq.n	80039d0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039a8:	4b3f      	ldr	r3, [pc, #252]	; (8003aa8 <xQueueGenericSend+0x208>)
 80039aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	e00a      	b.n	80039d0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d007      	beq.n	80039d0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039c0:	4b39      	ldr	r3, [pc, #228]	; (8003aa8 <xQueueGenericSend+0x208>)
 80039c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039d0:	f001 fbe8 	bl	80051a4 <vPortExitCritical>
				return pdPASS;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e063      	b.n	8003aa0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d103      	bne.n	80039e6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039de:	f001 fbe1 	bl	80051a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	e05c      	b.n	8003aa0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d106      	bne.n	80039fa <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039ec:	f107 0314 	add.w	r3, r7, #20
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fef5 	bl	80047e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039f6:	2301      	movs	r3, #1
 80039f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039fa:	f001 fbd3 	bl	80051a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039fe:	f000 fca1 	bl	8004344 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a02:	f001 fb9b 	bl	800513c <vPortEnterCritical>
 8003a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a0c:	b25b      	sxtb	r3, r3
 8003a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a12:	d103      	bne.n	8003a1c <xQueueGenericSend+0x17c>
 8003a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a22:	b25b      	sxtb	r3, r3
 8003a24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a28:	d103      	bne.n	8003a32 <xQueueGenericSend+0x192>
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a32:	f001 fbb7 	bl	80051a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a36:	1d3a      	adds	r2, r7, #4
 8003a38:	f107 0314 	add.w	r3, r7, #20
 8003a3c:	4611      	mov	r1, r2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fee4 	bl	800480c <xTaskCheckForTimeOut>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d124      	bne.n	8003a94 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a4c:	f000 fa2c 	bl	8003ea8 <prvIsQueueFull>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d018      	beq.n	8003a88 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a58:	3310      	adds	r3, #16
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 fe34 	bl	80046cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a66:	f000 f9b7 	bl	8003dd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a6a:	f000 fc79 	bl	8004360 <xTaskResumeAll>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f47f af7c 	bne.w	800396e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8003a76:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <xQueueGenericSend+0x208>)
 8003a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	e772      	b.n	800396e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a8a:	f000 f9a5 	bl	8003dd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a8e:	f000 fc67 	bl	8004360 <xTaskResumeAll>
 8003a92:	e76c      	b.n	800396e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a96:	f000 f99f 	bl	8003dd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a9a:	f000 fc61 	bl	8004360 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3738      	adds	r7, #56	; 0x38
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	e000ed04 	.word	0xe000ed04

08003aac <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08e      	sub	sp, #56	; 0x38
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10c      	bne.n	8003ae2 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8003ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003acc:	b672      	cpsid	i
 8003ace:	f383 8811 	msr	BASEPRI, r3
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	b662      	cpsie	i
 8003adc:	623b      	str	r3, [r7, #32]
}
 8003ade:	bf00      	nop
 8003ae0:	e7fe      	b.n	8003ae0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00c      	beq.n	8003b04 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8003aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aee:	b672      	cpsid	i
 8003af0:	f383 8811 	msr	BASEPRI, r3
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	b662      	cpsie	i
 8003afe:	61fb      	str	r3, [r7, #28]
}
 8003b00:	bf00      	nop
 8003b02:	e7fe      	b.n	8003b02 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b04:	f000 ffcc 	bl	8004aa0 <xTaskGetSchedulerState>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d102      	bne.n	8003b14 <xQueueSemaphoreTake+0x68>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <xQueueSemaphoreTake+0x6c>
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <xQueueSemaphoreTake+0x6e>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10c      	bne.n	8003b38 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8003b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b22:	b672      	cpsid	i
 8003b24:	f383 8811 	msr	BASEPRI, r3
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	b662      	cpsie	i
 8003b32:	61bb      	str	r3, [r7, #24]
}
 8003b34:	bf00      	nop
 8003b36:	e7fe      	b.n	8003b36 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b38:	f001 fb00 	bl	800513c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b40:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d024      	beq.n	8003b92 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4a:	1e5a      	subs	r2, r3, #1
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d104      	bne.n	8003b62 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003b58:	f001 f968 	bl	8004e2c <pvTaskIncrementMutexHeldCount>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b60:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00f      	beq.n	8003b8a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6c:	3310      	adds	r3, #16
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 fdd2 	bl	8004718 <xTaskRemoveFromEventList>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d007      	beq.n	8003b8a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b7a:	4b55      	ldr	r3, [pc, #340]	; (8003cd0 <xQueueSemaphoreTake+0x224>)
 8003b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	f3bf 8f4f 	dsb	sy
 8003b86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003b8a:	f001 fb0b 	bl	80051a4 <vPortExitCritical>
				return pdPASS;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e099      	b.n	8003cc6 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d113      	bne.n	8003bc0 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00c      	beq.n	8003bb8 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8003b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba2:	b672      	cpsid	i
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	b662      	cpsie	i
 8003bb2:	617b      	str	r3, [r7, #20]
}
 8003bb4:	bf00      	nop
 8003bb6:	e7fe      	b.n	8003bb6 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003bb8:	f001 faf4 	bl	80051a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	e082      	b.n	8003cc6 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bc6:	f107 030c 	add.w	r3, r7, #12
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 fe08 	bl	80047e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bd4:	f001 fae6 	bl	80051a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bd8:	f000 fbb4 	bl	8004344 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bdc:	f001 faae 	bl	800513c <vPortEnterCritical>
 8003be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003be6:	b25b      	sxtb	r3, r3
 8003be8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bec:	d103      	bne.n	8003bf6 <xQueueSemaphoreTake+0x14a>
 8003bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bfc:	b25b      	sxtb	r3, r3
 8003bfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c02:	d103      	bne.n	8003c0c <xQueueSemaphoreTake+0x160>
 8003c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c0c:	f001 faca 	bl	80051a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c10:	463a      	mov	r2, r7
 8003c12:	f107 030c 	add.w	r3, r7, #12
 8003c16:	4611      	mov	r1, r2
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fdf7 	bl	800480c <xTaskCheckForTimeOut>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d132      	bne.n	8003c8a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c26:	f000 f929 	bl	8003e7c <prvIsQueueEmpty>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d026      	beq.n	8003c7e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d109      	bne.n	8003c4c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8003c38:	f001 fa80 	bl	800513c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 ff4b 	bl	8004adc <xTaskPriorityInherit>
 8003c46:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003c48:	f001 faac 	bl	80051a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4e:	3324      	adds	r3, #36	; 0x24
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	4611      	mov	r1, r2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 fd39 	bl	80046cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c5c:	f000 f8bc 	bl	8003dd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c60:	f000 fb7e 	bl	8004360 <xTaskResumeAll>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f47f af66 	bne.w	8003b38 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8003c6c:	4b18      	ldr	r3, [pc, #96]	; (8003cd0 <xQueueSemaphoreTake+0x224>)
 8003c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	f3bf 8f4f 	dsb	sy
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	e75c      	b.n	8003b38 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003c7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c80:	f000 f8aa 	bl	8003dd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c84:	f000 fb6c 	bl	8004360 <xTaskResumeAll>
 8003c88:	e756      	b.n	8003b38 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003c8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c8c:	f000 f8a4 	bl	8003dd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c90:	f000 fb66 	bl	8004360 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c96:	f000 f8f1 	bl	8003e7c <prvIsQueueEmpty>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f43f af4b 	beq.w	8003b38 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00d      	beq.n	8003cc4 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8003ca8:	f001 fa48 	bl	800513c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003cac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cae:	f000 f811 	bl	8003cd4 <prvGetDisinheritPriorityAfterTimeout>
 8003cb2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 f818 	bl	8004cf0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003cc0:	f001 fa70 	bl	80051a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003cc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3738      	adds	r7, #56	; 0x38
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	e000ed04 	.word	0xe000ed04

08003cd4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d006      	beq.n	8003cf2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f1c3 0307 	rsb	r3, r3, #7
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	e001      	b.n	8003cf6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
	}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10d      	bne.n	8003d3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d14d      	bne.n	8003dc6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 ff54 	bl	8004bdc <xTaskPriorityDisinherit>
 8003d34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	609a      	str	r2, [r3, #8]
 8003d3c:	e043      	b.n	8003dc6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d119      	bne.n	8003d78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6858      	ldr	r0, [r3, #4]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	68b9      	ldr	r1, [r7, #8]
 8003d50:	f001 fcea 	bl	8005728 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	441a      	add	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d32b      	bcc.n	8003dc6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	605a      	str	r2, [r3, #4]
 8003d76:	e026      	b.n	8003dc6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	68d8      	ldr	r0, [r3, #12]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	461a      	mov	r2, r3
 8003d82:	68b9      	ldr	r1, [r7, #8]
 8003d84:	f001 fcd0 	bl	8005728 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	425b      	negs	r3, r3
 8003d92:	441a      	add	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d207      	bcs.n	8003db4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	425b      	negs	r3, r3
 8003dae:	441a      	add	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d105      	bne.n	8003dc6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d002      	beq.n	8003dc6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003dce:	697b      	ldr	r3, [r7, #20]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003de0:	f001 f9ac 	bl	800513c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003dec:	e011      	b.n	8003e12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d012      	beq.n	8003e1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3324      	adds	r3, #36	; 0x24
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fc8c 	bl	8004718 <xTaskRemoveFromEventList>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e06:	f000 fd67 	bl	80048d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	dce9      	bgt.n	8003dee <prvUnlockQueue+0x16>
 8003e1a:	e000      	b.n	8003e1e <prvUnlockQueue+0x46>
					break;
 8003e1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	22ff      	movs	r2, #255	; 0xff
 8003e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003e26:	f001 f9bd 	bl	80051a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e2a:	f001 f987 	bl	800513c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e36:	e011      	b.n	8003e5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d012      	beq.n	8003e66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3310      	adds	r3, #16
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fc67 	bl	8004718 <xTaskRemoveFromEventList>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003e50:	f000 fd42 	bl	80048d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e54:	7bbb      	ldrb	r3, [r7, #14]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	dce9      	bgt.n	8003e38 <prvUnlockQueue+0x60>
 8003e64:	e000      	b.n	8003e68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	22ff      	movs	r2, #255	; 0xff
 8003e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003e70:	f001 f998 	bl	80051a4 <vPortExitCritical>
}
 8003e74:	bf00      	nop
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e84:	f001 f95a 	bl	800513c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d102      	bne.n	8003e96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003e90:	2301      	movs	r3, #1
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	e001      	b.n	8003e9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e9a:	f001 f983 	bl	80051a4 <vPortExitCritical>

	return xReturn;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003eb0:	f001 f944 	bl	800513c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d102      	bne.n	8003ec6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	e001      	b.n	8003eca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003eca:	f001 f96b 	bl	80051a4 <vPortExitCritical>

	return xReturn;
 8003ece:	68fb      	ldr	r3, [r7, #12]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08e      	sub	sp, #56	; 0x38
 8003edc:	af04      	add	r7, sp, #16
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
 8003ee4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10c      	bne.n	8003f06 <xTaskCreateStatic+0x2e>
	__asm volatile
 8003eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef0:	b672      	cpsid	i
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	b662      	cpsie	i
 8003f00:	623b      	str	r3, [r7, #32]
}
 8003f02:	bf00      	nop
 8003f04:	e7fe      	b.n	8003f04 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8003f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10c      	bne.n	8003f26 <xTaskCreateStatic+0x4e>
	__asm volatile
 8003f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f10:	b672      	cpsid	i
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	b662      	cpsie	i
 8003f20:	61fb      	str	r3, [r7, #28]
}
 8003f22:	bf00      	nop
 8003f24:	e7fe      	b.n	8003f24 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f26:	2354      	movs	r3, #84	; 0x54
 8003f28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	2b54      	cmp	r3, #84	; 0x54
 8003f2e:	d00c      	beq.n	8003f4a <xTaskCreateStatic+0x72>
	__asm volatile
 8003f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f34:	b672      	cpsid	i
 8003f36:	f383 8811 	msr	BASEPRI, r3
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	b662      	cpsie	i
 8003f44:	61bb      	str	r3, [r7, #24]
}
 8003f46:	bf00      	nop
 8003f48:	e7fe      	b.n	8003f48 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d01e      	beq.n	8003f90 <xTaskCreateStatic+0xb8>
 8003f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d01b      	beq.n	8003f90 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	2202      	movs	r2, #2
 8003f66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	9303      	str	r3, [sp, #12]
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	9302      	str	r3, [sp, #8]
 8003f72:	f107 0314 	add.w	r3, r7, #20
 8003f76:	9301      	str	r3, [sp, #4]
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	68b9      	ldr	r1, [r7, #8]
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f850 	bl	8004028 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f8a:	f000 f8d7 	bl	800413c <prvAddNewTaskToReadyList>
 8003f8e:	e001      	b.n	8003f94 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f94:	697b      	ldr	r3, [r7, #20]
	}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3728      	adds	r7, #40	; 0x28
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b08c      	sub	sp, #48	; 0x30
 8003fa2:	af04      	add	r7, sp, #16
 8003fa4:	60f8      	str	r0, [r7, #12]
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	603b      	str	r3, [r7, #0]
 8003faa:	4613      	mov	r3, r2
 8003fac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003fae:	88fb      	ldrh	r3, [r7, #6]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f001 f9aa 	bl	800530c <pvPortMalloc>
 8003fb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00e      	beq.n	8003fde <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003fc0:	2054      	movs	r0, #84	; 0x54
 8003fc2:	f001 f9a3 	bl	800530c <pvPortMalloc>
 8003fc6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	631a      	str	r2, [r3, #48]	; 0x30
 8003fd4:	e005      	b.n	8003fe2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003fd6:	6978      	ldr	r0, [r7, #20]
 8003fd8:	f001 fa62 	bl	80054a0 <vPortFree>
 8003fdc:	e001      	b.n	8003fe2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d017      	beq.n	8004018 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ff0:	88fa      	ldrh	r2, [r7, #6]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	9303      	str	r3, [sp, #12]
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	9302      	str	r3, [sp, #8]
 8003ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffc:	9301      	str	r3, [sp, #4]
 8003ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68b9      	ldr	r1, [r7, #8]
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 f80e 	bl	8004028 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800400c:	69f8      	ldr	r0, [r7, #28]
 800400e:	f000 f895 	bl	800413c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004012:	2301      	movs	r3, #1
 8004014:	61bb      	str	r3, [r7, #24]
 8004016:	e002      	b.n	800401e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800401c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800401e:	69bb      	ldr	r3, [r7, #24]
	}
 8004020:	4618      	mov	r0, r3
 8004022:	3720      	adds	r7, #32
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004040:	440b      	add	r3, r1
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	f023 0307 	bic.w	r3, r3, #7
 800404e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00c      	beq.n	8004074 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405e:	b672      	cpsid	i
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	b662      	cpsie	i
 800406e:	617b      	str	r3, [r7, #20]
}
 8004070:	bf00      	nop
 8004072:	e7fe      	b.n	8004072 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d01f      	beq.n	80040ba <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
 800407e:	e012      	b.n	80040a6 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	4413      	add	r3, r2
 8004086:	7819      	ldrb	r1, [r3, #0]
 8004088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	4413      	add	r3, r2
 800408e:	3334      	adds	r3, #52	; 0x34
 8004090:	460a      	mov	r2, r1
 8004092:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	4413      	add	r3, r2
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d006      	beq.n	80040ae <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	3301      	adds	r3, #1
 80040a4:	61fb      	str	r3, [r7, #28]
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	2b0f      	cmp	r3, #15
 80040aa:	d9e9      	bls.n	8004080 <prvInitialiseNewTask+0x58>
 80040ac:	e000      	b.n	80040b0 <prvInitialiseNewTask+0x88>
			{
				break;
 80040ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040b8:	e003      	b.n	80040c2 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80040ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c4:	2b06      	cmp	r3, #6
 80040c6:	d901      	bls.n	80040cc <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040c8:	2306      	movs	r3, #6
 80040ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040d6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	2200      	movs	r2, #0
 80040dc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e0:	3304      	adds	r3, #4
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff fa7c 	bl	80035e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ea:	3318      	adds	r3, #24
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff fa77 	bl	80035e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fa:	f1c3 0207 	rsb	r2, r3, #7
 80040fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004100:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004106:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410a:	2200      	movs	r2, #0
 800410c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	68f9      	ldr	r1, [r7, #12]
 800411a:	69b8      	ldr	r0, [r7, #24]
 800411c:	f000 ff00 	bl	8004f20 <pxPortInitialiseStack>
 8004120:	4602      	mov	r2, r0
 8004122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004124:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004128:	2b00      	cmp	r3, #0
 800412a:	d002      	beq.n	8004132 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800412c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004130:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004132:	bf00      	nop
 8004134:	3720      	adds	r7, #32
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
	...

0800413c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004144:	f000 fffa 	bl	800513c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004148:	4b2a      	ldr	r3, [pc, #168]	; (80041f4 <prvAddNewTaskToReadyList+0xb8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3301      	adds	r3, #1
 800414e:	4a29      	ldr	r2, [pc, #164]	; (80041f4 <prvAddNewTaskToReadyList+0xb8>)
 8004150:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004152:	4b29      	ldr	r3, [pc, #164]	; (80041f8 <prvAddNewTaskToReadyList+0xbc>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800415a:	4a27      	ldr	r2, [pc, #156]	; (80041f8 <prvAddNewTaskToReadyList+0xbc>)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004160:	4b24      	ldr	r3, [pc, #144]	; (80041f4 <prvAddNewTaskToReadyList+0xb8>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d110      	bne.n	800418a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004168:	f000 fbda 	bl	8004920 <prvInitialiseTaskLists>
 800416c:	e00d      	b.n	800418a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800416e:	4b23      	ldr	r3, [pc, #140]	; (80041fc <prvAddNewTaskToReadyList+0xc0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d109      	bne.n	800418a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004176:	4b20      	ldr	r3, [pc, #128]	; (80041f8 <prvAddNewTaskToReadyList+0xbc>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	429a      	cmp	r2, r3
 8004182:	d802      	bhi.n	800418a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004184:	4a1c      	ldr	r2, [pc, #112]	; (80041f8 <prvAddNewTaskToReadyList+0xbc>)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800418a:	4b1d      	ldr	r3, [pc, #116]	; (8004200 <prvAddNewTaskToReadyList+0xc4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3301      	adds	r3, #1
 8004190:	4a1b      	ldr	r2, [pc, #108]	; (8004200 <prvAddNewTaskToReadyList+0xc4>)
 8004192:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004198:	2201      	movs	r2, #1
 800419a:	409a      	lsls	r2, r3
 800419c:	4b19      	ldr	r3, [pc, #100]	; (8004204 <prvAddNewTaskToReadyList+0xc8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	4a18      	ldr	r2, [pc, #96]	; (8004204 <prvAddNewTaskToReadyList+0xc8>)
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041aa:	4613      	mov	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4a15      	ldr	r2, [pc, #84]	; (8004208 <prvAddNewTaskToReadyList+0xcc>)
 80041b4:	441a      	add	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3304      	adds	r3, #4
 80041ba:	4619      	mov	r1, r3
 80041bc:	4610      	mov	r0, r2
 80041be:	f7ff fa1c 	bl	80035fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041c2:	f000 ffef 	bl	80051a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041c6:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <prvAddNewTaskToReadyList+0xc0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00e      	beq.n	80041ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041ce:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <prvAddNewTaskToReadyList+0xbc>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	429a      	cmp	r2, r3
 80041da:	d207      	bcs.n	80041ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041dc:	4b0b      	ldr	r3, [pc, #44]	; (800420c <prvAddNewTaskToReadyList+0xd0>)
 80041de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	200004c8 	.word	0x200004c8
 80041f8:	200003c8 	.word	0x200003c8
 80041fc:	200004d4 	.word	0x200004d4
 8004200:	200004e4 	.word	0x200004e4
 8004204:	200004d0 	.word	0x200004d0
 8004208:	200003cc 	.word	0x200003cc
 800420c:	e000ed04 	.word	0xe000ed04

08004210 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004218:	2300      	movs	r3, #0
 800421a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d019      	beq.n	8004256 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004222:	4b14      	ldr	r3, [pc, #80]	; (8004274 <vTaskDelay+0x64>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00c      	beq.n	8004244 <vTaskDelay+0x34>
	__asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	b672      	cpsid	i
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	b662      	cpsie	i
 800423e:	60bb      	str	r3, [r7, #8]
}
 8004240:	bf00      	nop
 8004242:	e7fe      	b.n	8004242 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004244:	f000 f87e 	bl	8004344 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004248:	2100      	movs	r1, #0
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fe02 	bl	8004e54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004250:	f000 f886 	bl	8004360 <xTaskResumeAll>
 8004254:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d107      	bne.n	800426c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800425c:	4b06      	ldr	r3, [pc, #24]	; (8004278 <vTaskDelay+0x68>)
 800425e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800426c:	bf00      	nop
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	200004f0 	.word	0x200004f0
 8004278:	e000ed04 	.word	0xe000ed04

0800427c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b08a      	sub	sp, #40	; 0x28
 8004280:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004282:	2300      	movs	r3, #0
 8004284:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004286:	2300      	movs	r3, #0
 8004288:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800428a:	463a      	mov	r2, r7
 800428c:	1d39      	adds	r1, r7, #4
 800428e:	f107 0308 	add.w	r3, r7, #8
 8004292:	4618      	mov	r0, r3
 8004294:	f7fc f98e 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004298:	6839      	ldr	r1, [r7, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	9202      	str	r2, [sp, #8]
 80042a0:	9301      	str	r3, [sp, #4]
 80042a2:	2300      	movs	r3, #0
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	2300      	movs	r3, #0
 80042a8:	460a      	mov	r2, r1
 80042aa:	4920      	ldr	r1, [pc, #128]	; (800432c <vTaskStartScheduler+0xb0>)
 80042ac:	4820      	ldr	r0, [pc, #128]	; (8004330 <vTaskStartScheduler+0xb4>)
 80042ae:	f7ff fe13 	bl	8003ed8 <xTaskCreateStatic>
 80042b2:	4603      	mov	r3, r0
 80042b4:	4a1f      	ldr	r2, [pc, #124]	; (8004334 <vTaskStartScheduler+0xb8>)
 80042b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042b8:	4b1e      	ldr	r3, [pc, #120]	; (8004334 <vTaskStartScheduler+0xb8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042c0:	2301      	movs	r3, #1
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	e001      	b.n	80042ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042c6:	2300      	movs	r3, #0
 80042c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d118      	bne.n	8004302 <vTaskStartScheduler+0x86>
	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	b672      	cpsid	i
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	b662      	cpsie	i
 80042e4:	613b      	str	r3, [r7, #16]
}
 80042e6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042e8:	4b13      	ldr	r3, [pc, #76]	; (8004338 <vTaskStartScheduler+0xbc>)
 80042ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042f0:	4b12      	ldr	r3, [pc, #72]	; (800433c <vTaskStartScheduler+0xc0>)
 80042f2:	2201      	movs	r2, #1
 80042f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80042f6:	4b12      	ldr	r3, [pc, #72]	; (8004340 <vTaskStartScheduler+0xc4>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042fc:	f000 fea0 	bl	8005040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004300:	e010      	b.n	8004324 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004308:	d10c      	bne.n	8004324 <vTaskStartScheduler+0xa8>
	__asm volatile
 800430a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430e:	b672      	cpsid	i
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	b662      	cpsie	i
 800431e:	60fb      	str	r3, [r7, #12]
}
 8004320:	bf00      	nop
 8004322:	e7fe      	b.n	8004322 <vTaskStartScheduler+0xa6>
}
 8004324:	bf00      	nop
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	08006834 	.word	0x08006834
 8004330:	080048f1 	.word	0x080048f1
 8004334:	200004ec 	.word	0x200004ec
 8004338:	200004e8 	.word	0x200004e8
 800433c:	200004d4 	.word	0x200004d4
 8004340:	200004cc 	.word	0x200004cc

08004344 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004348:	4b04      	ldr	r3, [pc, #16]	; (800435c <vTaskSuspendAll+0x18>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3301      	adds	r3, #1
 800434e:	4a03      	ldr	r2, [pc, #12]	; (800435c <vTaskSuspendAll+0x18>)
 8004350:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004352:	bf00      	nop
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	200004f0 	.word	0x200004f0

08004360 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800436a:	2300      	movs	r3, #0
 800436c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800436e:	4b42      	ldr	r3, [pc, #264]	; (8004478 <xTaskResumeAll+0x118>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10c      	bne.n	8004390 <xTaskResumeAll+0x30>
	__asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437a:	b672      	cpsid	i
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	b662      	cpsie	i
 800438a:	603b      	str	r3, [r7, #0]
}
 800438c:	bf00      	nop
 800438e:	e7fe      	b.n	800438e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004390:	f000 fed4 	bl	800513c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004394:	4b38      	ldr	r3, [pc, #224]	; (8004478 <xTaskResumeAll+0x118>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3b01      	subs	r3, #1
 800439a:	4a37      	ldr	r2, [pc, #220]	; (8004478 <xTaskResumeAll+0x118>)
 800439c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800439e:	4b36      	ldr	r3, [pc, #216]	; (8004478 <xTaskResumeAll+0x118>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d161      	bne.n	800446a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043a6:	4b35      	ldr	r3, [pc, #212]	; (800447c <xTaskResumeAll+0x11c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d05d      	beq.n	800446a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043ae:	e02e      	b.n	800440e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043b0:	4b33      	ldr	r3, [pc, #204]	; (8004480 <xTaskResumeAll+0x120>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	3318      	adds	r3, #24
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff f979 	bl	80036b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3304      	adds	r3, #4
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff f974 	bl	80036b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	2201      	movs	r2, #1
 80043d2:	409a      	lsls	r2, r3
 80043d4:	4b2b      	ldr	r3, [pc, #172]	; (8004484 <xTaskResumeAll+0x124>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4313      	orrs	r3, r2
 80043da:	4a2a      	ldr	r2, [pc, #168]	; (8004484 <xTaskResumeAll+0x124>)
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4a27      	ldr	r2, [pc, #156]	; (8004488 <xTaskResumeAll+0x128>)
 80043ec:	441a      	add	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3304      	adds	r3, #4
 80043f2:	4619      	mov	r1, r3
 80043f4:	4610      	mov	r0, r2
 80043f6:	f7ff f900 	bl	80035fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fe:	4b23      	ldr	r3, [pc, #140]	; (800448c <xTaskResumeAll+0x12c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	429a      	cmp	r2, r3
 8004406:	d302      	bcc.n	800440e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004408:	4b21      	ldr	r3, [pc, #132]	; (8004490 <xTaskResumeAll+0x130>)
 800440a:	2201      	movs	r2, #1
 800440c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800440e:	4b1c      	ldr	r3, [pc, #112]	; (8004480 <xTaskResumeAll+0x120>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1cc      	bne.n	80043b0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800441c:	f000 fb20 	bl	8004a60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004420:	4b1c      	ldr	r3, [pc, #112]	; (8004494 <xTaskResumeAll+0x134>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d010      	beq.n	800444e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800442c:	f000 f836 	bl	800449c <xTaskIncrementTick>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d002      	beq.n	800443c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004436:	4b16      	ldr	r3, [pc, #88]	; (8004490 <xTaskResumeAll+0x130>)
 8004438:	2201      	movs	r2, #1
 800443a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3b01      	subs	r3, #1
 8004440:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f1      	bne.n	800442c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004448:	4b12      	ldr	r3, [pc, #72]	; (8004494 <xTaskResumeAll+0x134>)
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800444e:	4b10      	ldr	r3, [pc, #64]	; (8004490 <xTaskResumeAll+0x130>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d009      	beq.n	800446a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004456:	2301      	movs	r3, #1
 8004458:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800445a:	4b0f      	ldr	r3, [pc, #60]	; (8004498 <xTaskResumeAll+0x138>)
 800445c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800446a:	f000 fe9b 	bl	80051a4 <vPortExitCritical>

	return xAlreadyYielded;
 800446e:	68bb      	ldr	r3, [r7, #8]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	200004f0 	.word	0x200004f0
 800447c:	200004c8 	.word	0x200004c8
 8004480:	20000488 	.word	0x20000488
 8004484:	200004d0 	.word	0x200004d0
 8004488:	200003cc 	.word	0x200003cc
 800448c:	200003c8 	.word	0x200003c8
 8004490:	200004dc 	.word	0x200004dc
 8004494:	200004d8 	.word	0x200004d8
 8004498:	e000ed04 	.word	0xe000ed04

0800449c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044a6:	4b4f      	ldr	r3, [pc, #316]	; (80045e4 <xTaskIncrementTick+0x148>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f040 808a 	bne.w	80045c4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044b0:	4b4d      	ldr	r3, [pc, #308]	; (80045e8 <xTaskIncrementTick+0x14c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3301      	adds	r3, #1
 80044b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044b8:	4a4b      	ldr	r2, [pc, #300]	; (80045e8 <xTaskIncrementTick+0x14c>)
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d122      	bne.n	800450a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80044c4:	4b49      	ldr	r3, [pc, #292]	; (80045ec <xTaskIncrementTick+0x150>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00c      	beq.n	80044e8 <xTaskIncrementTick+0x4c>
	__asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d2:	b672      	cpsid	i
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	b662      	cpsie	i
 80044e2:	603b      	str	r3, [r7, #0]
}
 80044e4:	bf00      	nop
 80044e6:	e7fe      	b.n	80044e6 <xTaskIncrementTick+0x4a>
 80044e8:	4b40      	ldr	r3, [pc, #256]	; (80045ec <xTaskIncrementTick+0x150>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	4b40      	ldr	r3, [pc, #256]	; (80045f0 <xTaskIncrementTick+0x154>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a3e      	ldr	r2, [pc, #248]	; (80045ec <xTaskIncrementTick+0x150>)
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	4a3e      	ldr	r2, [pc, #248]	; (80045f0 <xTaskIncrementTick+0x154>)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6013      	str	r3, [r2, #0]
 80044fc:	4b3d      	ldr	r3, [pc, #244]	; (80045f4 <xTaskIncrementTick+0x158>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3301      	adds	r3, #1
 8004502:	4a3c      	ldr	r2, [pc, #240]	; (80045f4 <xTaskIncrementTick+0x158>)
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	f000 faab 	bl	8004a60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800450a:	4b3b      	ldr	r3, [pc, #236]	; (80045f8 <xTaskIncrementTick+0x15c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	429a      	cmp	r2, r3
 8004512:	d348      	bcc.n	80045a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004514:	4b35      	ldr	r3, [pc, #212]	; (80045ec <xTaskIncrementTick+0x150>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d104      	bne.n	8004528 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800451e:	4b36      	ldr	r3, [pc, #216]	; (80045f8 <xTaskIncrementTick+0x15c>)
 8004520:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004524:	601a      	str	r2, [r3, #0]
					break;
 8004526:	e03e      	b.n	80045a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004528:	4b30      	ldr	r3, [pc, #192]	; (80045ec <xTaskIncrementTick+0x150>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	429a      	cmp	r2, r3
 800453e:	d203      	bcs.n	8004548 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004540:	4a2d      	ldr	r2, [pc, #180]	; (80045f8 <xTaskIncrementTick+0x15c>)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004546:	e02e      	b.n	80045a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	3304      	adds	r3, #4
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff f8b1 	bl	80036b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004556:	2b00      	cmp	r3, #0
 8004558:	d004      	beq.n	8004564 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	3318      	adds	r3, #24
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff f8a8 	bl	80036b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	2201      	movs	r2, #1
 800456a:	409a      	lsls	r2, r3
 800456c:	4b23      	ldr	r3, [pc, #140]	; (80045fc <xTaskIncrementTick+0x160>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4313      	orrs	r3, r2
 8004572:	4a22      	ldr	r2, [pc, #136]	; (80045fc <xTaskIncrementTick+0x160>)
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457a:	4613      	mov	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4a1f      	ldr	r2, [pc, #124]	; (8004600 <xTaskIncrementTick+0x164>)
 8004584:	441a      	add	r2, r3
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	3304      	adds	r3, #4
 800458a:	4619      	mov	r1, r3
 800458c:	4610      	mov	r0, r2
 800458e:	f7ff f834 	bl	80035fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004596:	4b1b      	ldr	r3, [pc, #108]	; (8004604 <xTaskIncrementTick+0x168>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	429a      	cmp	r2, r3
 800459e:	d3b9      	bcc.n	8004514 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80045a0:	2301      	movs	r3, #1
 80045a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045a4:	e7b6      	b.n	8004514 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045a6:	4b17      	ldr	r3, [pc, #92]	; (8004604 <xTaskIncrementTick+0x168>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ac:	4914      	ldr	r1, [pc, #80]	; (8004600 <xTaskIncrementTick+0x164>)
 80045ae:	4613      	mov	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	440b      	add	r3, r1
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d907      	bls.n	80045ce <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80045be:	2301      	movs	r3, #1
 80045c0:	617b      	str	r3, [r7, #20]
 80045c2:	e004      	b.n	80045ce <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80045c4:	4b10      	ldr	r3, [pc, #64]	; (8004608 <xTaskIncrementTick+0x16c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3301      	adds	r3, #1
 80045ca:	4a0f      	ldr	r2, [pc, #60]	; (8004608 <xTaskIncrementTick+0x16c>)
 80045cc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80045ce:	4b0f      	ldr	r3, [pc, #60]	; (800460c <xTaskIncrementTick+0x170>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80045d6:	2301      	movs	r3, #1
 80045d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80045da:	697b      	ldr	r3, [r7, #20]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	200004f0 	.word	0x200004f0
 80045e8:	200004cc 	.word	0x200004cc
 80045ec:	20000480 	.word	0x20000480
 80045f0:	20000484 	.word	0x20000484
 80045f4:	200004e0 	.word	0x200004e0
 80045f8:	200004e8 	.word	0x200004e8
 80045fc:	200004d0 	.word	0x200004d0
 8004600:	200003cc 	.word	0x200003cc
 8004604:	200003c8 	.word	0x200003c8
 8004608:	200004d8 	.word	0x200004d8
 800460c:	200004dc 	.word	0x200004dc

08004610 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004616:	4b28      	ldr	r3, [pc, #160]	; (80046b8 <vTaskSwitchContext+0xa8>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800461e:	4b27      	ldr	r3, [pc, #156]	; (80046bc <vTaskSwitchContext+0xac>)
 8004620:	2201      	movs	r2, #1
 8004622:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004624:	e041      	b.n	80046aa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004626:	4b25      	ldr	r3, [pc, #148]	; (80046bc <vTaskSwitchContext+0xac>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800462c:	4b24      	ldr	r3, [pc, #144]	; (80046c0 <vTaskSwitchContext+0xb0>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	fab3 f383 	clz	r3, r3
 8004638:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800463a:	7afb      	ldrb	r3, [r7, #11]
 800463c:	f1c3 031f 	rsb	r3, r3, #31
 8004640:	617b      	str	r3, [r7, #20]
 8004642:	4920      	ldr	r1, [pc, #128]	; (80046c4 <vTaskSwitchContext+0xb4>)
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	4613      	mov	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4413      	add	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	440b      	add	r3, r1
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10c      	bne.n	8004670 <vTaskSwitchContext+0x60>
	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465a:	b672      	cpsid	i
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	b662      	cpsie	i
 800466a:	607b      	str	r3, [r7, #4]
}
 800466c:	bf00      	nop
 800466e:	e7fe      	b.n	800466e <vTaskSwitchContext+0x5e>
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	4613      	mov	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4a12      	ldr	r2, [pc, #72]	; (80046c4 <vTaskSwitchContext+0xb4>)
 800467c:	4413      	add	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	605a      	str	r2, [r3, #4]
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	3308      	adds	r3, #8
 8004692:	429a      	cmp	r2, r3
 8004694:	d104      	bne.n	80046a0 <vTaskSwitchContext+0x90>
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	605a      	str	r2, [r3, #4]
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	4a08      	ldr	r2, [pc, #32]	; (80046c8 <vTaskSwitchContext+0xb8>)
 80046a8:	6013      	str	r3, [r2, #0]
}
 80046aa:	bf00      	nop
 80046ac:	371c      	adds	r7, #28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	200004f0 	.word	0x200004f0
 80046bc:	200004dc 	.word	0x200004dc
 80046c0:	200004d0 	.word	0x200004d0
 80046c4:	200003cc 	.word	0x200003cc
 80046c8:	200003c8 	.word	0x200003c8

080046cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10c      	bne.n	80046f6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80046dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e0:	b672      	cpsid	i
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	b662      	cpsie	i
 80046f0:	60fb      	str	r3, [r7, #12]
}
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046f6:	4b07      	ldr	r3, [pc, #28]	; (8004714 <vTaskPlaceOnEventList+0x48>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3318      	adds	r3, #24
 80046fc:	4619      	mov	r1, r3
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7fe ff9f 	bl	8003642 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004704:	2101      	movs	r1, #1
 8004706:	6838      	ldr	r0, [r7, #0]
 8004708:	f000 fba4 	bl	8004e54 <prvAddCurrentTaskToDelayedList>
}
 800470c:	bf00      	nop
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	200003c8 	.word	0x200003c8

08004718 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10c      	bne.n	8004748 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	b672      	cpsid	i
 8004734:	f383 8811 	msr	BASEPRI, r3
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	b662      	cpsie	i
 8004742:	60fb      	str	r3, [r7, #12]
}
 8004744:	bf00      	nop
 8004746:	e7fe      	b.n	8004746 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	3318      	adds	r3, #24
 800474c:	4618      	mov	r0, r3
 800474e:	f7fe ffb1 	bl	80036b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004752:	4b1d      	ldr	r3, [pc, #116]	; (80047c8 <xTaskRemoveFromEventList+0xb0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d11c      	bne.n	8004794 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	3304      	adds	r3, #4
 800475e:	4618      	mov	r0, r3
 8004760:	f7fe ffa8 	bl	80036b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	2201      	movs	r2, #1
 800476a:	409a      	lsls	r2, r3
 800476c:	4b17      	ldr	r3, [pc, #92]	; (80047cc <xTaskRemoveFromEventList+0xb4>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4313      	orrs	r3, r2
 8004772:	4a16      	ldr	r2, [pc, #88]	; (80047cc <xTaskRemoveFromEventList+0xb4>)
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800477a:	4613      	mov	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4a13      	ldr	r2, [pc, #76]	; (80047d0 <xTaskRemoveFromEventList+0xb8>)
 8004784:	441a      	add	r2, r3
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	3304      	adds	r3, #4
 800478a:	4619      	mov	r1, r3
 800478c:	4610      	mov	r0, r2
 800478e:	f7fe ff34 	bl	80035fa <vListInsertEnd>
 8004792:	e005      	b.n	80047a0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	3318      	adds	r3, #24
 8004798:	4619      	mov	r1, r3
 800479a:	480e      	ldr	r0, [pc, #56]	; (80047d4 <xTaskRemoveFromEventList+0xbc>)
 800479c:	f7fe ff2d 	bl	80035fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a4:	4b0c      	ldr	r3, [pc, #48]	; (80047d8 <xTaskRemoveFromEventList+0xc0>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d905      	bls.n	80047ba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80047ae:	2301      	movs	r3, #1
 80047b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80047b2:	4b0a      	ldr	r3, [pc, #40]	; (80047dc <xTaskRemoveFromEventList+0xc4>)
 80047b4:	2201      	movs	r2, #1
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	e001      	b.n	80047be <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80047be:	697b      	ldr	r3, [r7, #20]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	200004f0 	.word	0x200004f0
 80047cc:	200004d0 	.word	0x200004d0
 80047d0:	200003cc 	.word	0x200003cc
 80047d4:	20000488 	.word	0x20000488
 80047d8:	200003c8 	.word	0x200003c8
 80047dc:	200004dc 	.word	0x200004dc

080047e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047e8:	4b06      	ldr	r3, [pc, #24]	; (8004804 <vTaskInternalSetTimeOutState+0x24>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80047f0:	4b05      	ldr	r3, [pc, #20]	; (8004808 <vTaskInternalSetTimeOutState+0x28>)
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	605a      	str	r2, [r3, #4]
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	200004e0 	.word	0x200004e0
 8004808:	200004cc 	.word	0x200004cc

0800480c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10c      	bne.n	8004836 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800481c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004820:	b672      	cpsid	i
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	b662      	cpsie	i
 8004830:	613b      	str	r3, [r7, #16]
}
 8004832:	bf00      	nop
 8004834:	e7fe      	b.n	8004834 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10c      	bne.n	8004856 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800483c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004840:	b672      	cpsid	i
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	b662      	cpsie	i
 8004850:	60fb      	str	r3, [r7, #12]
}
 8004852:	bf00      	nop
 8004854:	e7fe      	b.n	8004854 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8004856:	f000 fc71 	bl	800513c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800485a:	4b1d      	ldr	r3, [pc, #116]	; (80048d0 <xTaskCheckForTimeOut+0xc4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004872:	d102      	bne.n	800487a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004874:	2300      	movs	r3, #0
 8004876:	61fb      	str	r3, [r7, #28]
 8004878:	e023      	b.n	80048c2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	4b15      	ldr	r3, [pc, #84]	; (80048d4 <xTaskCheckForTimeOut+0xc8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d007      	beq.n	8004896 <xTaskCheckForTimeOut+0x8a>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	429a      	cmp	r2, r3
 800488e:	d302      	bcc.n	8004896 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004890:	2301      	movs	r3, #1
 8004892:	61fb      	str	r3, [r7, #28]
 8004894:	e015      	b.n	80048c2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	429a      	cmp	r2, r3
 800489e:	d20b      	bcs.n	80048b8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	1ad2      	subs	r2, r2, r3
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7ff ff97 	bl	80047e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61fb      	str	r3, [r7, #28]
 80048b6:	e004      	b.n	80048c2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048be:	2301      	movs	r3, #1
 80048c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80048c2:	f000 fc6f 	bl	80051a4 <vPortExitCritical>

	return xReturn;
 80048c6:	69fb      	ldr	r3, [r7, #28]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3720      	adds	r7, #32
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	200004cc 	.word	0x200004cc
 80048d4:	200004e0 	.word	0x200004e0

080048d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048dc:	4b03      	ldr	r3, [pc, #12]	; (80048ec <vTaskMissedYield+0x14>)
 80048de:	2201      	movs	r2, #1
 80048e0:	601a      	str	r2, [r3, #0]
}
 80048e2:	bf00      	nop
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	200004dc 	.word	0x200004dc

080048f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048f8:	f000 f852 	bl	80049a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048fc:	4b06      	ldr	r3, [pc, #24]	; (8004918 <prvIdleTask+0x28>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d9f9      	bls.n	80048f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <prvIdleTask+0x2c>)
 8004906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004914:	e7f0      	b.n	80048f8 <prvIdleTask+0x8>
 8004916:	bf00      	nop
 8004918:	200003cc 	.word	0x200003cc
 800491c:	e000ed04 	.word	0xe000ed04

08004920 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004926:	2300      	movs	r3, #0
 8004928:	607b      	str	r3, [r7, #4]
 800492a:	e00c      	b.n	8004946 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4a12      	ldr	r2, [pc, #72]	; (8004980 <prvInitialiseTaskLists+0x60>)
 8004938:	4413      	add	r3, r2
 800493a:	4618      	mov	r0, r3
 800493c:	f7fe fe30 	bl	80035a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3301      	adds	r3, #1
 8004944:	607b      	str	r3, [r7, #4]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b06      	cmp	r3, #6
 800494a:	d9ef      	bls.n	800492c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800494c:	480d      	ldr	r0, [pc, #52]	; (8004984 <prvInitialiseTaskLists+0x64>)
 800494e:	f7fe fe27 	bl	80035a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004952:	480d      	ldr	r0, [pc, #52]	; (8004988 <prvInitialiseTaskLists+0x68>)
 8004954:	f7fe fe24 	bl	80035a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004958:	480c      	ldr	r0, [pc, #48]	; (800498c <prvInitialiseTaskLists+0x6c>)
 800495a:	f7fe fe21 	bl	80035a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800495e:	480c      	ldr	r0, [pc, #48]	; (8004990 <prvInitialiseTaskLists+0x70>)
 8004960:	f7fe fe1e 	bl	80035a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004964:	480b      	ldr	r0, [pc, #44]	; (8004994 <prvInitialiseTaskLists+0x74>)
 8004966:	f7fe fe1b 	bl	80035a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800496a:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <prvInitialiseTaskLists+0x78>)
 800496c:	4a05      	ldr	r2, [pc, #20]	; (8004984 <prvInitialiseTaskLists+0x64>)
 800496e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004970:	4b0a      	ldr	r3, [pc, #40]	; (800499c <prvInitialiseTaskLists+0x7c>)
 8004972:	4a05      	ldr	r2, [pc, #20]	; (8004988 <prvInitialiseTaskLists+0x68>)
 8004974:	601a      	str	r2, [r3, #0]
}
 8004976:	bf00      	nop
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	200003cc 	.word	0x200003cc
 8004984:	20000458 	.word	0x20000458
 8004988:	2000046c 	.word	0x2000046c
 800498c:	20000488 	.word	0x20000488
 8004990:	2000049c 	.word	0x2000049c
 8004994:	200004b4 	.word	0x200004b4
 8004998:	20000480 	.word	0x20000480
 800499c:	20000484 	.word	0x20000484

080049a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049a6:	e019      	b.n	80049dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80049a8:	f000 fbc8 	bl	800513c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049ac:	4b10      	ldr	r3, [pc, #64]	; (80049f0 <prvCheckTasksWaitingTermination+0x50>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3304      	adds	r3, #4
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7fe fe7b 	bl	80036b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049be:	4b0d      	ldr	r3, [pc, #52]	; (80049f4 <prvCheckTasksWaitingTermination+0x54>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3b01      	subs	r3, #1
 80049c4:	4a0b      	ldr	r2, [pc, #44]	; (80049f4 <prvCheckTasksWaitingTermination+0x54>)
 80049c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049c8:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <prvCheckTasksWaitingTermination+0x58>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	4a0a      	ldr	r2, [pc, #40]	; (80049f8 <prvCheckTasksWaitingTermination+0x58>)
 80049d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049d2:	f000 fbe7 	bl	80051a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f810 	bl	80049fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049dc:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <prvCheckTasksWaitingTermination+0x58>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1e1      	bne.n	80049a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049e4:	bf00      	nop
 80049e6:	bf00      	nop
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	2000049c 	.word	0x2000049c
 80049f4:	200004c8 	.word	0x200004c8
 80049f8:	200004b0 	.word	0x200004b0

080049fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d108      	bne.n	8004a20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 fd44 	bl	80054a0 <vPortFree>
				vPortFree( pxTCB );
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 fd41 	bl	80054a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a1e:	e01a      	b.n	8004a56 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d103      	bne.n	8004a32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 fd38 	bl	80054a0 <vPortFree>
	}
 8004a30:	e011      	b.n	8004a56 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d00c      	beq.n	8004a56 <prvDeleteTCB+0x5a>
	__asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a40:	b672      	cpsid	i
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	b662      	cpsie	i
 8004a50:	60fb      	str	r3, [r7, #12]
}
 8004a52:	bf00      	nop
 8004a54:	e7fe      	b.n	8004a54 <prvDeleteTCB+0x58>
	}
 8004a56:	bf00      	nop
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a66:	4b0c      	ldr	r3, [pc, #48]	; (8004a98 <prvResetNextTaskUnblockTime+0x38>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d104      	bne.n	8004a7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a70:	4b0a      	ldr	r3, [pc, #40]	; (8004a9c <prvResetNextTaskUnblockTime+0x3c>)
 8004a72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a78:	e008      	b.n	8004a8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a7a:	4b07      	ldr	r3, [pc, #28]	; (8004a98 <prvResetNextTaskUnblockTime+0x38>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	4a04      	ldr	r2, [pc, #16]	; (8004a9c <prvResetNextTaskUnblockTime+0x3c>)
 8004a8a:	6013      	str	r3, [r2, #0]
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	20000480 	.word	0x20000480
 8004a9c:	200004e8 	.word	0x200004e8

08004aa0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004aa6:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <xTaskGetSchedulerState+0x34>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d102      	bne.n	8004ab4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	607b      	str	r3, [r7, #4]
 8004ab2:	e008      	b.n	8004ac6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ab4:	4b08      	ldr	r3, [pc, #32]	; (8004ad8 <xTaskGetSchedulerState+0x38>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004abc:	2302      	movs	r3, #2
 8004abe:	607b      	str	r3, [r7, #4]
 8004ac0:	e001      	b.n	8004ac6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ac6:	687b      	ldr	r3, [r7, #4]
	}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	200004d4 	.word	0x200004d4
 8004ad8:	200004f0 	.word	0x200004f0

08004adc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d069      	beq.n	8004bc6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af6:	4b36      	ldr	r3, [pc, #216]	; (8004bd0 <xTaskPriorityInherit+0xf4>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d259      	bcs.n	8004bb4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	db06      	blt.n	8004b16 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b08:	4b31      	ldr	r3, [pc, #196]	; (8004bd0 <xTaskPriorityInherit+0xf4>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0e:	f1c3 0207 	rsb	r2, r3, #7
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	6959      	ldr	r1, [r3, #20]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b1e:	4613      	mov	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4a2b      	ldr	r2, [pc, #172]	; (8004bd4 <xTaskPriorityInherit+0xf8>)
 8004b28:	4413      	add	r3, r2
 8004b2a:	4299      	cmp	r1, r3
 8004b2c:	d13a      	bne.n	8004ba4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	3304      	adds	r3, #4
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fe fdbe 	bl	80036b4 <uxListRemove>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d115      	bne.n	8004b6a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b42:	4924      	ldr	r1, [pc, #144]	; (8004bd4 <xTaskPriorityInherit+0xf8>)
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10a      	bne.n	8004b6a <xTaskPriorityInherit+0x8e>
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	2201      	movs	r2, #1
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	43da      	mvns	r2, r3
 8004b60:	4b1d      	ldr	r3, [pc, #116]	; (8004bd8 <xTaskPriorityInherit+0xfc>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4013      	ands	r3, r2
 8004b66:	4a1c      	ldr	r2, [pc, #112]	; (8004bd8 <xTaskPriorityInherit+0xfc>)
 8004b68:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b6a:	4b19      	ldr	r3, [pc, #100]	; (8004bd0 <xTaskPriorityInherit+0xf4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	2201      	movs	r2, #1
 8004b7a:	409a      	lsls	r2, r3
 8004b7c:	4b16      	ldr	r3, [pc, #88]	; (8004bd8 <xTaskPriorityInherit+0xfc>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	4a15      	ldr	r2, [pc, #84]	; (8004bd8 <xTaskPriorityInherit+0xfc>)
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4a10      	ldr	r2, [pc, #64]	; (8004bd4 <xTaskPriorityInherit+0xf8>)
 8004b94:	441a      	add	r2, r3
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	3304      	adds	r3, #4
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	f7fe fd2c 	bl	80035fa <vListInsertEnd>
 8004ba2:	e004      	b.n	8004bae <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004ba4:	4b0a      	ldr	r3, [pc, #40]	; (8004bd0 <xTaskPriorityInherit+0xf4>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	60fb      	str	r3, [r7, #12]
 8004bb2:	e008      	b.n	8004bc6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bb8:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <xTaskPriorityInherit+0xf4>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d201      	bcs.n	8004bc6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
	}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	200003c8 	.word	0x200003c8
 8004bd4:	200003cc 	.word	0x200003cc
 8004bd8:	200004d0 	.word	0x200004d0

08004bdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d072      	beq.n	8004cd8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004bf2:	4b3c      	ldr	r3, [pc, #240]	; (8004ce4 <xTaskPriorityDisinherit+0x108>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d00c      	beq.n	8004c16 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c00:	b672      	cpsid	i
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	b662      	cpsie	i
 8004c10:	60fb      	str	r3, [r7, #12]
}
 8004c12:	bf00      	nop
 8004c14:	e7fe      	b.n	8004c14 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10c      	bne.n	8004c38 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c22:	b672      	cpsid	i
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	b662      	cpsie	i
 8004c32:	60bb      	str	r3, [r7, #8]
}
 8004c34:	bf00      	nop
 8004c36:	e7fe      	b.n	8004c36 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c3c:	1e5a      	subs	r2, r3, #1
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d044      	beq.n	8004cd8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d140      	bne.n	8004cd8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fe fd2a 	bl	80036b4 <uxListRemove>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d115      	bne.n	8004c92 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6a:	491f      	ldr	r1, [pc, #124]	; (8004ce8 <xTaskPriorityDisinherit+0x10c>)
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10a      	bne.n	8004c92 <xTaskPriorityDisinherit+0xb6>
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	2201      	movs	r2, #1
 8004c82:	fa02 f303 	lsl.w	r3, r2, r3
 8004c86:	43da      	mvns	r2, r3
 8004c88:	4b18      	ldr	r3, [pc, #96]	; (8004cec <xTaskPriorityDisinherit+0x110>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	4a17      	ldr	r2, [pc, #92]	; (8004cec <xTaskPriorityDisinherit+0x110>)
 8004c90:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	f1c3 0207 	rsb	r2, r3, #7
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	2201      	movs	r2, #1
 8004cac:	409a      	lsls	r2, r3
 8004cae:	4b0f      	ldr	r3, [pc, #60]	; (8004cec <xTaskPriorityDisinherit+0x110>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	4a0d      	ldr	r2, [pc, #52]	; (8004cec <xTaskPriorityDisinherit+0x110>)
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4a08      	ldr	r2, [pc, #32]	; (8004ce8 <xTaskPriorityDisinherit+0x10c>)
 8004cc6:	441a      	add	r2, r3
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	3304      	adds	r3, #4
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f7fe fc93 	bl	80035fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004cd8:	697b      	ldr	r3, [r7, #20]
	}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	200003c8 	.word	0x200003c8
 8004ce8:	200003cc 	.word	0x200003cc
 8004cec:	200004d0 	.word	0x200004d0

08004cf0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 8087 	beq.w	8004e18 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10c      	bne.n	8004d2c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d16:	b672      	cpsid	i
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	b662      	cpsie	i
 8004d26:	60fb      	str	r3, [r7, #12]
}
 8004d28:	bf00      	nop
 8004d2a:	e7fe      	b.n	8004d2a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d902      	bls.n	8004d3c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	61fb      	str	r3, [r7, #28]
 8004d3a:	e002      	b.n	8004d42 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d40:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d46:	69fa      	ldr	r2, [r7, #28]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d065      	beq.n	8004e18 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d160      	bne.n	8004e18 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004d56:	4b32      	ldr	r3, [pc, #200]	; (8004e20 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d10c      	bne.n	8004d7a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	b672      	cpsid	i
 8004d66:	f383 8811 	msr	BASEPRI, r3
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	b662      	cpsie	i
 8004d74:	60bb      	str	r3, [r7, #8]
}
 8004d76:	bf00      	nop
 8004d78:	e7fe      	b.n	8004d78 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	db04      	blt.n	8004d98 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	f1c3 0207 	rsb	r2, r3, #7
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	6959      	ldr	r1, [r3, #20]
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4a1f      	ldr	r2, [pc, #124]	; (8004e24 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004da8:	4413      	add	r3, r2
 8004daa:	4299      	cmp	r1, r3
 8004dac:	d134      	bne.n	8004e18 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	3304      	adds	r3, #4
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fe fc7e 	bl	80036b4 <uxListRemove>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d115      	bne.n	8004dea <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc2:	4918      	ldr	r1, [pc, #96]	; (8004e24 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	440b      	add	r3, r1
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10a      	bne.n	8004dea <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd8:	2201      	movs	r2, #1
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	43da      	mvns	r2, r3
 8004de0:	4b11      	ldr	r3, [pc, #68]	; (8004e28 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4013      	ands	r3, r2
 8004de6:	4a10      	ldr	r2, [pc, #64]	; (8004e28 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004de8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dee:	2201      	movs	r2, #1
 8004df0:	409a      	lsls	r2, r3
 8004df2:	4b0d      	ldr	r3, [pc, #52]	; (8004e28 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	4a0b      	ldr	r2, [pc, #44]	; (8004e28 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004dfa:	6013      	str	r3, [r2, #0]
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e00:	4613      	mov	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4a06      	ldr	r2, [pc, #24]	; (8004e24 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004e0a:	441a      	add	r2, r3
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	4619      	mov	r1, r3
 8004e12:	4610      	mov	r0, r2
 8004e14:	f7fe fbf1 	bl	80035fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e18:	bf00      	nop
 8004e1a:	3720      	adds	r7, #32
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	200003c8 	.word	0x200003c8
 8004e24:	200003cc 	.word	0x200003cc
 8004e28:	200004d0 	.word	0x200004d0

08004e2c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004e30:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <pvTaskIncrementMutexHeldCount+0x24>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d004      	beq.n	8004e42 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004e38:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <pvTaskIncrementMutexHeldCount+0x24>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e3e:	3201      	adds	r2, #1
 8004e40:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004e42:	4b03      	ldr	r3, [pc, #12]	; (8004e50 <pvTaskIncrementMutexHeldCount+0x24>)
 8004e44:	681b      	ldr	r3, [r3, #0]
	}
 8004e46:	4618      	mov	r0, r3
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	200003c8 	.word	0x200003c8

08004e54 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e5e:	4b29      	ldr	r3, [pc, #164]	; (8004f04 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e64:	4b28      	ldr	r3, [pc, #160]	; (8004f08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	3304      	adds	r3, #4
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fe fc22 	bl	80036b4 <uxListRemove>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10b      	bne.n	8004e8e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004e76:	4b24      	ldr	r3, [pc, #144]	; (8004f08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	43da      	mvns	r2, r3
 8004e84:	4b21      	ldr	r3, [pc, #132]	; (8004f0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	4a20      	ldr	r2, [pc, #128]	; (8004f0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e8c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e94:	d10a      	bne.n	8004eac <prvAddCurrentTaskToDelayedList+0x58>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d007      	beq.n	8004eac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e9c:	4b1a      	ldr	r3, [pc, #104]	; (8004f08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	481a      	ldr	r0, [pc, #104]	; (8004f10 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004ea6:	f7fe fba8 	bl	80035fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004eaa:	e026      	b.n	8004efa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004eb4:	4b14      	ldr	r3, [pc, #80]	; (8004f08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d209      	bcs.n	8004ed8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ec4:	4b13      	ldr	r3, [pc, #76]	; (8004f14 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	4b0f      	ldr	r3, [pc, #60]	; (8004f08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3304      	adds	r3, #4
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	f7fe fbb6 	bl	8003642 <vListInsert>
}
 8004ed6:	e010      	b.n	8004efa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ed8:	4b0f      	ldr	r3, [pc, #60]	; (8004f18 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	f7fe fbac 	bl	8003642 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004eea:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d202      	bcs.n	8004efa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004ef4:	4a09      	ldr	r2, [pc, #36]	; (8004f1c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	6013      	str	r3, [r2, #0]
}
 8004efa:	bf00      	nop
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	200004cc 	.word	0x200004cc
 8004f08:	200003c8 	.word	0x200003c8
 8004f0c:	200004d0 	.word	0x200004d0
 8004f10:	200004b4 	.word	0x200004b4
 8004f14:	20000484 	.word	0x20000484
 8004f18:	20000480 	.word	0x20000480
 8004f1c:	200004e8 	.word	0x200004e8

08004f20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3b04      	subs	r3, #4
 8004f30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	3b04      	subs	r3, #4
 8004f3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f023 0201 	bic.w	r2, r3, #1
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	3b04      	subs	r3, #4
 8004f4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f50:	4a0c      	ldr	r2, [pc, #48]	; (8004f84 <pxPortInitialiseStack+0x64>)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	3b14      	subs	r3, #20
 8004f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3b04      	subs	r3, #4
 8004f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f06f 0202 	mvn.w	r2, #2
 8004f6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3b20      	subs	r3, #32
 8004f74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f76:	68fb      	ldr	r3, [r7, #12]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	08004f89 	.word	0x08004f89

08004f88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f92:	4b14      	ldr	r3, [pc, #80]	; (8004fe4 <prvTaskExitError+0x5c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f9a:	d00c      	beq.n	8004fb6 <prvTaskExitError+0x2e>
	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa0:	b672      	cpsid	i
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	b662      	cpsie	i
 8004fb0:	60fb      	str	r3, [r7, #12]
}
 8004fb2:	bf00      	nop
 8004fb4:	e7fe      	b.n	8004fb4 <prvTaskExitError+0x2c>
	__asm volatile
 8004fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fba:	b672      	cpsid	i
 8004fbc:	f383 8811 	msr	BASEPRI, r3
 8004fc0:	f3bf 8f6f 	isb	sy
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	b662      	cpsie	i
 8004fca:	60bb      	str	r3, [r7, #8]
}
 8004fcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fce:	bf00      	nop
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0fc      	beq.n	8004fd0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fd6:	bf00      	nop
 8004fd8:	bf00      	nop
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	2000000c 	.word	0x2000000c
	...

08004ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ff0:	4b07      	ldr	r3, [pc, #28]	; (8005010 <pxCurrentTCBConst2>)
 8004ff2:	6819      	ldr	r1, [r3, #0]
 8004ff4:	6808      	ldr	r0, [r1, #0]
 8004ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ffa:	f380 8809 	msr	PSP, r0
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f04f 0000 	mov.w	r0, #0
 8005006:	f380 8811 	msr	BASEPRI, r0
 800500a:	4770      	bx	lr
 800500c:	f3af 8000 	nop.w

08005010 <pxCurrentTCBConst2>:
 8005010:	200003c8 	.word	0x200003c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005014:	bf00      	nop
 8005016:	bf00      	nop

08005018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005018:	4808      	ldr	r0, [pc, #32]	; (800503c <prvPortStartFirstTask+0x24>)
 800501a:	6800      	ldr	r0, [r0, #0]
 800501c:	6800      	ldr	r0, [r0, #0]
 800501e:	f380 8808 	msr	MSP, r0
 8005022:	f04f 0000 	mov.w	r0, #0
 8005026:	f380 8814 	msr	CONTROL, r0
 800502a:	b662      	cpsie	i
 800502c:	b661      	cpsie	f
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	df00      	svc	0
 8005038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800503a:	bf00      	nop
 800503c:	e000ed08 	.word	0xe000ed08

08005040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005046:	4b37      	ldr	r3, [pc, #220]	; (8005124 <xPortStartScheduler+0xe4>)
 8005048:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	b2db      	uxtb	r3, r3
 8005050:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	22ff      	movs	r2, #255	; 0xff
 8005056:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005068:	b2da      	uxtb	r2, r3
 800506a:	4b2f      	ldr	r3, [pc, #188]	; (8005128 <xPortStartScheduler+0xe8>)
 800506c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800506e:	4b2f      	ldr	r3, [pc, #188]	; (800512c <xPortStartScheduler+0xec>)
 8005070:	2207      	movs	r2, #7
 8005072:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005074:	e009      	b.n	800508a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005076:	4b2d      	ldr	r3, [pc, #180]	; (800512c <xPortStartScheduler+0xec>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3b01      	subs	r3, #1
 800507c:	4a2b      	ldr	r2, [pc, #172]	; (800512c <xPortStartScheduler+0xec>)
 800507e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005080:	78fb      	ldrb	r3, [r7, #3]
 8005082:	b2db      	uxtb	r3, r3
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	b2db      	uxtb	r3, r3
 8005088:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800508a:	78fb      	ldrb	r3, [r7, #3]
 800508c:	b2db      	uxtb	r3, r3
 800508e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005092:	2b80      	cmp	r3, #128	; 0x80
 8005094:	d0ef      	beq.n	8005076 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005096:	4b25      	ldr	r3, [pc, #148]	; (800512c <xPortStartScheduler+0xec>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f1c3 0307 	rsb	r3, r3, #7
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d00c      	beq.n	80050bc <xPortStartScheduler+0x7c>
	__asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a6:	b672      	cpsid	i
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	b662      	cpsie	i
 80050b6:	60bb      	str	r3, [r7, #8]
}
 80050b8:	bf00      	nop
 80050ba:	e7fe      	b.n	80050ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050bc:	4b1b      	ldr	r3, [pc, #108]	; (800512c <xPortStartScheduler+0xec>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	021b      	lsls	r3, r3, #8
 80050c2:	4a1a      	ldr	r2, [pc, #104]	; (800512c <xPortStartScheduler+0xec>)
 80050c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050c6:	4b19      	ldr	r3, [pc, #100]	; (800512c <xPortStartScheduler+0xec>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050ce:	4a17      	ldr	r2, [pc, #92]	; (800512c <xPortStartScheduler+0xec>)
 80050d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050da:	4b15      	ldr	r3, [pc, #84]	; (8005130 <xPortStartScheduler+0xf0>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a14      	ldr	r2, [pc, #80]	; (8005130 <xPortStartScheduler+0xf0>)
 80050e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050e6:	4b12      	ldr	r3, [pc, #72]	; (8005130 <xPortStartScheduler+0xf0>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a11      	ldr	r2, [pc, #68]	; (8005130 <xPortStartScheduler+0xf0>)
 80050ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050f2:	f000 f8dd 	bl	80052b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050f6:	4b0f      	ldr	r3, [pc, #60]	; (8005134 <xPortStartScheduler+0xf4>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80050fc:	f000 f8fc 	bl	80052f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005100:	4b0d      	ldr	r3, [pc, #52]	; (8005138 <xPortStartScheduler+0xf8>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a0c      	ldr	r2, [pc, #48]	; (8005138 <xPortStartScheduler+0xf8>)
 8005106:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800510a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800510c:	f7ff ff84 	bl	8005018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005110:	f7ff fa7e 	bl	8004610 <vTaskSwitchContext>
	prvTaskExitError();
 8005114:	f7ff ff38 	bl	8004f88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	e000e400 	.word	0xe000e400
 8005128:	200004f4 	.word	0x200004f4
 800512c:	200004f8 	.word	0x200004f8
 8005130:	e000ed20 	.word	0xe000ed20
 8005134:	2000000c 	.word	0x2000000c
 8005138:	e000ef34 	.word	0xe000ef34

0800513c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
	__asm volatile
 8005142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005146:	b672      	cpsid	i
 8005148:	f383 8811 	msr	BASEPRI, r3
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	b662      	cpsie	i
 8005156:	607b      	str	r3, [r7, #4]
}
 8005158:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800515a:	4b10      	ldr	r3, [pc, #64]	; (800519c <vPortEnterCritical+0x60>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3301      	adds	r3, #1
 8005160:	4a0e      	ldr	r2, [pc, #56]	; (800519c <vPortEnterCritical+0x60>)
 8005162:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005164:	4b0d      	ldr	r3, [pc, #52]	; (800519c <vPortEnterCritical+0x60>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d111      	bne.n	8005190 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800516c:	4b0c      	ldr	r3, [pc, #48]	; (80051a0 <vPortEnterCritical+0x64>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00c      	beq.n	8005190 <vPortEnterCritical+0x54>
	__asm volatile
 8005176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517a:	b672      	cpsid	i
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	b662      	cpsie	i
 800518a:	603b      	str	r3, [r7, #0]
}
 800518c:	bf00      	nop
 800518e:	e7fe      	b.n	800518e <vPortEnterCritical+0x52>
	}
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	2000000c 	.word	0x2000000c
 80051a0:	e000ed04 	.word	0xe000ed04

080051a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051aa:	4b13      	ldr	r3, [pc, #76]	; (80051f8 <vPortExitCritical+0x54>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10c      	bne.n	80051cc <vPortExitCritical+0x28>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	b672      	cpsid	i
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	b662      	cpsie	i
 80051c6:	607b      	str	r3, [r7, #4]
}
 80051c8:	bf00      	nop
 80051ca:	e7fe      	b.n	80051ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80051cc:	4b0a      	ldr	r3, [pc, #40]	; (80051f8 <vPortExitCritical+0x54>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3b01      	subs	r3, #1
 80051d2:	4a09      	ldr	r2, [pc, #36]	; (80051f8 <vPortExitCritical+0x54>)
 80051d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051d6:	4b08      	ldr	r3, [pc, #32]	; (80051f8 <vPortExitCritical+0x54>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d105      	bne.n	80051ea <vPortExitCritical+0x46>
 80051de:	2300      	movs	r3, #0
 80051e0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	2000000c 	.word	0x2000000c
 80051fc:	00000000 	.word	0x00000000

08005200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005200:	f3ef 8009 	mrs	r0, PSP
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	4b15      	ldr	r3, [pc, #84]	; (8005260 <pxCurrentTCBConst>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	f01e 0f10 	tst.w	lr, #16
 8005210:	bf08      	it	eq
 8005212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800521a:	6010      	str	r0, [r2, #0]
 800521c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005220:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005224:	b672      	cpsid	i
 8005226:	f380 8811 	msr	BASEPRI, r0
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	b662      	cpsie	i
 8005234:	f7ff f9ec 	bl	8004610 <vTaskSwitchContext>
 8005238:	f04f 0000 	mov.w	r0, #0
 800523c:	f380 8811 	msr	BASEPRI, r0
 8005240:	bc09      	pop	{r0, r3}
 8005242:	6819      	ldr	r1, [r3, #0]
 8005244:	6808      	ldr	r0, [r1, #0]
 8005246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800524a:	f01e 0f10 	tst.w	lr, #16
 800524e:	bf08      	it	eq
 8005250:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005254:	f380 8809 	msr	PSP, r0
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop

08005260 <pxCurrentTCBConst>:
 8005260:	200003c8 	.word	0x200003c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop

08005268 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
	__asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005272:	b672      	cpsid	i
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	b662      	cpsie	i
 8005282:	607b      	str	r3, [r7, #4]
}
 8005284:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005286:	f7ff f909 	bl	800449c <xTaskIncrementTick>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005290:	4b06      	ldr	r3, [pc, #24]	; (80052ac <SysTick_Handler+0x44>)
 8005292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	2300      	movs	r3, #0
 800529a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	f383 8811 	msr	BASEPRI, r3
}
 80052a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80052a4:	bf00      	nop
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	e000ed04 	.word	0xe000ed04

080052b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052b4:	4b0b      	ldr	r3, [pc, #44]	; (80052e4 <vPortSetupTimerInterrupt+0x34>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052ba:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <vPortSetupTimerInterrupt+0x38>)
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052c0:	4b0a      	ldr	r3, [pc, #40]	; (80052ec <vPortSetupTimerInterrupt+0x3c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a0a      	ldr	r2, [pc, #40]	; (80052f0 <vPortSetupTimerInterrupt+0x40>)
 80052c6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ca:	099b      	lsrs	r3, r3, #6
 80052cc:	4a09      	ldr	r2, [pc, #36]	; (80052f4 <vPortSetupTimerInterrupt+0x44>)
 80052ce:	3b01      	subs	r3, #1
 80052d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052d2:	4b04      	ldr	r3, [pc, #16]	; (80052e4 <vPortSetupTimerInterrupt+0x34>)
 80052d4:	2207      	movs	r2, #7
 80052d6:	601a      	str	r2, [r3, #0]
}
 80052d8:	bf00      	nop
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	e000e010 	.word	0xe000e010
 80052e8:	e000e018 	.word	0xe000e018
 80052ec:	20000000 	.word	0x20000000
 80052f0:	10624dd3 	.word	0x10624dd3
 80052f4:	e000e014 	.word	0xe000e014

080052f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80052f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005308 <vPortEnableVFP+0x10>
 80052fc:	6801      	ldr	r1, [r0, #0]
 80052fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005302:	6001      	str	r1, [r0, #0]
 8005304:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005306:	bf00      	nop
 8005308:	e000ed88 	.word	0xe000ed88

0800530c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08a      	sub	sp, #40	; 0x28
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005314:	2300      	movs	r3, #0
 8005316:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005318:	f7ff f814 	bl	8004344 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800531c:	4b5b      	ldr	r3, [pc, #364]	; (800548c <pvPortMalloc+0x180>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005324:	f000 f91a 	bl	800555c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005328:	4b59      	ldr	r3, [pc, #356]	; (8005490 <pvPortMalloc+0x184>)
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4013      	ands	r3, r2
 8005330:	2b00      	cmp	r3, #0
 8005332:	f040 8092 	bne.w	800545a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01f      	beq.n	800537c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800533c:	2208      	movs	r2, #8
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4413      	add	r3, r2
 8005342:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	2b00      	cmp	r3, #0
 800534c:	d016      	beq.n	800537c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f023 0307 	bic.w	r3, r3, #7
 8005354:	3308      	adds	r3, #8
 8005356:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00c      	beq.n	800537c <pvPortMalloc+0x70>
	__asm volatile
 8005362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005366:	b672      	cpsid	i
 8005368:	f383 8811 	msr	BASEPRI, r3
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	b662      	cpsie	i
 8005376:	617b      	str	r3, [r7, #20]
}
 8005378:	bf00      	nop
 800537a:	e7fe      	b.n	800537a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d06b      	beq.n	800545a <pvPortMalloc+0x14e>
 8005382:	4b44      	ldr	r3, [pc, #272]	; (8005494 <pvPortMalloc+0x188>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	429a      	cmp	r2, r3
 800538a:	d866      	bhi.n	800545a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800538c:	4b42      	ldr	r3, [pc, #264]	; (8005498 <pvPortMalloc+0x18c>)
 800538e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005390:	4b41      	ldr	r3, [pc, #260]	; (8005498 <pvPortMalloc+0x18c>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005396:	e004      	b.n	80053a2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d903      	bls.n	80053b4 <pvPortMalloc+0xa8>
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1f1      	bne.n	8005398 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053b4:	4b35      	ldr	r3, [pc, #212]	; (800548c <pvPortMalloc+0x180>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d04d      	beq.n	800545a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2208      	movs	r2, #8
 80053c4:	4413      	add	r3, r2
 80053c6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	1ad2      	subs	r2, r2, r3
 80053d8:	2308      	movs	r3, #8
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	429a      	cmp	r2, r3
 80053de:	d921      	bls.n	8005424 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4413      	add	r3, r2
 80053e6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	f003 0307 	and.w	r3, r3, #7
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00c      	beq.n	800540c <pvPortMalloc+0x100>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f6:	b672      	cpsid	i
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	b662      	cpsie	i
 8005406:	613b      	str	r3, [r7, #16]
}
 8005408:	bf00      	nop
 800540a:	e7fe      	b.n	800540a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	1ad2      	subs	r2, r2, r3
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800541e:	69b8      	ldr	r0, [r7, #24]
 8005420:	f000 f8fe 	bl	8005620 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005424:	4b1b      	ldr	r3, [pc, #108]	; (8005494 <pvPortMalloc+0x188>)
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	4a19      	ldr	r2, [pc, #100]	; (8005494 <pvPortMalloc+0x188>)
 8005430:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005432:	4b18      	ldr	r3, [pc, #96]	; (8005494 <pvPortMalloc+0x188>)
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	4b19      	ldr	r3, [pc, #100]	; (800549c <pvPortMalloc+0x190>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	429a      	cmp	r2, r3
 800543c:	d203      	bcs.n	8005446 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800543e:	4b15      	ldr	r3, [pc, #84]	; (8005494 <pvPortMalloc+0x188>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a16      	ldr	r2, [pc, #88]	; (800549c <pvPortMalloc+0x190>)
 8005444:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	4b11      	ldr	r3, [pc, #68]	; (8005490 <pvPortMalloc+0x184>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	431a      	orrs	r2, r3
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800545a:	f7fe ff81 	bl	8004360 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00c      	beq.n	8005482 <pvPortMalloc+0x176>
	__asm volatile
 8005468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546c:	b672      	cpsid	i
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	b662      	cpsie	i
 800547c:	60fb      	str	r3, [r7, #12]
}
 800547e:	bf00      	nop
 8005480:	e7fe      	b.n	8005480 <pvPortMalloc+0x174>
	return pvReturn;
 8005482:	69fb      	ldr	r3, [r7, #28]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3728      	adds	r7, #40	; 0x28
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	20004104 	.word	0x20004104
 8005490:	20004110 	.word	0x20004110
 8005494:	20004108 	.word	0x20004108
 8005498:	200040fc 	.word	0x200040fc
 800549c:	2000410c 	.word	0x2000410c

080054a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d04c      	beq.n	800554c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054b2:	2308      	movs	r3, #8
 80054b4:	425b      	negs	r3, r3
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	4413      	add	r3, r2
 80054ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	4b23      	ldr	r3, [pc, #140]	; (8005554 <vPortFree+0xb4>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4013      	ands	r3, r2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10c      	bne.n	80054e8 <vPortFree+0x48>
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	b672      	cpsid	i
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	b662      	cpsie	i
 80054e2:	60fb      	str	r3, [r7, #12]
}
 80054e4:	bf00      	nop
 80054e6:	e7fe      	b.n	80054e6 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00c      	beq.n	800550a <vPortFree+0x6a>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f4:	b672      	cpsid	i
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	b662      	cpsie	i
 8005504:	60bb      	str	r3, [r7, #8]
}
 8005506:	bf00      	nop
 8005508:	e7fe      	b.n	8005508 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	4b11      	ldr	r3, [pc, #68]	; (8005554 <vPortFree+0xb4>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4013      	ands	r3, r2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d019      	beq.n	800554c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d115      	bne.n	800554c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	4b0b      	ldr	r3, [pc, #44]	; (8005554 <vPortFree+0xb4>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	43db      	mvns	r3, r3
 800552a:	401a      	ands	r2, r3
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005530:	f7fe ff08 	bl	8004344 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	4b07      	ldr	r3, [pc, #28]	; (8005558 <vPortFree+0xb8>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4413      	add	r3, r2
 800553e:	4a06      	ldr	r2, [pc, #24]	; (8005558 <vPortFree+0xb8>)
 8005540:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005542:	6938      	ldr	r0, [r7, #16]
 8005544:	f000 f86c 	bl	8005620 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005548:	f7fe ff0a 	bl	8004360 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800554c:	bf00      	nop
 800554e:	3718      	adds	r7, #24
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	20004110 	.word	0x20004110
 8005558:	20004108 	.word	0x20004108

0800555c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005562:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005566:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005568:	4b27      	ldr	r3, [pc, #156]	; (8005608 <prvHeapInit+0xac>)
 800556a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00c      	beq.n	8005590 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	3307      	adds	r3, #7
 800557a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0307 	bic.w	r3, r3, #7
 8005582:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	4a1f      	ldr	r2, [pc, #124]	; (8005608 <prvHeapInit+0xac>)
 800558c:	4413      	add	r3, r2
 800558e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005594:	4a1d      	ldr	r2, [pc, #116]	; (800560c <prvHeapInit+0xb0>)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800559a:	4b1c      	ldr	r3, [pc, #112]	; (800560c <prvHeapInit+0xb0>)
 800559c:	2200      	movs	r2, #0
 800559e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	4413      	add	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80055a8:	2208      	movs	r2, #8
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	1a9b      	subs	r3, r3, r2
 80055ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0307 	bic.w	r3, r3, #7
 80055b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4a15      	ldr	r2, [pc, #84]	; (8005610 <prvHeapInit+0xb4>)
 80055bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055be:	4b14      	ldr	r3, [pc, #80]	; (8005610 <prvHeapInit+0xb4>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2200      	movs	r2, #0
 80055c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055c6:	4b12      	ldr	r3, [pc, #72]	; (8005610 <prvHeapInit+0xb4>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	1ad2      	subs	r2, r2, r3
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055dc:	4b0c      	ldr	r3, [pc, #48]	; (8005610 <prvHeapInit+0xb4>)
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	4a0a      	ldr	r2, [pc, #40]	; (8005614 <prvHeapInit+0xb8>)
 80055ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	4a09      	ldr	r2, [pc, #36]	; (8005618 <prvHeapInit+0xbc>)
 80055f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055f4:	4b09      	ldr	r3, [pc, #36]	; (800561c <prvHeapInit+0xc0>)
 80055f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80055fa:	601a      	str	r2, [r3, #0]
}
 80055fc:	bf00      	nop
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	200004fc 	.word	0x200004fc
 800560c:	200040fc 	.word	0x200040fc
 8005610:	20004104 	.word	0x20004104
 8005614:	2000410c 	.word	0x2000410c
 8005618:	20004108 	.word	0x20004108
 800561c:	20004110 	.word	0x20004110

08005620 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005628:	4b28      	ldr	r3, [pc, #160]	; (80056cc <prvInsertBlockIntoFreeList+0xac>)
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	e002      	b.n	8005634 <prvInsertBlockIntoFreeList+0x14>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	429a      	cmp	r2, r3
 800563c:	d8f7      	bhi.n	800562e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	4413      	add	r3, r2
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	429a      	cmp	r2, r3
 800564e:	d108      	bne.n	8005662 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	441a      	add	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	441a      	add	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	429a      	cmp	r2, r3
 8005674:	d118      	bne.n	80056a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	4b15      	ldr	r3, [pc, #84]	; (80056d0 <prvInsertBlockIntoFreeList+0xb0>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d00d      	beq.n	800569e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	441a      	add	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	e008      	b.n	80056b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800569e:	4b0c      	ldr	r3, [pc, #48]	; (80056d0 <prvInsertBlockIntoFreeList+0xb0>)
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	e003      	b.n	80056b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d002      	beq.n	80056be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056be:	bf00      	nop
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	200040fc 	.word	0x200040fc
 80056d0:	20004104 	.word	0x20004104

080056d4 <__errno>:
 80056d4:	4b01      	ldr	r3, [pc, #4]	; (80056dc <__errno+0x8>)
 80056d6:	6818      	ldr	r0, [r3, #0]
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	20000010 	.word	0x20000010

080056e0 <__libc_init_array>:
 80056e0:	b570      	push	{r4, r5, r6, lr}
 80056e2:	4d0d      	ldr	r5, [pc, #52]	; (8005718 <__libc_init_array+0x38>)
 80056e4:	4c0d      	ldr	r4, [pc, #52]	; (800571c <__libc_init_array+0x3c>)
 80056e6:	1b64      	subs	r4, r4, r5
 80056e8:	10a4      	asrs	r4, r4, #2
 80056ea:	2600      	movs	r6, #0
 80056ec:	42a6      	cmp	r6, r4
 80056ee:	d109      	bne.n	8005704 <__libc_init_array+0x24>
 80056f0:	4d0b      	ldr	r5, [pc, #44]	; (8005720 <__libc_init_array+0x40>)
 80056f2:	4c0c      	ldr	r4, [pc, #48]	; (8005724 <__libc_init_array+0x44>)
 80056f4:	f001 f832 	bl	800675c <_init>
 80056f8:	1b64      	subs	r4, r4, r5
 80056fa:	10a4      	asrs	r4, r4, #2
 80056fc:	2600      	movs	r6, #0
 80056fe:	42a6      	cmp	r6, r4
 8005700:	d105      	bne.n	800570e <__libc_init_array+0x2e>
 8005702:	bd70      	pop	{r4, r5, r6, pc}
 8005704:	f855 3b04 	ldr.w	r3, [r5], #4
 8005708:	4798      	blx	r3
 800570a:	3601      	adds	r6, #1
 800570c:	e7ee      	b.n	80056ec <__libc_init_array+0xc>
 800570e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005712:	4798      	blx	r3
 8005714:	3601      	adds	r6, #1
 8005716:	e7f2      	b.n	80056fe <__libc_init_array+0x1e>
 8005718:	080068f4 	.word	0x080068f4
 800571c:	080068f4 	.word	0x080068f4
 8005720:	080068f4 	.word	0x080068f4
 8005724:	080068f8 	.word	0x080068f8

08005728 <memcpy>:
 8005728:	440a      	add	r2, r1
 800572a:	4291      	cmp	r1, r2
 800572c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005730:	d100      	bne.n	8005734 <memcpy+0xc>
 8005732:	4770      	bx	lr
 8005734:	b510      	push	{r4, lr}
 8005736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800573a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800573e:	4291      	cmp	r1, r2
 8005740:	d1f9      	bne.n	8005736 <memcpy+0xe>
 8005742:	bd10      	pop	{r4, pc}

08005744 <memset>:
 8005744:	4402      	add	r2, r0
 8005746:	4603      	mov	r3, r0
 8005748:	4293      	cmp	r3, r2
 800574a:	d100      	bne.n	800574e <memset+0xa>
 800574c:	4770      	bx	lr
 800574e:	f803 1b01 	strb.w	r1, [r3], #1
 8005752:	e7f9      	b.n	8005748 <memset+0x4>

08005754 <iprintf>:
 8005754:	b40f      	push	{r0, r1, r2, r3}
 8005756:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <iprintf+0x2c>)
 8005758:	b513      	push	{r0, r1, r4, lr}
 800575a:	681c      	ldr	r4, [r3, #0]
 800575c:	b124      	cbz	r4, 8005768 <iprintf+0x14>
 800575e:	69a3      	ldr	r3, [r4, #24]
 8005760:	b913      	cbnz	r3, 8005768 <iprintf+0x14>
 8005762:	4620      	mov	r0, r4
 8005764:	f000 fa5e 	bl	8005c24 <__sinit>
 8005768:	ab05      	add	r3, sp, #20
 800576a:	9a04      	ldr	r2, [sp, #16]
 800576c:	68a1      	ldr	r1, [r4, #8]
 800576e:	9301      	str	r3, [sp, #4]
 8005770:	4620      	mov	r0, r4
 8005772:	f000 fc67 	bl	8006044 <_vfiprintf_r>
 8005776:	b002      	add	sp, #8
 8005778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800577c:	b004      	add	sp, #16
 800577e:	4770      	bx	lr
 8005780:	20000010 	.word	0x20000010

08005784 <_puts_r>:
 8005784:	b570      	push	{r4, r5, r6, lr}
 8005786:	460e      	mov	r6, r1
 8005788:	4605      	mov	r5, r0
 800578a:	b118      	cbz	r0, 8005794 <_puts_r+0x10>
 800578c:	6983      	ldr	r3, [r0, #24]
 800578e:	b90b      	cbnz	r3, 8005794 <_puts_r+0x10>
 8005790:	f000 fa48 	bl	8005c24 <__sinit>
 8005794:	69ab      	ldr	r3, [r5, #24]
 8005796:	68ac      	ldr	r4, [r5, #8]
 8005798:	b913      	cbnz	r3, 80057a0 <_puts_r+0x1c>
 800579a:	4628      	mov	r0, r5
 800579c:	f000 fa42 	bl	8005c24 <__sinit>
 80057a0:	4b2c      	ldr	r3, [pc, #176]	; (8005854 <_puts_r+0xd0>)
 80057a2:	429c      	cmp	r4, r3
 80057a4:	d120      	bne.n	80057e8 <_puts_r+0x64>
 80057a6:	686c      	ldr	r4, [r5, #4]
 80057a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057aa:	07db      	lsls	r3, r3, #31
 80057ac:	d405      	bmi.n	80057ba <_puts_r+0x36>
 80057ae:	89a3      	ldrh	r3, [r4, #12]
 80057b0:	0598      	lsls	r0, r3, #22
 80057b2:	d402      	bmi.n	80057ba <_puts_r+0x36>
 80057b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057b6:	f000 fad3 	bl	8005d60 <__retarget_lock_acquire_recursive>
 80057ba:	89a3      	ldrh	r3, [r4, #12]
 80057bc:	0719      	lsls	r1, r3, #28
 80057be:	d51d      	bpl.n	80057fc <_puts_r+0x78>
 80057c0:	6923      	ldr	r3, [r4, #16]
 80057c2:	b1db      	cbz	r3, 80057fc <_puts_r+0x78>
 80057c4:	3e01      	subs	r6, #1
 80057c6:	68a3      	ldr	r3, [r4, #8]
 80057c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80057cc:	3b01      	subs	r3, #1
 80057ce:	60a3      	str	r3, [r4, #8]
 80057d0:	bb39      	cbnz	r1, 8005822 <_puts_r+0x9e>
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	da38      	bge.n	8005848 <_puts_r+0xc4>
 80057d6:	4622      	mov	r2, r4
 80057d8:	210a      	movs	r1, #10
 80057da:	4628      	mov	r0, r5
 80057dc:	f000 f848 	bl	8005870 <__swbuf_r>
 80057e0:	3001      	adds	r0, #1
 80057e2:	d011      	beq.n	8005808 <_puts_r+0x84>
 80057e4:	250a      	movs	r5, #10
 80057e6:	e011      	b.n	800580c <_puts_r+0x88>
 80057e8:	4b1b      	ldr	r3, [pc, #108]	; (8005858 <_puts_r+0xd4>)
 80057ea:	429c      	cmp	r4, r3
 80057ec:	d101      	bne.n	80057f2 <_puts_r+0x6e>
 80057ee:	68ac      	ldr	r4, [r5, #8]
 80057f0:	e7da      	b.n	80057a8 <_puts_r+0x24>
 80057f2:	4b1a      	ldr	r3, [pc, #104]	; (800585c <_puts_r+0xd8>)
 80057f4:	429c      	cmp	r4, r3
 80057f6:	bf08      	it	eq
 80057f8:	68ec      	ldreq	r4, [r5, #12]
 80057fa:	e7d5      	b.n	80057a8 <_puts_r+0x24>
 80057fc:	4621      	mov	r1, r4
 80057fe:	4628      	mov	r0, r5
 8005800:	f000 f888 	bl	8005914 <__swsetup_r>
 8005804:	2800      	cmp	r0, #0
 8005806:	d0dd      	beq.n	80057c4 <_puts_r+0x40>
 8005808:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800580c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800580e:	07da      	lsls	r2, r3, #31
 8005810:	d405      	bmi.n	800581e <_puts_r+0x9a>
 8005812:	89a3      	ldrh	r3, [r4, #12]
 8005814:	059b      	lsls	r3, r3, #22
 8005816:	d402      	bmi.n	800581e <_puts_r+0x9a>
 8005818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800581a:	f000 faa2 	bl	8005d62 <__retarget_lock_release_recursive>
 800581e:	4628      	mov	r0, r5
 8005820:	bd70      	pop	{r4, r5, r6, pc}
 8005822:	2b00      	cmp	r3, #0
 8005824:	da04      	bge.n	8005830 <_puts_r+0xac>
 8005826:	69a2      	ldr	r2, [r4, #24]
 8005828:	429a      	cmp	r2, r3
 800582a:	dc06      	bgt.n	800583a <_puts_r+0xb6>
 800582c:	290a      	cmp	r1, #10
 800582e:	d004      	beq.n	800583a <_puts_r+0xb6>
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	6022      	str	r2, [r4, #0]
 8005836:	7019      	strb	r1, [r3, #0]
 8005838:	e7c5      	b.n	80057c6 <_puts_r+0x42>
 800583a:	4622      	mov	r2, r4
 800583c:	4628      	mov	r0, r5
 800583e:	f000 f817 	bl	8005870 <__swbuf_r>
 8005842:	3001      	adds	r0, #1
 8005844:	d1bf      	bne.n	80057c6 <_puts_r+0x42>
 8005846:	e7df      	b.n	8005808 <_puts_r+0x84>
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	250a      	movs	r5, #10
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	6022      	str	r2, [r4, #0]
 8005850:	701d      	strb	r5, [r3, #0]
 8005852:	e7db      	b.n	800580c <_puts_r+0x88>
 8005854:	08006878 	.word	0x08006878
 8005858:	08006898 	.word	0x08006898
 800585c:	08006858 	.word	0x08006858

08005860 <puts>:
 8005860:	4b02      	ldr	r3, [pc, #8]	; (800586c <puts+0xc>)
 8005862:	4601      	mov	r1, r0
 8005864:	6818      	ldr	r0, [r3, #0]
 8005866:	f7ff bf8d 	b.w	8005784 <_puts_r>
 800586a:	bf00      	nop
 800586c:	20000010 	.word	0x20000010

08005870 <__swbuf_r>:
 8005870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005872:	460e      	mov	r6, r1
 8005874:	4614      	mov	r4, r2
 8005876:	4605      	mov	r5, r0
 8005878:	b118      	cbz	r0, 8005882 <__swbuf_r+0x12>
 800587a:	6983      	ldr	r3, [r0, #24]
 800587c:	b90b      	cbnz	r3, 8005882 <__swbuf_r+0x12>
 800587e:	f000 f9d1 	bl	8005c24 <__sinit>
 8005882:	4b21      	ldr	r3, [pc, #132]	; (8005908 <__swbuf_r+0x98>)
 8005884:	429c      	cmp	r4, r3
 8005886:	d12b      	bne.n	80058e0 <__swbuf_r+0x70>
 8005888:	686c      	ldr	r4, [r5, #4]
 800588a:	69a3      	ldr	r3, [r4, #24]
 800588c:	60a3      	str	r3, [r4, #8]
 800588e:	89a3      	ldrh	r3, [r4, #12]
 8005890:	071a      	lsls	r2, r3, #28
 8005892:	d52f      	bpl.n	80058f4 <__swbuf_r+0x84>
 8005894:	6923      	ldr	r3, [r4, #16]
 8005896:	b36b      	cbz	r3, 80058f4 <__swbuf_r+0x84>
 8005898:	6923      	ldr	r3, [r4, #16]
 800589a:	6820      	ldr	r0, [r4, #0]
 800589c:	1ac0      	subs	r0, r0, r3
 800589e:	6963      	ldr	r3, [r4, #20]
 80058a0:	b2f6      	uxtb	r6, r6
 80058a2:	4283      	cmp	r3, r0
 80058a4:	4637      	mov	r7, r6
 80058a6:	dc04      	bgt.n	80058b2 <__swbuf_r+0x42>
 80058a8:	4621      	mov	r1, r4
 80058aa:	4628      	mov	r0, r5
 80058ac:	f000 f926 	bl	8005afc <_fflush_r>
 80058b0:	bb30      	cbnz	r0, 8005900 <__swbuf_r+0x90>
 80058b2:	68a3      	ldr	r3, [r4, #8]
 80058b4:	3b01      	subs	r3, #1
 80058b6:	60a3      	str	r3, [r4, #8]
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	6022      	str	r2, [r4, #0]
 80058be:	701e      	strb	r6, [r3, #0]
 80058c0:	6963      	ldr	r3, [r4, #20]
 80058c2:	3001      	adds	r0, #1
 80058c4:	4283      	cmp	r3, r0
 80058c6:	d004      	beq.n	80058d2 <__swbuf_r+0x62>
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	07db      	lsls	r3, r3, #31
 80058cc:	d506      	bpl.n	80058dc <__swbuf_r+0x6c>
 80058ce:	2e0a      	cmp	r6, #10
 80058d0:	d104      	bne.n	80058dc <__swbuf_r+0x6c>
 80058d2:	4621      	mov	r1, r4
 80058d4:	4628      	mov	r0, r5
 80058d6:	f000 f911 	bl	8005afc <_fflush_r>
 80058da:	b988      	cbnz	r0, 8005900 <__swbuf_r+0x90>
 80058dc:	4638      	mov	r0, r7
 80058de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058e0:	4b0a      	ldr	r3, [pc, #40]	; (800590c <__swbuf_r+0x9c>)
 80058e2:	429c      	cmp	r4, r3
 80058e4:	d101      	bne.n	80058ea <__swbuf_r+0x7a>
 80058e6:	68ac      	ldr	r4, [r5, #8]
 80058e8:	e7cf      	b.n	800588a <__swbuf_r+0x1a>
 80058ea:	4b09      	ldr	r3, [pc, #36]	; (8005910 <__swbuf_r+0xa0>)
 80058ec:	429c      	cmp	r4, r3
 80058ee:	bf08      	it	eq
 80058f0:	68ec      	ldreq	r4, [r5, #12]
 80058f2:	e7ca      	b.n	800588a <__swbuf_r+0x1a>
 80058f4:	4621      	mov	r1, r4
 80058f6:	4628      	mov	r0, r5
 80058f8:	f000 f80c 	bl	8005914 <__swsetup_r>
 80058fc:	2800      	cmp	r0, #0
 80058fe:	d0cb      	beq.n	8005898 <__swbuf_r+0x28>
 8005900:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005904:	e7ea      	b.n	80058dc <__swbuf_r+0x6c>
 8005906:	bf00      	nop
 8005908:	08006878 	.word	0x08006878
 800590c:	08006898 	.word	0x08006898
 8005910:	08006858 	.word	0x08006858

08005914 <__swsetup_r>:
 8005914:	4b32      	ldr	r3, [pc, #200]	; (80059e0 <__swsetup_r+0xcc>)
 8005916:	b570      	push	{r4, r5, r6, lr}
 8005918:	681d      	ldr	r5, [r3, #0]
 800591a:	4606      	mov	r6, r0
 800591c:	460c      	mov	r4, r1
 800591e:	b125      	cbz	r5, 800592a <__swsetup_r+0x16>
 8005920:	69ab      	ldr	r3, [r5, #24]
 8005922:	b913      	cbnz	r3, 800592a <__swsetup_r+0x16>
 8005924:	4628      	mov	r0, r5
 8005926:	f000 f97d 	bl	8005c24 <__sinit>
 800592a:	4b2e      	ldr	r3, [pc, #184]	; (80059e4 <__swsetup_r+0xd0>)
 800592c:	429c      	cmp	r4, r3
 800592e:	d10f      	bne.n	8005950 <__swsetup_r+0x3c>
 8005930:	686c      	ldr	r4, [r5, #4]
 8005932:	89a3      	ldrh	r3, [r4, #12]
 8005934:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005938:	0719      	lsls	r1, r3, #28
 800593a:	d42c      	bmi.n	8005996 <__swsetup_r+0x82>
 800593c:	06dd      	lsls	r5, r3, #27
 800593e:	d411      	bmi.n	8005964 <__swsetup_r+0x50>
 8005940:	2309      	movs	r3, #9
 8005942:	6033      	str	r3, [r6, #0]
 8005944:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005948:	81a3      	strh	r3, [r4, #12]
 800594a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800594e:	e03e      	b.n	80059ce <__swsetup_r+0xba>
 8005950:	4b25      	ldr	r3, [pc, #148]	; (80059e8 <__swsetup_r+0xd4>)
 8005952:	429c      	cmp	r4, r3
 8005954:	d101      	bne.n	800595a <__swsetup_r+0x46>
 8005956:	68ac      	ldr	r4, [r5, #8]
 8005958:	e7eb      	b.n	8005932 <__swsetup_r+0x1e>
 800595a:	4b24      	ldr	r3, [pc, #144]	; (80059ec <__swsetup_r+0xd8>)
 800595c:	429c      	cmp	r4, r3
 800595e:	bf08      	it	eq
 8005960:	68ec      	ldreq	r4, [r5, #12]
 8005962:	e7e6      	b.n	8005932 <__swsetup_r+0x1e>
 8005964:	0758      	lsls	r0, r3, #29
 8005966:	d512      	bpl.n	800598e <__swsetup_r+0x7a>
 8005968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800596a:	b141      	cbz	r1, 800597e <__swsetup_r+0x6a>
 800596c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005970:	4299      	cmp	r1, r3
 8005972:	d002      	beq.n	800597a <__swsetup_r+0x66>
 8005974:	4630      	mov	r0, r6
 8005976:	f000 fa5b 	bl	8005e30 <_free_r>
 800597a:	2300      	movs	r3, #0
 800597c:	6363      	str	r3, [r4, #52]	; 0x34
 800597e:	89a3      	ldrh	r3, [r4, #12]
 8005980:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005984:	81a3      	strh	r3, [r4, #12]
 8005986:	2300      	movs	r3, #0
 8005988:	6063      	str	r3, [r4, #4]
 800598a:	6923      	ldr	r3, [r4, #16]
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	89a3      	ldrh	r3, [r4, #12]
 8005990:	f043 0308 	orr.w	r3, r3, #8
 8005994:	81a3      	strh	r3, [r4, #12]
 8005996:	6923      	ldr	r3, [r4, #16]
 8005998:	b94b      	cbnz	r3, 80059ae <__swsetup_r+0x9a>
 800599a:	89a3      	ldrh	r3, [r4, #12]
 800599c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80059a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059a4:	d003      	beq.n	80059ae <__swsetup_r+0x9a>
 80059a6:	4621      	mov	r1, r4
 80059a8:	4630      	mov	r0, r6
 80059aa:	f000 fa01 	bl	8005db0 <__smakebuf_r>
 80059ae:	89a0      	ldrh	r0, [r4, #12]
 80059b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059b4:	f010 0301 	ands.w	r3, r0, #1
 80059b8:	d00a      	beq.n	80059d0 <__swsetup_r+0xbc>
 80059ba:	2300      	movs	r3, #0
 80059bc:	60a3      	str	r3, [r4, #8]
 80059be:	6963      	ldr	r3, [r4, #20]
 80059c0:	425b      	negs	r3, r3
 80059c2:	61a3      	str	r3, [r4, #24]
 80059c4:	6923      	ldr	r3, [r4, #16]
 80059c6:	b943      	cbnz	r3, 80059da <__swsetup_r+0xc6>
 80059c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80059cc:	d1ba      	bne.n	8005944 <__swsetup_r+0x30>
 80059ce:	bd70      	pop	{r4, r5, r6, pc}
 80059d0:	0781      	lsls	r1, r0, #30
 80059d2:	bf58      	it	pl
 80059d4:	6963      	ldrpl	r3, [r4, #20]
 80059d6:	60a3      	str	r3, [r4, #8]
 80059d8:	e7f4      	b.n	80059c4 <__swsetup_r+0xb0>
 80059da:	2000      	movs	r0, #0
 80059dc:	e7f7      	b.n	80059ce <__swsetup_r+0xba>
 80059de:	bf00      	nop
 80059e0:	20000010 	.word	0x20000010
 80059e4:	08006878 	.word	0x08006878
 80059e8:	08006898 	.word	0x08006898
 80059ec:	08006858 	.word	0x08006858

080059f0 <__sflush_r>:
 80059f0:	898a      	ldrh	r2, [r1, #12]
 80059f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f6:	4605      	mov	r5, r0
 80059f8:	0710      	lsls	r0, r2, #28
 80059fa:	460c      	mov	r4, r1
 80059fc:	d458      	bmi.n	8005ab0 <__sflush_r+0xc0>
 80059fe:	684b      	ldr	r3, [r1, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	dc05      	bgt.n	8005a10 <__sflush_r+0x20>
 8005a04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	dc02      	bgt.n	8005a10 <__sflush_r+0x20>
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a12:	2e00      	cmp	r6, #0
 8005a14:	d0f9      	beq.n	8005a0a <__sflush_r+0x1a>
 8005a16:	2300      	movs	r3, #0
 8005a18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a1c:	682f      	ldr	r7, [r5, #0]
 8005a1e:	602b      	str	r3, [r5, #0]
 8005a20:	d032      	beq.n	8005a88 <__sflush_r+0x98>
 8005a22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a24:	89a3      	ldrh	r3, [r4, #12]
 8005a26:	075a      	lsls	r2, r3, #29
 8005a28:	d505      	bpl.n	8005a36 <__sflush_r+0x46>
 8005a2a:	6863      	ldr	r3, [r4, #4]
 8005a2c:	1ac0      	subs	r0, r0, r3
 8005a2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a30:	b10b      	cbz	r3, 8005a36 <__sflush_r+0x46>
 8005a32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a34:	1ac0      	subs	r0, r0, r3
 8005a36:	2300      	movs	r3, #0
 8005a38:	4602      	mov	r2, r0
 8005a3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a3c:	6a21      	ldr	r1, [r4, #32]
 8005a3e:	4628      	mov	r0, r5
 8005a40:	47b0      	blx	r6
 8005a42:	1c43      	adds	r3, r0, #1
 8005a44:	89a3      	ldrh	r3, [r4, #12]
 8005a46:	d106      	bne.n	8005a56 <__sflush_r+0x66>
 8005a48:	6829      	ldr	r1, [r5, #0]
 8005a4a:	291d      	cmp	r1, #29
 8005a4c:	d82c      	bhi.n	8005aa8 <__sflush_r+0xb8>
 8005a4e:	4a2a      	ldr	r2, [pc, #168]	; (8005af8 <__sflush_r+0x108>)
 8005a50:	40ca      	lsrs	r2, r1
 8005a52:	07d6      	lsls	r6, r2, #31
 8005a54:	d528      	bpl.n	8005aa8 <__sflush_r+0xb8>
 8005a56:	2200      	movs	r2, #0
 8005a58:	6062      	str	r2, [r4, #4]
 8005a5a:	04d9      	lsls	r1, r3, #19
 8005a5c:	6922      	ldr	r2, [r4, #16]
 8005a5e:	6022      	str	r2, [r4, #0]
 8005a60:	d504      	bpl.n	8005a6c <__sflush_r+0x7c>
 8005a62:	1c42      	adds	r2, r0, #1
 8005a64:	d101      	bne.n	8005a6a <__sflush_r+0x7a>
 8005a66:	682b      	ldr	r3, [r5, #0]
 8005a68:	b903      	cbnz	r3, 8005a6c <__sflush_r+0x7c>
 8005a6a:	6560      	str	r0, [r4, #84]	; 0x54
 8005a6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a6e:	602f      	str	r7, [r5, #0]
 8005a70:	2900      	cmp	r1, #0
 8005a72:	d0ca      	beq.n	8005a0a <__sflush_r+0x1a>
 8005a74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a78:	4299      	cmp	r1, r3
 8005a7a:	d002      	beq.n	8005a82 <__sflush_r+0x92>
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	f000 f9d7 	bl	8005e30 <_free_r>
 8005a82:	2000      	movs	r0, #0
 8005a84:	6360      	str	r0, [r4, #52]	; 0x34
 8005a86:	e7c1      	b.n	8005a0c <__sflush_r+0x1c>
 8005a88:	6a21      	ldr	r1, [r4, #32]
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	47b0      	blx	r6
 8005a90:	1c41      	adds	r1, r0, #1
 8005a92:	d1c7      	bne.n	8005a24 <__sflush_r+0x34>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0c4      	beq.n	8005a24 <__sflush_r+0x34>
 8005a9a:	2b1d      	cmp	r3, #29
 8005a9c:	d001      	beq.n	8005aa2 <__sflush_r+0xb2>
 8005a9e:	2b16      	cmp	r3, #22
 8005aa0:	d101      	bne.n	8005aa6 <__sflush_r+0xb6>
 8005aa2:	602f      	str	r7, [r5, #0]
 8005aa4:	e7b1      	b.n	8005a0a <__sflush_r+0x1a>
 8005aa6:	89a3      	ldrh	r3, [r4, #12]
 8005aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aac:	81a3      	strh	r3, [r4, #12]
 8005aae:	e7ad      	b.n	8005a0c <__sflush_r+0x1c>
 8005ab0:	690f      	ldr	r7, [r1, #16]
 8005ab2:	2f00      	cmp	r7, #0
 8005ab4:	d0a9      	beq.n	8005a0a <__sflush_r+0x1a>
 8005ab6:	0793      	lsls	r3, r2, #30
 8005ab8:	680e      	ldr	r6, [r1, #0]
 8005aba:	bf08      	it	eq
 8005abc:	694b      	ldreq	r3, [r1, #20]
 8005abe:	600f      	str	r7, [r1, #0]
 8005ac0:	bf18      	it	ne
 8005ac2:	2300      	movne	r3, #0
 8005ac4:	eba6 0807 	sub.w	r8, r6, r7
 8005ac8:	608b      	str	r3, [r1, #8]
 8005aca:	f1b8 0f00 	cmp.w	r8, #0
 8005ace:	dd9c      	ble.n	8005a0a <__sflush_r+0x1a>
 8005ad0:	6a21      	ldr	r1, [r4, #32]
 8005ad2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ad4:	4643      	mov	r3, r8
 8005ad6:	463a      	mov	r2, r7
 8005ad8:	4628      	mov	r0, r5
 8005ada:	47b0      	blx	r6
 8005adc:	2800      	cmp	r0, #0
 8005ade:	dc06      	bgt.n	8005aee <__sflush_r+0xfe>
 8005ae0:	89a3      	ldrh	r3, [r4, #12]
 8005ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ae6:	81a3      	strh	r3, [r4, #12]
 8005ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005aec:	e78e      	b.n	8005a0c <__sflush_r+0x1c>
 8005aee:	4407      	add	r7, r0
 8005af0:	eba8 0800 	sub.w	r8, r8, r0
 8005af4:	e7e9      	b.n	8005aca <__sflush_r+0xda>
 8005af6:	bf00      	nop
 8005af8:	20400001 	.word	0x20400001

08005afc <_fflush_r>:
 8005afc:	b538      	push	{r3, r4, r5, lr}
 8005afe:	690b      	ldr	r3, [r1, #16]
 8005b00:	4605      	mov	r5, r0
 8005b02:	460c      	mov	r4, r1
 8005b04:	b913      	cbnz	r3, 8005b0c <_fflush_r+0x10>
 8005b06:	2500      	movs	r5, #0
 8005b08:	4628      	mov	r0, r5
 8005b0a:	bd38      	pop	{r3, r4, r5, pc}
 8005b0c:	b118      	cbz	r0, 8005b16 <_fflush_r+0x1a>
 8005b0e:	6983      	ldr	r3, [r0, #24]
 8005b10:	b90b      	cbnz	r3, 8005b16 <_fflush_r+0x1a>
 8005b12:	f000 f887 	bl	8005c24 <__sinit>
 8005b16:	4b14      	ldr	r3, [pc, #80]	; (8005b68 <_fflush_r+0x6c>)
 8005b18:	429c      	cmp	r4, r3
 8005b1a:	d11b      	bne.n	8005b54 <_fflush_r+0x58>
 8005b1c:	686c      	ldr	r4, [r5, #4]
 8005b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0ef      	beq.n	8005b06 <_fflush_r+0xa>
 8005b26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b28:	07d0      	lsls	r0, r2, #31
 8005b2a:	d404      	bmi.n	8005b36 <_fflush_r+0x3a>
 8005b2c:	0599      	lsls	r1, r3, #22
 8005b2e:	d402      	bmi.n	8005b36 <_fflush_r+0x3a>
 8005b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b32:	f000 f915 	bl	8005d60 <__retarget_lock_acquire_recursive>
 8005b36:	4628      	mov	r0, r5
 8005b38:	4621      	mov	r1, r4
 8005b3a:	f7ff ff59 	bl	80059f0 <__sflush_r>
 8005b3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b40:	07da      	lsls	r2, r3, #31
 8005b42:	4605      	mov	r5, r0
 8005b44:	d4e0      	bmi.n	8005b08 <_fflush_r+0xc>
 8005b46:	89a3      	ldrh	r3, [r4, #12]
 8005b48:	059b      	lsls	r3, r3, #22
 8005b4a:	d4dd      	bmi.n	8005b08 <_fflush_r+0xc>
 8005b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b4e:	f000 f908 	bl	8005d62 <__retarget_lock_release_recursive>
 8005b52:	e7d9      	b.n	8005b08 <_fflush_r+0xc>
 8005b54:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <_fflush_r+0x70>)
 8005b56:	429c      	cmp	r4, r3
 8005b58:	d101      	bne.n	8005b5e <_fflush_r+0x62>
 8005b5a:	68ac      	ldr	r4, [r5, #8]
 8005b5c:	e7df      	b.n	8005b1e <_fflush_r+0x22>
 8005b5e:	4b04      	ldr	r3, [pc, #16]	; (8005b70 <_fflush_r+0x74>)
 8005b60:	429c      	cmp	r4, r3
 8005b62:	bf08      	it	eq
 8005b64:	68ec      	ldreq	r4, [r5, #12]
 8005b66:	e7da      	b.n	8005b1e <_fflush_r+0x22>
 8005b68:	08006878 	.word	0x08006878
 8005b6c:	08006898 	.word	0x08006898
 8005b70:	08006858 	.word	0x08006858

08005b74 <std>:
 8005b74:	2300      	movs	r3, #0
 8005b76:	b510      	push	{r4, lr}
 8005b78:	4604      	mov	r4, r0
 8005b7a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b82:	6083      	str	r3, [r0, #8]
 8005b84:	8181      	strh	r1, [r0, #12]
 8005b86:	6643      	str	r3, [r0, #100]	; 0x64
 8005b88:	81c2      	strh	r2, [r0, #14]
 8005b8a:	6183      	str	r3, [r0, #24]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	2208      	movs	r2, #8
 8005b90:	305c      	adds	r0, #92	; 0x5c
 8005b92:	f7ff fdd7 	bl	8005744 <memset>
 8005b96:	4b05      	ldr	r3, [pc, #20]	; (8005bac <std+0x38>)
 8005b98:	6263      	str	r3, [r4, #36]	; 0x24
 8005b9a:	4b05      	ldr	r3, [pc, #20]	; (8005bb0 <std+0x3c>)
 8005b9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b9e:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <std+0x40>)
 8005ba0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ba2:	4b05      	ldr	r3, [pc, #20]	; (8005bb8 <std+0x44>)
 8005ba4:	6224      	str	r4, [r4, #32]
 8005ba6:	6323      	str	r3, [r4, #48]	; 0x30
 8005ba8:	bd10      	pop	{r4, pc}
 8005baa:	bf00      	nop
 8005bac:	080065ed 	.word	0x080065ed
 8005bb0:	0800660f 	.word	0x0800660f
 8005bb4:	08006647 	.word	0x08006647
 8005bb8:	0800666b 	.word	0x0800666b

08005bbc <_cleanup_r>:
 8005bbc:	4901      	ldr	r1, [pc, #4]	; (8005bc4 <_cleanup_r+0x8>)
 8005bbe:	f000 b8af 	b.w	8005d20 <_fwalk_reent>
 8005bc2:	bf00      	nop
 8005bc4:	08005afd 	.word	0x08005afd

08005bc8 <__sfmoreglue>:
 8005bc8:	b570      	push	{r4, r5, r6, lr}
 8005bca:	2268      	movs	r2, #104	; 0x68
 8005bcc:	1e4d      	subs	r5, r1, #1
 8005bce:	4355      	muls	r5, r2
 8005bd0:	460e      	mov	r6, r1
 8005bd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005bd6:	f000 f997 	bl	8005f08 <_malloc_r>
 8005bda:	4604      	mov	r4, r0
 8005bdc:	b140      	cbz	r0, 8005bf0 <__sfmoreglue+0x28>
 8005bde:	2100      	movs	r1, #0
 8005be0:	e9c0 1600 	strd	r1, r6, [r0]
 8005be4:	300c      	adds	r0, #12
 8005be6:	60a0      	str	r0, [r4, #8]
 8005be8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005bec:	f7ff fdaa 	bl	8005744 <memset>
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	bd70      	pop	{r4, r5, r6, pc}

08005bf4 <__sfp_lock_acquire>:
 8005bf4:	4801      	ldr	r0, [pc, #4]	; (8005bfc <__sfp_lock_acquire+0x8>)
 8005bf6:	f000 b8b3 	b.w	8005d60 <__retarget_lock_acquire_recursive>
 8005bfa:	bf00      	nop
 8005bfc:	20004115 	.word	0x20004115

08005c00 <__sfp_lock_release>:
 8005c00:	4801      	ldr	r0, [pc, #4]	; (8005c08 <__sfp_lock_release+0x8>)
 8005c02:	f000 b8ae 	b.w	8005d62 <__retarget_lock_release_recursive>
 8005c06:	bf00      	nop
 8005c08:	20004115 	.word	0x20004115

08005c0c <__sinit_lock_acquire>:
 8005c0c:	4801      	ldr	r0, [pc, #4]	; (8005c14 <__sinit_lock_acquire+0x8>)
 8005c0e:	f000 b8a7 	b.w	8005d60 <__retarget_lock_acquire_recursive>
 8005c12:	bf00      	nop
 8005c14:	20004116 	.word	0x20004116

08005c18 <__sinit_lock_release>:
 8005c18:	4801      	ldr	r0, [pc, #4]	; (8005c20 <__sinit_lock_release+0x8>)
 8005c1a:	f000 b8a2 	b.w	8005d62 <__retarget_lock_release_recursive>
 8005c1e:	bf00      	nop
 8005c20:	20004116 	.word	0x20004116

08005c24 <__sinit>:
 8005c24:	b510      	push	{r4, lr}
 8005c26:	4604      	mov	r4, r0
 8005c28:	f7ff fff0 	bl	8005c0c <__sinit_lock_acquire>
 8005c2c:	69a3      	ldr	r3, [r4, #24]
 8005c2e:	b11b      	cbz	r3, 8005c38 <__sinit+0x14>
 8005c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c34:	f7ff bff0 	b.w	8005c18 <__sinit_lock_release>
 8005c38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c3c:	6523      	str	r3, [r4, #80]	; 0x50
 8005c3e:	4b13      	ldr	r3, [pc, #76]	; (8005c8c <__sinit+0x68>)
 8005c40:	4a13      	ldr	r2, [pc, #76]	; (8005c90 <__sinit+0x6c>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c46:	42a3      	cmp	r3, r4
 8005c48:	bf04      	itt	eq
 8005c4a:	2301      	moveq	r3, #1
 8005c4c:	61a3      	streq	r3, [r4, #24]
 8005c4e:	4620      	mov	r0, r4
 8005c50:	f000 f820 	bl	8005c94 <__sfp>
 8005c54:	6060      	str	r0, [r4, #4]
 8005c56:	4620      	mov	r0, r4
 8005c58:	f000 f81c 	bl	8005c94 <__sfp>
 8005c5c:	60a0      	str	r0, [r4, #8]
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f000 f818 	bl	8005c94 <__sfp>
 8005c64:	2200      	movs	r2, #0
 8005c66:	60e0      	str	r0, [r4, #12]
 8005c68:	2104      	movs	r1, #4
 8005c6a:	6860      	ldr	r0, [r4, #4]
 8005c6c:	f7ff ff82 	bl	8005b74 <std>
 8005c70:	68a0      	ldr	r0, [r4, #8]
 8005c72:	2201      	movs	r2, #1
 8005c74:	2109      	movs	r1, #9
 8005c76:	f7ff ff7d 	bl	8005b74 <std>
 8005c7a:	68e0      	ldr	r0, [r4, #12]
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	2112      	movs	r1, #18
 8005c80:	f7ff ff78 	bl	8005b74 <std>
 8005c84:	2301      	movs	r3, #1
 8005c86:	61a3      	str	r3, [r4, #24]
 8005c88:	e7d2      	b.n	8005c30 <__sinit+0xc>
 8005c8a:	bf00      	nop
 8005c8c:	08006854 	.word	0x08006854
 8005c90:	08005bbd 	.word	0x08005bbd

08005c94 <__sfp>:
 8005c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c96:	4607      	mov	r7, r0
 8005c98:	f7ff ffac 	bl	8005bf4 <__sfp_lock_acquire>
 8005c9c:	4b1e      	ldr	r3, [pc, #120]	; (8005d18 <__sfp+0x84>)
 8005c9e:	681e      	ldr	r6, [r3, #0]
 8005ca0:	69b3      	ldr	r3, [r6, #24]
 8005ca2:	b913      	cbnz	r3, 8005caa <__sfp+0x16>
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	f7ff ffbd 	bl	8005c24 <__sinit>
 8005caa:	3648      	adds	r6, #72	; 0x48
 8005cac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	d503      	bpl.n	8005cbc <__sfp+0x28>
 8005cb4:	6833      	ldr	r3, [r6, #0]
 8005cb6:	b30b      	cbz	r3, 8005cfc <__sfp+0x68>
 8005cb8:	6836      	ldr	r6, [r6, #0]
 8005cba:	e7f7      	b.n	8005cac <__sfp+0x18>
 8005cbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005cc0:	b9d5      	cbnz	r5, 8005cf8 <__sfp+0x64>
 8005cc2:	4b16      	ldr	r3, [pc, #88]	; (8005d1c <__sfp+0x88>)
 8005cc4:	60e3      	str	r3, [r4, #12]
 8005cc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005cca:	6665      	str	r5, [r4, #100]	; 0x64
 8005ccc:	f000 f847 	bl	8005d5e <__retarget_lock_init_recursive>
 8005cd0:	f7ff ff96 	bl	8005c00 <__sfp_lock_release>
 8005cd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005cd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005cdc:	6025      	str	r5, [r4, #0]
 8005cde:	61a5      	str	r5, [r4, #24]
 8005ce0:	2208      	movs	r2, #8
 8005ce2:	4629      	mov	r1, r5
 8005ce4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ce8:	f7ff fd2c 	bl	8005744 <memset>
 8005cec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005cf0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cf8:	3468      	adds	r4, #104	; 0x68
 8005cfa:	e7d9      	b.n	8005cb0 <__sfp+0x1c>
 8005cfc:	2104      	movs	r1, #4
 8005cfe:	4638      	mov	r0, r7
 8005d00:	f7ff ff62 	bl	8005bc8 <__sfmoreglue>
 8005d04:	4604      	mov	r4, r0
 8005d06:	6030      	str	r0, [r6, #0]
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	d1d5      	bne.n	8005cb8 <__sfp+0x24>
 8005d0c:	f7ff ff78 	bl	8005c00 <__sfp_lock_release>
 8005d10:	230c      	movs	r3, #12
 8005d12:	603b      	str	r3, [r7, #0]
 8005d14:	e7ee      	b.n	8005cf4 <__sfp+0x60>
 8005d16:	bf00      	nop
 8005d18:	08006854 	.word	0x08006854
 8005d1c:	ffff0001 	.word	0xffff0001

08005d20 <_fwalk_reent>:
 8005d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d24:	4606      	mov	r6, r0
 8005d26:	4688      	mov	r8, r1
 8005d28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d2c:	2700      	movs	r7, #0
 8005d2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d32:	f1b9 0901 	subs.w	r9, r9, #1
 8005d36:	d505      	bpl.n	8005d44 <_fwalk_reent+0x24>
 8005d38:	6824      	ldr	r4, [r4, #0]
 8005d3a:	2c00      	cmp	r4, #0
 8005d3c:	d1f7      	bne.n	8005d2e <_fwalk_reent+0xe>
 8005d3e:	4638      	mov	r0, r7
 8005d40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d44:	89ab      	ldrh	r3, [r5, #12]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d907      	bls.n	8005d5a <_fwalk_reent+0x3a>
 8005d4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	d003      	beq.n	8005d5a <_fwalk_reent+0x3a>
 8005d52:	4629      	mov	r1, r5
 8005d54:	4630      	mov	r0, r6
 8005d56:	47c0      	blx	r8
 8005d58:	4307      	orrs	r7, r0
 8005d5a:	3568      	adds	r5, #104	; 0x68
 8005d5c:	e7e9      	b.n	8005d32 <_fwalk_reent+0x12>

08005d5e <__retarget_lock_init_recursive>:
 8005d5e:	4770      	bx	lr

08005d60 <__retarget_lock_acquire_recursive>:
 8005d60:	4770      	bx	lr

08005d62 <__retarget_lock_release_recursive>:
 8005d62:	4770      	bx	lr

08005d64 <__swhatbuf_r>:
 8005d64:	b570      	push	{r4, r5, r6, lr}
 8005d66:	460e      	mov	r6, r1
 8005d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d6c:	2900      	cmp	r1, #0
 8005d6e:	b096      	sub	sp, #88	; 0x58
 8005d70:	4614      	mov	r4, r2
 8005d72:	461d      	mov	r5, r3
 8005d74:	da08      	bge.n	8005d88 <__swhatbuf_r+0x24>
 8005d76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	602a      	str	r2, [r5, #0]
 8005d7e:	061a      	lsls	r2, r3, #24
 8005d80:	d410      	bmi.n	8005da4 <__swhatbuf_r+0x40>
 8005d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d86:	e00e      	b.n	8005da6 <__swhatbuf_r+0x42>
 8005d88:	466a      	mov	r2, sp
 8005d8a:	f000 fc95 	bl	80066b8 <_fstat_r>
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	dbf1      	blt.n	8005d76 <__swhatbuf_r+0x12>
 8005d92:	9a01      	ldr	r2, [sp, #4]
 8005d94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d9c:	425a      	negs	r2, r3
 8005d9e:	415a      	adcs	r2, r3
 8005da0:	602a      	str	r2, [r5, #0]
 8005da2:	e7ee      	b.n	8005d82 <__swhatbuf_r+0x1e>
 8005da4:	2340      	movs	r3, #64	; 0x40
 8005da6:	2000      	movs	r0, #0
 8005da8:	6023      	str	r3, [r4, #0]
 8005daa:	b016      	add	sp, #88	; 0x58
 8005dac:	bd70      	pop	{r4, r5, r6, pc}
	...

08005db0 <__smakebuf_r>:
 8005db0:	898b      	ldrh	r3, [r1, #12]
 8005db2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005db4:	079d      	lsls	r5, r3, #30
 8005db6:	4606      	mov	r6, r0
 8005db8:	460c      	mov	r4, r1
 8005dba:	d507      	bpl.n	8005dcc <__smakebuf_r+0x1c>
 8005dbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005dc0:	6023      	str	r3, [r4, #0]
 8005dc2:	6123      	str	r3, [r4, #16]
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	6163      	str	r3, [r4, #20]
 8005dc8:	b002      	add	sp, #8
 8005dca:	bd70      	pop	{r4, r5, r6, pc}
 8005dcc:	ab01      	add	r3, sp, #4
 8005dce:	466a      	mov	r2, sp
 8005dd0:	f7ff ffc8 	bl	8005d64 <__swhatbuf_r>
 8005dd4:	9900      	ldr	r1, [sp, #0]
 8005dd6:	4605      	mov	r5, r0
 8005dd8:	4630      	mov	r0, r6
 8005dda:	f000 f895 	bl	8005f08 <_malloc_r>
 8005dde:	b948      	cbnz	r0, 8005df4 <__smakebuf_r+0x44>
 8005de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005de4:	059a      	lsls	r2, r3, #22
 8005de6:	d4ef      	bmi.n	8005dc8 <__smakebuf_r+0x18>
 8005de8:	f023 0303 	bic.w	r3, r3, #3
 8005dec:	f043 0302 	orr.w	r3, r3, #2
 8005df0:	81a3      	strh	r3, [r4, #12]
 8005df2:	e7e3      	b.n	8005dbc <__smakebuf_r+0xc>
 8005df4:	4b0d      	ldr	r3, [pc, #52]	; (8005e2c <__smakebuf_r+0x7c>)
 8005df6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005df8:	89a3      	ldrh	r3, [r4, #12]
 8005dfa:	6020      	str	r0, [r4, #0]
 8005dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e00:	81a3      	strh	r3, [r4, #12]
 8005e02:	9b00      	ldr	r3, [sp, #0]
 8005e04:	6163      	str	r3, [r4, #20]
 8005e06:	9b01      	ldr	r3, [sp, #4]
 8005e08:	6120      	str	r0, [r4, #16]
 8005e0a:	b15b      	cbz	r3, 8005e24 <__smakebuf_r+0x74>
 8005e0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e10:	4630      	mov	r0, r6
 8005e12:	f000 fc63 	bl	80066dc <_isatty_r>
 8005e16:	b128      	cbz	r0, 8005e24 <__smakebuf_r+0x74>
 8005e18:	89a3      	ldrh	r3, [r4, #12]
 8005e1a:	f023 0303 	bic.w	r3, r3, #3
 8005e1e:	f043 0301 	orr.w	r3, r3, #1
 8005e22:	81a3      	strh	r3, [r4, #12]
 8005e24:	89a0      	ldrh	r0, [r4, #12]
 8005e26:	4305      	orrs	r5, r0
 8005e28:	81a5      	strh	r5, [r4, #12]
 8005e2a:	e7cd      	b.n	8005dc8 <__smakebuf_r+0x18>
 8005e2c:	08005bbd 	.word	0x08005bbd

08005e30 <_free_r>:
 8005e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e32:	2900      	cmp	r1, #0
 8005e34:	d044      	beq.n	8005ec0 <_free_r+0x90>
 8005e36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e3a:	9001      	str	r0, [sp, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f1a1 0404 	sub.w	r4, r1, #4
 8005e42:	bfb8      	it	lt
 8005e44:	18e4      	addlt	r4, r4, r3
 8005e46:	f000 fc6b 	bl	8006720 <__malloc_lock>
 8005e4a:	4a1e      	ldr	r2, [pc, #120]	; (8005ec4 <_free_r+0x94>)
 8005e4c:	9801      	ldr	r0, [sp, #4]
 8005e4e:	6813      	ldr	r3, [r2, #0]
 8005e50:	b933      	cbnz	r3, 8005e60 <_free_r+0x30>
 8005e52:	6063      	str	r3, [r4, #4]
 8005e54:	6014      	str	r4, [r2, #0]
 8005e56:	b003      	add	sp, #12
 8005e58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e5c:	f000 bc66 	b.w	800672c <__malloc_unlock>
 8005e60:	42a3      	cmp	r3, r4
 8005e62:	d908      	bls.n	8005e76 <_free_r+0x46>
 8005e64:	6825      	ldr	r5, [r4, #0]
 8005e66:	1961      	adds	r1, r4, r5
 8005e68:	428b      	cmp	r3, r1
 8005e6a:	bf01      	itttt	eq
 8005e6c:	6819      	ldreq	r1, [r3, #0]
 8005e6e:	685b      	ldreq	r3, [r3, #4]
 8005e70:	1949      	addeq	r1, r1, r5
 8005e72:	6021      	streq	r1, [r4, #0]
 8005e74:	e7ed      	b.n	8005e52 <_free_r+0x22>
 8005e76:	461a      	mov	r2, r3
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	b10b      	cbz	r3, 8005e80 <_free_r+0x50>
 8005e7c:	42a3      	cmp	r3, r4
 8005e7e:	d9fa      	bls.n	8005e76 <_free_r+0x46>
 8005e80:	6811      	ldr	r1, [r2, #0]
 8005e82:	1855      	adds	r5, r2, r1
 8005e84:	42a5      	cmp	r5, r4
 8005e86:	d10b      	bne.n	8005ea0 <_free_r+0x70>
 8005e88:	6824      	ldr	r4, [r4, #0]
 8005e8a:	4421      	add	r1, r4
 8005e8c:	1854      	adds	r4, r2, r1
 8005e8e:	42a3      	cmp	r3, r4
 8005e90:	6011      	str	r1, [r2, #0]
 8005e92:	d1e0      	bne.n	8005e56 <_free_r+0x26>
 8005e94:	681c      	ldr	r4, [r3, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	6053      	str	r3, [r2, #4]
 8005e9a:	4421      	add	r1, r4
 8005e9c:	6011      	str	r1, [r2, #0]
 8005e9e:	e7da      	b.n	8005e56 <_free_r+0x26>
 8005ea0:	d902      	bls.n	8005ea8 <_free_r+0x78>
 8005ea2:	230c      	movs	r3, #12
 8005ea4:	6003      	str	r3, [r0, #0]
 8005ea6:	e7d6      	b.n	8005e56 <_free_r+0x26>
 8005ea8:	6825      	ldr	r5, [r4, #0]
 8005eaa:	1961      	adds	r1, r4, r5
 8005eac:	428b      	cmp	r3, r1
 8005eae:	bf04      	itt	eq
 8005eb0:	6819      	ldreq	r1, [r3, #0]
 8005eb2:	685b      	ldreq	r3, [r3, #4]
 8005eb4:	6063      	str	r3, [r4, #4]
 8005eb6:	bf04      	itt	eq
 8005eb8:	1949      	addeq	r1, r1, r5
 8005eba:	6021      	streq	r1, [r4, #0]
 8005ebc:	6054      	str	r4, [r2, #4]
 8005ebe:	e7ca      	b.n	8005e56 <_free_r+0x26>
 8005ec0:	b003      	add	sp, #12
 8005ec2:	bd30      	pop	{r4, r5, pc}
 8005ec4:	20004118 	.word	0x20004118

08005ec8 <sbrk_aligned>:
 8005ec8:	b570      	push	{r4, r5, r6, lr}
 8005eca:	4e0e      	ldr	r6, [pc, #56]	; (8005f04 <sbrk_aligned+0x3c>)
 8005ecc:	460c      	mov	r4, r1
 8005ece:	6831      	ldr	r1, [r6, #0]
 8005ed0:	4605      	mov	r5, r0
 8005ed2:	b911      	cbnz	r1, 8005eda <sbrk_aligned+0x12>
 8005ed4:	f000 fb7a 	bl	80065cc <_sbrk_r>
 8005ed8:	6030      	str	r0, [r6, #0]
 8005eda:	4621      	mov	r1, r4
 8005edc:	4628      	mov	r0, r5
 8005ede:	f000 fb75 	bl	80065cc <_sbrk_r>
 8005ee2:	1c43      	adds	r3, r0, #1
 8005ee4:	d00a      	beq.n	8005efc <sbrk_aligned+0x34>
 8005ee6:	1cc4      	adds	r4, r0, #3
 8005ee8:	f024 0403 	bic.w	r4, r4, #3
 8005eec:	42a0      	cmp	r0, r4
 8005eee:	d007      	beq.n	8005f00 <sbrk_aligned+0x38>
 8005ef0:	1a21      	subs	r1, r4, r0
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	f000 fb6a 	bl	80065cc <_sbrk_r>
 8005ef8:	3001      	adds	r0, #1
 8005efa:	d101      	bne.n	8005f00 <sbrk_aligned+0x38>
 8005efc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005f00:	4620      	mov	r0, r4
 8005f02:	bd70      	pop	{r4, r5, r6, pc}
 8005f04:	2000411c 	.word	0x2000411c

08005f08 <_malloc_r>:
 8005f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f0c:	1ccd      	adds	r5, r1, #3
 8005f0e:	f025 0503 	bic.w	r5, r5, #3
 8005f12:	3508      	adds	r5, #8
 8005f14:	2d0c      	cmp	r5, #12
 8005f16:	bf38      	it	cc
 8005f18:	250c      	movcc	r5, #12
 8005f1a:	2d00      	cmp	r5, #0
 8005f1c:	4607      	mov	r7, r0
 8005f1e:	db01      	blt.n	8005f24 <_malloc_r+0x1c>
 8005f20:	42a9      	cmp	r1, r5
 8005f22:	d905      	bls.n	8005f30 <_malloc_r+0x28>
 8005f24:	230c      	movs	r3, #12
 8005f26:	603b      	str	r3, [r7, #0]
 8005f28:	2600      	movs	r6, #0
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f30:	4e2e      	ldr	r6, [pc, #184]	; (8005fec <_malloc_r+0xe4>)
 8005f32:	f000 fbf5 	bl	8006720 <__malloc_lock>
 8005f36:	6833      	ldr	r3, [r6, #0]
 8005f38:	461c      	mov	r4, r3
 8005f3a:	bb34      	cbnz	r4, 8005f8a <_malloc_r+0x82>
 8005f3c:	4629      	mov	r1, r5
 8005f3e:	4638      	mov	r0, r7
 8005f40:	f7ff ffc2 	bl	8005ec8 <sbrk_aligned>
 8005f44:	1c43      	adds	r3, r0, #1
 8005f46:	4604      	mov	r4, r0
 8005f48:	d14d      	bne.n	8005fe6 <_malloc_r+0xde>
 8005f4a:	6834      	ldr	r4, [r6, #0]
 8005f4c:	4626      	mov	r6, r4
 8005f4e:	2e00      	cmp	r6, #0
 8005f50:	d140      	bne.n	8005fd4 <_malloc_r+0xcc>
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	4631      	mov	r1, r6
 8005f56:	4638      	mov	r0, r7
 8005f58:	eb04 0803 	add.w	r8, r4, r3
 8005f5c:	f000 fb36 	bl	80065cc <_sbrk_r>
 8005f60:	4580      	cmp	r8, r0
 8005f62:	d13a      	bne.n	8005fda <_malloc_r+0xd2>
 8005f64:	6821      	ldr	r1, [r4, #0]
 8005f66:	3503      	adds	r5, #3
 8005f68:	1a6d      	subs	r5, r5, r1
 8005f6a:	f025 0503 	bic.w	r5, r5, #3
 8005f6e:	3508      	adds	r5, #8
 8005f70:	2d0c      	cmp	r5, #12
 8005f72:	bf38      	it	cc
 8005f74:	250c      	movcc	r5, #12
 8005f76:	4629      	mov	r1, r5
 8005f78:	4638      	mov	r0, r7
 8005f7a:	f7ff ffa5 	bl	8005ec8 <sbrk_aligned>
 8005f7e:	3001      	adds	r0, #1
 8005f80:	d02b      	beq.n	8005fda <_malloc_r+0xd2>
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	442b      	add	r3, r5
 8005f86:	6023      	str	r3, [r4, #0]
 8005f88:	e00e      	b.n	8005fa8 <_malloc_r+0xa0>
 8005f8a:	6822      	ldr	r2, [r4, #0]
 8005f8c:	1b52      	subs	r2, r2, r5
 8005f8e:	d41e      	bmi.n	8005fce <_malloc_r+0xc6>
 8005f90:	2a0b      	cmp	r2, #11
 8005f92:	d916      	bls.n	8005fc2 <_malloc_r+0xba>
 8005f94:	1961      	adds	r1, r4, r5
 8005f96:	42a3      	cmp	r3, r4
 8005f98:	6025      	str	r5, [r4, #0]
 8005f9a:	bf18      	it	ne
 8005f9c:	6059      	strne	r1, [r3, #4]
 8005f9e:	6863      	ldr	r3, [r4, #4]
 8005fa0:	bf08      	it	eq
 8005fa2:	6031      	streq	r1, [r6, #0]
 8005fa4:	5162      	str	r2, [r4, r5]
 8005fa6:	604b      	str	r3, [r1, #4]
 8005fa8:	4638      	mov	r0, r7
 8005faa:	f104 060b 	add.w	r6, r4, #11
 8005fae:	f000 fbbd 	bl	800672c <__malloc_unlock>
 8005fb2:	f026 0607 	bic.w	r6, r6, #7
 8005fb6:	1d23      	adds	r3, r4, #4
 8005fb8:	1af2      	subs	r2, r6, r3
 8005fba:	d0b6      	beq.n	8005f2a <_malloc_r+0x22>
 8005fbc:	1b9b      	subs	r3, r3, r6
 8005fbe:	50a3      	str	r3, [r4, r2]
 8005fc0:	e7b3      	b.n	8005f2a <_malloc_r+0x22>
 8005fc2:	6862      	ldr	r2, [r4, #4]
 8005fc4:	42a3      	cmp	r3, r4
 8005fc6:	bf0c      	ite	eq
 8005fc8:	6032      	streq	r2, [r6, #0]
 8005fca:	605a      	strne	r2, [r3, #4]
 8005fcc:	e7ec      	b.n	8005fa8 <_malloc_r+0xa0>
 8005fce:	4623      	mov	r3, r4
 8005fd0:	6864      	ldr	r4, [r4, #4]
 8005fd2:	e7b2      	b.n	8005f3a <_malloc_r+0x32>
 8005fd4:	4634      	mov	r4, r6
 8005fd6:	6876      	ldr	r6, [r6, #4]
 8005fd8:	e7b9      	b.n	8005f4e <_malloc_r+0x46>
 8005fda:	230c      	movs	r3, #12
 8005fdc:	603b      	str	r3, [r7, #0]
 8005fde:	4638      	mov	r0, r7
 8005fe0:	f000 fba4 	bl	800672c <__malloc_unlock>
 8005fe4:	e7a1      	b.n	8005f2a <_malloc_r+0x22>
 8005fe6:	6025      	str	r5, [r4, #0]
 8005fe8:	e7de      	b.n	8005fa8 <_malloc_r+0xa0>
 8005fea:	bf00      	nop
 8005fec:	20004118 	.word	0x20004118

08005ff0 <__sfputc_r>:
 8005ff0:	6893      	ldr	r3, [r2, #8]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	b410      	push	{r4}
 8005ff8:	6093      	str	r3, [r2, #8]
 8005ffa:	da08      	bge.n	800600e <__sfputc_r+0x1e>
 8005ffc:	6994      	ldr	r4, [r2, #24]
 8005ffe:	42a3      	cmp	r3, r4
 8006000:	db01      	blt.n	8006006 <__sfputc_r+0x16>
 8006002:	290a      	cmp	r1, #10
 8006004:	d103      	bne.n	800600e <__sfputc_r+0x1e>
 8006006:	f85d 4b04 	ldr.w	r4, [sp], #4
 800600a:	f7ff bc31 	b.w	8005870 <__swbuf_r>
 800600e:	6813      	ldr	r3, [r2, #0]
 8006010:	1c58      	adds	r0, r3, #1
 8006012:	6010      	str	r0, [r2, #0]
 8006014:	7019      	strb	r1, [r3, #0]
 8006016:	4608      	mov	r0, r1
 8006018:	f85d 4b04 	ldr.w	r4, [sp], #4
 800601c:	4770      	bx	lr

0800601e <__sfputs_r>:
 800601e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006020:	4606      	mov	r6, r0
 8006022:	460f      	mov	r7, r1
 8006024:	4614      	mov	r4, r2
 8006026:	18d5      	adds	r5, r2, r3
 8006028:	42ac      	cmp	r4, r5
 800602a:	d101      	bne.n	8006030 <__sfputs_r+0x12>
 800602c:	2000      	movs	r0, #0
 800602e:	e007      	b.n	8006040 <__sfputs_r+0x22>
 8006030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006034:	463a      	mov	r2, r7
 8006036:	4630      	mov	r0, r6
 8006038:	f7ff ffda 	bl	8005ff0 <__sfputc_r>
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d1f3      	bne.n	8006028 <__sfputs_r+0xa>
 8006040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006044 <_vfiprintf_r>:
 8006044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006048:	460d      	mov	r5, r1
 800604a:	b09d      	sub	sp, #116	; 0x74
 800604c:	4614      	mov	r4, r2
 800604e:	4698      	mov	r8, r3
 8006050:	4606      	mov	r6, r0
 8006052:	b118      	cbz	r0, 800605c <_vfiprintf_r+0x18>
 8006054:	6983      	ldr	r3, [r0, #24]
 8006056:	b90b      	cbnz	r3, 800605c <_vfiprintf_r+0x18>
 8006058:	f7ff fde4 	bl	8005c24 <__sinit>
 800605c:	4b89      	ldr	r3, [pc, #548]	; (8006284 <_vfiprintf_r+0x240>)
 800605e:	429d      	cmp	r5, r3
 8006060:	d11b      	bne.n	800609a <_vfiprintf_r+0x56>
 8006062:	6875      	ldr	r5, [r6, #4]
 8006064:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006066:	07d9      	lsls	r1, r3, #31
 8006068:	d405      	bmi.n	8006076 <_vfiprintf_r+0x32>
 800606a:	89ab      	ldrh	r3, [r5, #12]
 800606c:	059a      	lsls	r2, r3, #22
 800606e:	d402      	bmi.n	8006076 <_vfiprintf_r+0x32>
 8006070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006072:	f7ff fe75 	bl	8005d60 <__retarget_lock_acquire_recursive>
 8006076:	89ab      	ldrh	r3, [r5, #12]
 8006078:	071b      	lsls	r3, r3, #28
 800607a:	d501      	bpl.n	8006080 <_vfiprintf_r+0x3c>
 800607c:	692b      	ldr	r3, [r5, #16]
 800607e:	b9eb      	cbnz	r3, 80060bc <_vfiprintf_r+0x78>
 8006080:	4629      	mov	r1, r5
 8006082:	4630      	mov	r0, r6
 8006084:	f7ff fc46 	bl	8005914 <__swsetup_r>
 8006088:	b1c0      	cbz	r0, 80060bc <_vfiprintf_r+0x78>
 800608a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800608c:	07dc      	lsls	r4, r3, #31
 800608e:	d50e      	bpl.n	80060ae <_vfiprintf_r+0x6a>
 8006090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006094:	b01d      	add	sp, #116	; 0x74
 8006096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800609a:	4b7b      	ldr	r3, [pc, #492]	; (8006288 <_vfiprintf_r+0x244>)
 800609c:	429d      	cmp	r5, r3
 800609e:	d101      	bne.n	80060a4 <_vfiprintf_r+0x60>
 80060a0:	68b5      	ldr	r5, [r6, #8]
 80060a2:	e7df      	b.n	8006064 <_vfiprintf_r+0x20>
 80060a4:	4b79      	ldr	r3, [pc, #484]	; (800628c <_vfiprintf_r+0x248>)
 80060a6:	429d      	cmp	r5, r3
 80060a8:	bf08      	it	eq
 80060aa:	68f5      	ldreq	r5, [r6, #12]
 80060ac:	e7da      	b.n	8006064 <_vfiprintf_r+0x20>
 80060ae:	89ab      	ldrh	r3, [r5, #12]
 80060b0:	0598      	lsls	r0, r3, #22
 80060b2:	d4ed      	bmi.n	8006090 <_vfiprintf_r+0x4c>
 80060b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060b6:	f7ff fe54 	bl	8005d62 <__retarget_lock_release_recursive>
 80060ba:	e7e9      	b.n	8006090 <_vfiprintf_r+0x4c>
 80060bc:	2300      	movs	r3, #0
 80060be:	9309      	str	r3, [sp, #36]	; 0x24
 80060c0:	2320      	movs	r3, #32
 80060c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80060ca:	2330      	movs	r3, #48	; 0x30
 80060cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006290 <_vfiprintf_r+0x24c>
 80060d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060d4:	f04f 0901 	mov.w	r9, #1
 80060d8:	4623      	mov	r3, r4
 80060da:	469a      	mov	sl, r3
 80060dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060e0:	b10a      	cbz	r2, 80060e6 <_vfiprintf_r+0xa2>
 80060e2:	2a25      	cmp	r2, #37	; 0x25
 80060e4:	d1f9      	bne.n	80060da <_vfiprintf_r+0x96>
 80060e6:	ebba 0b04 	subs.w	fp, sl, r4
 80060ea:	d00b      	beq.n	8006104 <_vfiprintf_r+0xc0>
 80060ec:	465b      	mov	r3, fp
 80060ee:	4622      	mov	r2, r4
 80060f0:	4629      	mov	r1, r5
 80060f2:	4630      	mov	r0, r6
 80060f4:	f7ff ff93 	bl	800601e <__sfputs_r>
 80060f8:	3001      	adds	r0, #1
 80060fa:	f000 80aa 	beq.w	8006252 <_vfiprintf_r+0x20e>
 80060fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006100:	445a      	add	r2, fp
 8006102:	9209      	str	r2, [sp, #36]	; 0x24
 8006104:	f89a 3000 	ldrb.w	r3, [sl]
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 80a2 	beq.w	8006252 <_vfiprintf_r+0x20e>
 800610e:	2300      	movs	r3, #0
 8006110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006118:	f10a 0a01 	add.w	sl, sl, #1
 800611c:	9304      	str	r3, [sp, #16]
 800611e:	9307      	str	r3, [sp, #28]
 8006120:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006124:	931a      	str	r3, [sp, #104]	; 0x68
 8006126:	4654      	mov	r4, sl
 8006128:	2205      	movs	r2, #5
 800612a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800612e:	4858      	ldr	r0, [pc, #352]	; (8006290 <_vfiprintf_r+0x24c>)
 8006130:	f7fa f86e 	bl	8000210 <memchr>
 8006134:	9a04      	ldr	r2, [sp, #16]
 8006136:	b9d8      	cbnz	r0, 8006170 <_vfiprintf_r+0x12c>
 8006138:	06d1      	lsls	r1, r2, #27
 800613a:	bf44      	itt	mi
 800613c:	2320      	movmi	r3, #32
 800613e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006142:	0713      	lsls	r3, r2, #28
 8006144:	bf44      	itt	mi
 8006146:	232b      	movmi	r3, #43	; 0x2b
 8006148:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800614c:	f89a 3000 	ldrb.w	r3, [sl]
 8006150:	2b2a      	cmp	r3, #42	; 0x2a
 8006152:	d015      	beq.n	8006180 <_vfiprintf_r+0x13c>
 8006154:	9a07      	ldr	r2, [sp, #28]
 8006156:	4654      	mov	r4, sl
 8006158:	2000      	movs	r0, #0
 800615a:	f04f 0c0a 	mov.w	ip, #10
 800615e:	4621      	mov	r1, r4
 8006160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006164:	3b30      	subs	r3, #48	; 0x30
 8006166:	2b09      	cmp	r3, #9
 8006168:	d94e      	bls.n	8006208 <_vfiprintf_r+0x1c4>
 800616a:	b1b0      	cbz	r0, 800619a <_vfiprintf_r+0x156>
 800616c:	9207      	str	r2, [sp, #28]
 800616e:	e014      	b.n	800619a <_vfiprintf_r+0x156>
 8006170:	eba0 0308 	sub.w	r3, r0, r8
 8006174:	fa09 f303 	lsl.w	r3, r9, r3
 8006178:	4313      	orrs	r3, r2
 800617a:	9304      	str	r3, [sp, #16]
 800617c:	46a2      	mov	sl, r4
 800617e:	e7d2      	b.n	8006126 <_vfiprintf_r+0xe2>
 8006180:	9b03      	ldr	r3, [sp, #12]
 8006182:	1d19      	adds	r1, r3, #4
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	9103      	str	r1, [sp, #12]
 8006188:	2b00      	cmp	r3, #0
 800618a:	bfbb      	ittet	lt
 800618c:	425b      	neglt	r3, r3
 800618e:	f042 0202 	orrlt.w	r2, r2, #2
 8006192:	9307      	strge	r3, [sp, #28]
 8006194:	9307      	strlt	r3, [sp, #28]
 8006196:	bfb8      	it	lt
 8006198:	9204      	strlt	r2, [sp, #16]
 800619a:	7823      	ldrb	r3, [r4, #0]
 800619c:	2b2e      	cmp	r3, #46	; 0x2e
 800619e:	d10c      	bne.n	80061ba <_vfiprintf_r+0x176>
 80061a0:	7863      	ldrb	r3, [r4, #1]
 80061a2:	2b2a      	cmp	r3, #42	; 0x2a
 80061a4:	d135      	bne.n	8006212 <_vfiprintf_r+0x1ce>
 80061a6:	9b03      	ldr	r3, [sp, #12]
 80061a8:	1d1a      	adds	r2, r3, #4
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	9203      	str	r2, [sp, #12]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	bfb8      	it	lt
 80061b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80061b6:	3402      	adds	r4, #2
 80061b8:	9305      	str	r3, [sp, #20]
 80061ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80062a0 <_vfiprintf_r+0x25c>
 80061be:	7821      	ldrb	r1, [r4, #0]
 80061c0:	2203      	movs	r2, #3
 80061c2:	4650      	mov	r0, sl
 80061c4:	f7fa f824 	bl	8000210 <memchr>
 80061c8:	b140      	cbz	r0, 80061dc <_vfiprintf_r+0x198>
 80061ca:	2340      	movs	r3, #64	; 0x40
 80061cc:	eba0 000a 	sub.w	r0, r0, sl
 80061d0:	fa03 f000 	lsl.w	r0, r3, r0
 80061d4:	9b04      	ldr	r3, [sp, #16]
 80061d6:	4303      	orrs	r3, r0
 80061d8:	3401      	adds	r4, #1
 80061da:	9304      	str	r3, [sp, #16]
 80061dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061e0:	482c      	ldr	r0, [pc, #176]	; (8006294 <_vfiprintf_r+0x250>)
 80061e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061e6:	2206      	movs	r2, #6
 80061e8:	f7fa f812 	bl	8000210 <memchr>
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d03f      	beq.n	8006270 <_vfiprintf_r+0x22c>
 80061f0:	4b29      	ldr	r3, [pc, #164]	; (8006298 <_vfiprintf_r+0x254>)
 80061f2:	bb1b      	cbnz	r3, 800623c <_vfiprintf_r+0x1f8>
 80061f4:	9b03      	ldr	r3, [sp, #12]
 80061f6:	3307      	adds	r3, #7
 80061f8:	f023 0307 	bic.w	r3, r3, #7
 80061fc:	3308      	adds	r3, #8
 80061fe:	9303      	str	r3, [sp, #12]
 8006200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006202:	443b      	add	r3, r7
 8006204:	9309      	str	r3, [sp, #36]	; 0x24
 8006206:	e767      	b.n	80060d8 <_vfiprintf_r+0x94>
 8006208:	fb0c 3202 	mla	r2, ip, r2, r3
 800620c:	460c      	mov	r4, r1
 800620e:	2001      	movs	r0, #1
 8006210:	e7a5      	b.n	800615e <_vfiprintf_r+0x11a>
 8006212:	2300      	movs	r3, #0
 8006214:	3401      	adds	r4, #1
 8006216:	9305      	str	r3, [sp, #20]
 8006218:	4619      	mov	r1, r3
 800621a:	f04f 0c0a 	mov.w	ip, #10
 800621e:	4620      	mov	r0, r4
 8006220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006224:	3a30      	subs	r2, #48	; 0x30
 8006226:	2a09      	cmp	r2, #9
 8006228:	d903      	bls.n	8006232 <_vfiprintf_r+0x1ee>
 800622a:	2b00      	cmp	r3, #0
 800622c:	d0c5      	beq.n	80061ba <_vfiprintf_r+0x176>
 800622e:	9105      	str	r1, [sp, #20]
 8006230:	e7c3      	b.n	80061ba <_vfiprintf_r+0x176>
 8006232:	fb0c 2101 	mla	r1, ip, r1, r2
 8006236:	4604      	mov	r4, r0
 8006238:	2301      	movs	r3, #1
 800623a:	e7f0      	b.n	800621e <_vfiprintf_r+0x1da>
 800623c:	ab03      	add	r3, sp, #12
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	462a      	mov	r2, r5
 8006242:	4b16      	ldr	r3, [pc, #88]	; (800629c <_vfiprintf_r+0x258>)
 8006244:	a904      	add	r1, sp, #16
 8006246:	4630      	mov	r0, r6
 8006248:	f3af 8000 	nop.w
 800624c:	4607      	mov	r7, r0
 800624e:	1c78      	adds	r0, r7, #1
 8006250:	d1d6      	bne.n	8006200 <_vfiprintf_r+0x1bc>
 8006252:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006254:	07d9      	lsls	r1, r3, #31
 8006256:	d405      	bmi.n	8006264 <_vfiprintf_r+0x220>
 8006258:	89ab      	ldrh	r3, [r5, #12]
 800625a:	059a      	lsls	r2, r3, #22
 800625c:	d402      	bmi.n	8006264 <_vfiprintf_r+0x220>
 800625e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006260:	f7ff fd7f 	bl	8005d62 <__retarget_lock_release_recursive>
 8006264:	89ab      	ldrh	r3, [r5, #12]
 8006266:	065b      	lsls	r3, r3, #25
 8006268:	f53f af12 	bmi.w	8006090 <_vfiprintf_r+0x4c>
 800626c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800626e:	e711      	b.n	8006094 <_vfiprintf_r+0x50>
 8006270:	ab03      	add	r3, sp, #12
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	462a      	mov	r2, r5
 8006276:	4b09      	ldr	r3, [pc, #36]	; (800629c <_vfiprintf_r+0x258>)
 8006278:	a904      	add	r1, sp, #16
 800627a:	4630      	mov	r0, r6
 800627c:	f000 f880 	bl	8006380 <_printf_i>
 8006280:	e7e4      	b.n	800624c <_vfiprintf_r+0x208>
 8006282:	bf00      	nop
 8006284:	08006878 	.word	0x08006878
 8006288:	08006898 	.word	0x08006898
 800628c:	08006858 	.word	0x08006858
 8006290:	080068b8 	.word	0x080068b8
 8006294:	080068c2 	.word	0x080068c2
 8006298:	00000000 	.word	0x00000000
 800629c:	0800601f 	.word	0x0800601f
 80062a0:	080068be 	.word	0x080068be

080062a4 <_printf_common>:
 80062a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062a8:	4616      	mov	r6, r2
 80062aa:	4699      	mov	r9, r3
 80062ac:	688a      	ldr	r2, [r1, #8]
 80062ae:	690b      	ldr	r3, [r1, #16]
 80062b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062b4:	4293      	cmp	r3, r2
 80062b6:	bfb8      	it	lt
 80062b8:	4613      	movlt	r3, r2
 80062ba:	6033      	str	r3, [r6, #0]
 80062bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062c0:	4607      	mov	r7, r0
 80062c2:	460c      	mov	r4, r1
 80062c4:	b10a      	cbz	r2, 80062ca <_printf_common+0x26>
 80062c6:	3301      	adds	r3, #1
 80062c8:	6033      	str	r3, [r6, #0]
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	0699      	lsls	r1, r3, #26
 80062ce:	bf42      	ittt	mi
 80062d0:	6833      	ldrmi	r3, [r6, #0]
 80062d2:	3302      	addmi	r3, #2
 80062d4:	6033      	strmi	r3, [r6, #0]
 80062d6:	6825      	ldr	r5, [r4, #0]
 80062d8:	f015 0506 	ands.w	r5, r5, #6
 80062dc:	d106      	bne.n	80062ec <_printf_common+0x48>
 80062de:	f104 0a19 	add.w	sl, r4, #25
 80062e2:	68e3      	ldr	r3, [r4, #12]
 80062e4:	6832      	ldr	r2, [r6, #0]
 80062e6:	1a9b      	subs	r3, r3, r2
 80062e8:	42ab      	cmp	r3, r5
 80062ea:	dc26      	bgt.n	800633a <_printf_common+0x96>
 80062ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062f0:	1e13      	subs	r3, r2, #0
 80062f2:	6822      	ldr	r2, [r4, #0]
 80062f4:	bf18      	it	ne
 80062f6:	2301      	movne	r3, #1
 80062f8:	0692      	lsls	r2, r2, #26
 80062fa:	d42b      	bmi.n	8006354 <_printf_common+0xb0>
 80062fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006300:	4649      	mov	r1, r9
 8006302:	4638      	mov	r0, r7
 8006304:	47c0      	blx	r8
 8006306:	3001      	adds	r0, #1
 8006308:	d01e      	beq.n	8006348 <_printf_common+0xa4>
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	68e5      	ldr	r5, [r4, #12]
 800630e:	6832      	ldr	r2, [r6, #0]
 8006310:	f003 0306 	and.w	r3, r3, #6
 8006314:	2b04      	cmp	r3, #4
 8006316:	bf08      	it	eq
 8006318:	1aad      	subeq	r5, r5, r2
 800631a:	68a3      	ldr	r3, [r4, #8]
 800631c:	6922      	ldr	r2, [r4, #16]
 800631e:	bf0c      	ite	eq
 8006320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006324:	2500      	movne	r5, #0
 8006326:	4293      	cmp	r3, r2
 8006328:	bfc4      	itt	gt
 800632a:	1a9b      	subgt	r3, r3, r2
 800632c:	18ed      	addgt	r5, r5, r3
 800632e:	2600      	movs	r6, #0
 8006330:	341a      	adds	r4, #26
 8006332:	42b5      	cmp	r5, r6
 8006334:	d11a      	bne.n	800636c <_printf_common+0xc8>
 8006336:	2000      	movs	r0, #0
 8006338:	e008      	b.n	800634c <_printf_common+0xa8>
 800633a:	2301      	movs	r3, #1
 800633c:	4652      	mov	r2, sl
 800633e:	4649      	mov	r1, r9
 8006340:	4638      	mov	r0, r7
 8006342:	47c0      	blx	r8
 8006344:	3001      	adds	r0, #1
 8006346:	d103      	bne.n	8006350 <_printf_common+0xac>
 8006348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800634c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006350:	3501      	adds	r5, #1
 8006352:	e7c6      	b.n	80062e2 <_printf_common+0x3e>
 8006354:	18e1      	adds	r1, r4, r3
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	2030      	movs	r0, #48	; 0x30
 800635a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800635e:	4422      	add	r2, r4
 8006360:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006364:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006368:	3302      	adds	r3, #2
 800636a:	e7c7      	b.n	80062fc <_printf_common+0x58>
 800636c:	2301      	movs	r3, #1
 800636e:	4622      	mov	r2, r4
 8006370:	4649      	mov	r1, r9
 8006372:	4638      	mov	r0, r7
 8006374:	47c0      	blx	r8
 8006376:	3001      	adds	r0, #1
 8006378:	d0e6      	beq.n	8006348 <_printf_common+0xa4>
 800637a:	3601      	adds	r6, #1
 800637c:	e7d9      	b.n	8006332 <_printf_common+0x8e>
	...

08006380 <_printf_i>:
 8006380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006384:	7e0f      	ldrb	r7, [r1, #24]
 8006386:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006388:	2f78      	cmp	r7, #120	; 0x78
 800638a:	4691      	mov	r9, r2
 800638c:	4680      	mov	r8, r0
 800638e:	460c      	mov	r4, r1
 8006390:	469a      	mov	sl, r3
 8006392:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006396:	d807      	bhi.n	80063a8 <_printf_i+0x28>
 8006398:	2f62      	cmp	r7, #98	; 0x62
 800639a:	d80a      	bhi.n	80063b2 <_printf_i+0x32>
 800639c:	2f00      	cmp	r7, #0
 800639e:	f000 80d8 	beq.w	8006552 <_printf_i+0x1d2>
 80063a2:	2f58      	cmp	r7, #88	; 0x58
 80063a4:	f000 80a3 	beq.w	80064ee <_printf_i+0x16e>
 80063a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063b0:	e03a      	b.n	8006428 <_printf_i+0xa8>
 80063b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063b6:	2b15      	cmp	r3, #21
 80063b8:	d8f6      	bhi.n	80063a8 <_printf_i+0x28>
 80063ba:	a101      	add	r1, pc, #4	; (adr r1, 80063c0 <_printf_i+0x40>)
 80063bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063c0:	08006419 	.word	0x08006419
 80063c4:	0800642d 	.word	0x0800642d
 80063c8:	080063a9 	.word	0x080063a9
 80063cc:	080063a9 	.word	0x080063a9
 80063d0:	080063a9 	.word	0x080063a9
 80063d4:	080063a9 	.word	0x080063a9
 80063d8:	0800642d 	.word	0x0800642d
 80063dc:	080063a9 	.word	0x080063a9
 80063e0:	080063a9 	.word	0x080063a9
 80063e4:	080063a9 	.word	0x080063a9
 80063e8:	080063a9 	.word	0x080063a9
 80063ec:	08006539 	.word	0x08006539
 80063f0:	0800645d 	.word	0x0800645d
 80063f4:	0800651b 	.word	0x0800651b
 80063f8:	080063a9 	.word	0x080063a9
 80063fc:	080063a9 	.word	0x080063a9
 8006400:	0800655b 	.word	0x0800655b
 8006404:	080063a9 	.word	0x080063a9
 8006408:	0800645d 	.word	0x0800645d
 800640c:	080063a9 	.word	0x080063a9
 8006410:	080063a9 	.word	0x080063a9
 8006414:	08006523 	.word	0x08006523
 8006418:	682b      	ldr	r3, [r5, #0]
 800641a:	1d1a      	adds	r2, r3, #4
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	602a      	str	r2, [r5, #0]
 8006420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006428:	2301      	movs	r3, #1
 800642a:	e0a3      	b.n	8006574 <_printf_i+0x1f4>
 800642c:	6820      	ldr	r0, [r4, #0]
 800642e:	6829      	ldr	r1, [r5, #0]
 8006430:	0606      	lsls	r6, r0, #24
 8006432:	f101 0304 	add.w	r3, r1, #4
 8006436:	d50a      	bpl.n	800644e <_printf_i+0xce>
 8006438:	680e      	ldr	r6, [r1, #0]
 800643a:	602b      	str	r3, [r5, #0]
 800643c:	2e00      	cmp	r6, #0
 800643e:	da03      	bge.n	8006448 <_printf_i+0xc8>
 8006440:	232d      	movs	r3, #45	; 0x2d
 8006442:	4276      	negs	r6, r6
 8006444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006448:	485e      	ldr	r0, [pc, #376]	; (80065c4 <_printf_i+0x244>)
 800644a:	230a      	movs	r3, #10
 800644c:	e019      	b.n	8006482 <_printf_i+0x102>
 800644e:	680e      	ldr	r6, [r1, #0]
 8006450:	602b      	str	r3, [r5, #0]
 8006452:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006456:	bf18      	it	ne
 8006458:	b236      	sxthne	r6, r6
 800645a:	e7ef      	b.n	800643c <_printf_i+0xbc>
 800645c:	682b      	ldr	r3, [r5, #0]
 800645e:	6820      	ldr	r0, [r4, #0]
 8006460:	1d19      	adds	r1, r3, #4
 8006462:	6029      	str	r1, [r5, #0]
 8006464:	0601      	lsls	r1, r0, #24
 8006466:	d501      	bpl.n	800646c <_printf_i+0xec>
 8006468:	681e      	ldr	r6, [r3, #0]
 800646a:	e002      	b.n	8006472 <_printf_i+0xf2>
 800646c:	0646      	lsls	r6, r0, #25
 800646e:	d5fb      	bpl.n	8006468 <_printf_i+0xe8>
 8006470:	881e      	ldrh	r6, [r3, #0]
 8006472:	4854      	ldr	r0, [pc, #336]	; (80065c4 <_printf_i+0x244>)
 8006474:	2f6f      	cmp	r7, #111	; 0x6f
 8006476:	bf0c      	ite	eq
 8006478:	2308      	moveq	r3, #8
 800647a:	230a      	movne	r3, #10
 800647c:	2100      	movs	r1, #0
 800647e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006482:	6865      	ldr	r5, [r4, #4]
 8006484:	60a5      	str	r5, [r4, #8]
 8006486:	2d00      	cmp	r5, #0
 8006488:	bfa2      	ittt	ge
 800648a:	6821      	ldrge	r1, [r4, #0]
 800648c:	f021 0104 	bicge.w	r1, r1, #4
 8006490:	6021      	strge	r1, [r4, #0]
 8006492:	b90e      	cbnz	r6, 8006498 <_printf_i+0x118>
 8006494:	2d00      	cmp	r5, #0
 8006496:	d04d      	beq.n	8006534 <_printf_i+0x1b4>
 8006498:	4615      	mov	r5, r2
 800649a:	fbb6 f1f3 	udiv	r1, r6, r3
 800649e:	fb03 6711 	mls	r7, r3, r1, r6
 80064a2:	5dc7      	ldrb	r7, [r0, r7]
 80064a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064a8:	4637      	mov	r7, r6
 80064aa:	42bb      	cmp	r3, r7
 80064ac:	460e      	mov	r6, r1
 80064ae:	d9f4      	bls.n	800649a <_printf_i+0x11a>
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d10b      	bne.n	80064cc <_printf_i+0x14c>
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	07de      	lsls	r6, r3, #31
 80064b8:	d508      	bpl.n	80064cc <_printf_i+0x14c>
 80064ba:	6923      	ldr	r3, [r4, #16]
 80064bc:	6861      	ldr	r1, [r4, #4]
 80064be:	4299      	cmp	r1, r3
 80064c0:	bfde      	ittt	le
 80064c2:	2330      	movle	r3, #48	; 0x30
 80064c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064c8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80064cc:	1b52      	subs	r2, r2, r5
 80064ce:	6122      	str	r2, [r4, #16]
 80064d0:	f8cd a000 	str.w	sl, [sp]
 80064d4:	464b      	mov	r3, r9
 80064d6:	aa03      	add	r2, sp, #12
 80064d8:	4621      	mov	r1, r4
 80064da:	4640      	mov	r0, r8
 80064dc:	f7ff fee2 	bl	80062a4 <_printf_common>
 80064e0:	3001      	adds	r0, #1
 80064e2:	d14c      	bne.n	800657e <_printf_i+0x1fe>
 80064e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064e8:	b004      	add	sp, #16
 80064ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ee:	4835      	ldr	r0, [pc, #212]	; (80065c4 <_printf_i+0x244>)
 80064f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80064f4:	6829      	ldr	r1, [r5, #0]
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80064fc:	6029      	str	r1, [r5, #0]
 80064fe:	061d      	lsls	r5, r3, #24
 8006500:	d514      	bpl.n	800652c <_printf_i+0x1ac>
 8006502:	07df      	lsls	r7, r3, #31
 8006504:	bf44      	itt	mi
 8006506:	f043 0320 	orrmi.w	r3, r3, #32
 800650a:	6023      	strmi	r3, [r4, #0]
 800650c:	b91e      	cbnz	r6, 8006516 <_printf_i+0x196>
 800650e:	6823      	ldr	r3, [r4, #0]
 8006510:	f023 0320 	bic.w	r3, r3, #32
 8006514:	6023      	str	r3, [r4, #0]
 8006516:	2310      	movs	r3, #16
 8006518:	e7b0      	b.n	800647c <_printf_i+0xfc>
 800651a:	6823      	ldr	r3, [r4, #0]
 800651c:	f043 0320 	orr.w	r3, r3, #32
 8006520:	6023      	str	r3, [r4, #0]
 8006522:	2378      	movs	r3, #120	; 0x78
 8006524:	4828      	ldr	r0, [pc, #160]	; (80065c8 <_printf_i+0x248>)
 8006526:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800652a:	e7e3      	b.n	80064f4 <_printf_i+0x174>
 800652c:	0659      	lsls	r1, r3, #25
 800652e:	bf48      	it	mi
 8006530:	b2b6      	uxthmi	r6, r6
 8006532:	e7e6      	b.n	8006502 <_printf_i+0x182>
 8006534:	4615      	mov	r5, r2
 8006536:	e7bb      	b.n	80064b0 <_printf_i+0x130>
 8006538:	682b      	ldr	r3, [r5, #0]
 800653a:	6826      	ldr	r6, [r4, #0]
 800653c:	6961      	ldr	r1, [r4, #20]
 800653e:	1d18      	adds	r0, r3, #4
 8006540:	6028      	str	r0, [r5, #0]
 8006542:	0635      	lsls	r5, r6, #24
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	d501      	bpl.n	800654c <_printf_i+0x1cc>
 8006548:	6019      	str	r1, [r3, #0]
 800654a:	e002      	b.n	8006552 <_printf_i+0x1d2>
 800654c:	0670      	lsls	r0, r6, #25
 800654e:	d5fb      	bpl.n	8006548 <_printf_i+0x1c8>
 8006550:	8019      	strh	r1, [r3, #0]
 8006552:	2300      	movs	r3, #0
 8006554:	6123      	str	r3, [r4, #16]
 8006556:	4615      	mov	r5, r2
 8006558:	e7ba      	b.n	80064d0 <_printf_i+0x150>
 800655a:	682b      	ldr	r3, [r5, #0]
 800655c:	1d1a      	adds	r2, r3, #4
 800655e:	602a      	str	r2, [r5, #0]
 8006560:	681d      	ldr	r5, [r3, #0]
 8006562:	6862      	ldr	r2, [r4, #4]
 8006564:	2100      	movs	r1, #0
 8006566:	4628      	mov	r0, r5
 8006568:	f7f9 fe52 	bl	8000210 <memchr>
 800656c:	b108      	cbz	r0, 8006572 <_printf_i+0x1f2>
 800656e:	1b40      	subs	r0, r0, r5
 8006570:	6060      	str	r0, [r4, #4]
 8006572:	6863      	ldr	r3, [r4, #4]
 8006574:	6123      	str	r3, [r4, #16]
 8006576:	2300      	movs	r3, #0
 8006578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800657c:	e7a8      	b.n	80064d0 <_printf_i+0x150>
 800657e:	6923      	ldr	r3, [r4, #16]
 8006580:	462a      	mov	r2, r5
 8006582:	4649      	mov	r1, r9
 8006584:	4640      	mov	r0, r8
 8006586:	47d0      	blx	sl
 8006588:	3001      	adds	r0, #1
 800658a:	d0ab      	beq.n	80064e4 <_printf_i+0x164>
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	079b      	lsls	r3, r3, #30
 8006590:	d413      	bmi.n	80065ba <_printf_i+0x23a>
 8006592:	68e0      	ldr	r0, [r4, #12]
 8006594:	9b03      	ldr	r3, [sp, #12]
 8006596:	4298      	cmp	r0, r3
 8006598:	bfb8      	it	lt
 800659a:	4618      	movlt	r0, r3
 800659c:	e7a4      	b.n	80064e8 <_printf_i+0x168>
 800659e:	2301      	movs	r3, #1
 80065a0:	4632      	mov	r2, r6
 80065a2:	4649      	mov	r1, r9
 80065a4:	4640      	mov	r0, r8
 80065a6:	47d0      	blx	sl
 80065a8:	3001      	adds	r0, #1
 80065aa:	d09b      	beq.n	80064e4 <_printf_i+0x164>
 80065ac:	3501      	adds	r5, #1
 80065ae:	68e3      	ldr	r3, [r4, #12]
 80065b0:	9903      	ldr	r1, [sp, #12]
 80065b2:	1a5b      	subs	r3, r3, r1
 80065b4:	42ab      	cmp	r3, r5
 80065b6:	dcf2      	bgt.n	800659e <_printf_i+0x21e>
 80065b8:	e7eb      	b.n	8006592 <_printf_i+0x212>
 80065ba:	2500      	movs	r5, #0
 80065bc:	f104 0619 	add.w	r6, r4, #25
 80065c0:	e7f5      	b.n	80065ae <_printf_i+0x22e>
 80065c2:	bf00      	nop
 80065c4:	080068c9 	.word	0x080068c9
 80065c8:	080068da 	.word	0x080068da

080065cc <_sbrk_r>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	4d06      	ldr	r5, [pc, #24]	; (80065e8 <_sbrk_r+0x1c>)
 80065d0:	2300      	movs	r3, #0
 80065d2:	4604      	mov	r4, r0
 80065d4:	4608      	mov	r0, r1
 80065d6:	602b      	str	r3, [r5, #0]
 80065d8:	f7fa faba 	bl	8000b50 <_sbrk>
 80065dc:	1c43      	adds	r3, r0, #1
 80065de:	d102      	bne.n	80065e6 <_sbrk_r+0x1a>
 80065e0:	682b      	ldr	r3, [r5, #0]
 80065e2:	b103      	cbz	r3, 80065e6 <_sbrk_r+0x1a>
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	bd38      	pop	{r3, r4, r5, pc}
 80065e8:	20004120 	.word	0x20004120

080065ec <__sread>:
 80065ec:	b510      	push	{r4, lr}
 80065ee:	460c      	mov	r4, r1
 80065f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065f4:	f000 f8a0 	bl	8006738 <_read_r>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	bfab      	itete	ge
 80065fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065fe:	89a3      	ldrhlt	r3, [r4, #12]
 8006600:	181b      	addge	r3, r3, r0
 8006602:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006606:	bfac      	ite	ge
 8006608:	6563      	strge	r3, [r4, #84]	; 0x54
 800660a:	81a3      	strhlt	r3, [r4, #12]
 800660c:	bd10      	pop	{r4, pc}

0800660e <__swrite>:
 800660e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006612:	461f      	mov	r7, r3
 8006614:	898b      	ldrh	r3, [r1, #12]
 8006616:	05db      	lsls	r3, r3, #23
 8006618:	4605      	mov	r5, r0
 800661a:	460c      	mov	r4, r1
 800661c:	4616      	mov	r6, r2
 800661e:	d505      	bpl.n	800662c <__swrite+0x1e>
 8006620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006624:	2302      	movs	r3, #2
 8006626:	2200      	movs	r2, #0
 8006628:	f000 f868 	bl	80066fc <_lseek_r>
 800662c:	89a3      	ldrh	r3, [r4, #12]
 800662e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006632:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006636:	81a3      	strh	r3, [r4, #12]
 8006638:	4632      	mov	r2, r6
 800663a:	463b      	mov	r3, r7
 800663c:	4628      	mov	r0, r5
 800663e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006642:	f000 b817 	b.w	8006674 <_write_r>

08006646 <__sseek>:
 8006646:	b510      	push	{r4, lr}
 8006648:	460c      	mov	r4, r1
 800664a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800664e:	f000 f855 	bl	80066fc <_lseek_r>
 8006652:	1c43      	adds	r3, r0, #1
 8006654:	89a3      	ldrh	r3, [r4, #12]
 8006656:	bf15      	itete	ne
 8006658:	6560      	strne	r0, [r4, #84]	; 0x54
 800665a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800665e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006662:	81a3      	strheq	r3, [r4, #12]
 8006664:	bf18      	it	ne
 8006666:	81a3      	strhne	r3, [r4, #12]
 8006668:	bd10      	pop	{r4, pc}

0800666a <__sclose>:
 800666a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800666e:	f000 b813 	b.w	8006698 <_close_r>
	...

08006674 <_write_r>:
 8006674:	b538      	push	{r3, r4, r5, lr}
 8006676:	4d07      	ldr	r5, [pc, #28]	; (8006694 <_write_r+0x20>)
 8006678:	4604      	mov	r4, r0
 800667a:	4608      	mov	r0, r1
 800667c:	4611      	mov	r1, r2
 800667e:	2200      	movs	r2, #0
 8006680:	602a      	str	r2, [r5, #0]
 8006682:	461a      	mov	r2, r3
 8006684:	f7fa fa13 	bl	8000aae <_write>
 8006688:	1c43      	adds	r3, r0, #1
 800668a:	d102      	bne.n	8006692 <_write_r+0x1e>
 800668c:	682b      	ldr	r3, [r5, #0]
 800668e:	b103      	cbz	r3, 8006692 <_write_r+0x1e>
 8006690:	6023      	str	r3, [r4, #0]
 8006692:	bd38      	pop	{r3, r4, r5, pc}
 8006694:	20004120 	.word	0x20004120

08006698 <_close_r>:
 8006698:	b538      	push	{r3, r4, r5, lr}
 800669a:	4d06      	ldr	r5, [pc, #24]	; (80066b4 <_close_r+0x1c>)
 800669c:	2300      	movs	r3, #0
 800669e:	4604      	mov	r4, r0
 80066a0:	4608      	mov	r0, r1
 80066a2:	602b      	str	r3, [r5, #0]
 80066a4:	f7fa fa1f 	bl	8000ae6 <_close>
 80066a8:	1c43      	adds	r3, r0, #1
 80066aa:	d102      	bne.n	80066b2 <_close_r+0x1a>
 80066ac:	682b      	ldr	r3, [r5, #0]
 80066ae:	b103      	cbz	r3, 80066b2 <_close_r+0x1a>
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	bd38      	pop	{r3, r4, r5, pc}
 80066b4:	20004120 	.word	0x20004120

080066b8 <_fstat_r>:
 80066b8:	b538      	push	{r3, r4, r5, lr}
 80066ba:	4d07      	ldr	r5, [pc, #28]	; (80066d8 <_fstat_r+0x20>)
 80066bc:	2300      	movs	r3, #0
 80066be:	4604      	mov	r4, r0
 80066c0:	4608      	mov	r0, r1
 80066c2:	4611      	mov	r1, r2
 80066c4:	602b      	str	r3, [r5, #0]
 80066c6:	f7fa fa1a 	bl	8000afe <_fstat>
 80066ca:	1c43      	adds	r3, r0, #1
 80066cc:	d102      	bne.n	80066d4 <_fstat_r+0x1c>
 80066ce:	682b      	ldr	r3, [r5, #0]
 80066d0:	b103      	cbz	r3, 80066d4 <_fstat_r+0x1c>
 80066d2:	6023      	str	r3, [r4, #0]
 80066d4:	bd38      	pop	{r3, r4, r5, pc}
 80066d6:	bf00      	nop
 80066d8:	20004120 	.word	0x20004120

080066dc <_isatty_r>:
 80066dc:	b538      	push	{r3, r4, r5, lr}
 80066de:	4d06      	ldr	r5, [pc, #24]	; (80066f8 <_isatty_r+0x1c>)
 80066e0:	2300      	movs	r3, #0
 80066e2:	4604      	mov	r4, r0
 80066e4:	4608      	mov	r0, r1
 80066e6:	602b      	str	r3, [r5, #0]
 80066e8:	f7fa fa19 	bl	8000b1e <_isatty>
 80066ec:	1c43      	adds	r3, r0, #1
 80066ee:	d102      	bne.n	80066f6 <_isatty_r+0x1a>
 80066f0:	682b      	ldr	r3, [r5, #0]
 80066f2:	b103      	cbz	r3, 80066f6 <_isatty_r+0x1a>
 80066f4:	6023      	str	r3, [r4, #0]
 80066f6:	bd38      	pop	{r3, r4, r5, pc}
 80066f8:	20004120 	.word	0x20004120

080066fc <_lseek_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	4d07      	ldr	r5, [pc, #28]	; (800671c <_lseek_r+0x20>)
 8006700:	4604      	mov	r4, r0
 8006702:	4608      	mov	r0, r1
 8006704:	4611      	mov	r1, r2
 8006706:	2200      	movs	r2, #0
 8006708:	602a      	str	r2, [r5, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	f7fa fa12 	bl	8000b34 <_lseek>
 8006710:	1c43      	adds	r3, r0, #1
 8006712:	d102      	bne.n	800671a <_lseek_r+0x1e>
 8006714:	682b      	ldr	r3, [r5, #0]
 8006716:	b103      	cbz	r3, 800671a <_lseek_r+0x1e>
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	bd38      	pop	{r3, r4, r5, pc}
 800671c:	20004120 	.word	0x20004120

08006720 <__malloc_lock>:
 8006720:	4801      	ldr	r0, [pc, #4]	; (8006728 <__malloc_lock+0x8>)
 8006722:	f7ff bb1d 	b.w	8005d60 <__retarget_lock_acquire_recursive>
 8006726:	bf00      	nop
 8006728:	20004114 	.word	0x20004114

0800672c <__malloc_unlock>:
 800672c:	4801      	ldr	r0, [pc, #4]	; (8006734 <__malloc_unlock+0x8>)
 800672e:	f7ff bb18 	b.w	8005d62 <__retarget_lock_release_recursive>
 8006732:	bf00      	nop
 8006734:	20004114 	.word	0x20004114

08006738 <_read_r>:
 8006738:	b538      	push	{r3, r4, r5, lr}
 800673a:	4d07      	ldr	r5, [pc, #28]	; (8006758 <_read_r+0x20>)
 800673c:	4604      	mov	r4, r0
 800673e:	4608      	mov	r0, r1
 8006740:	4611      	mov	r1, r2
 8006742:	2200      	movs	r2, #0
 8006744:	602a      	str	r2, [r5, #0]
 8006746:	461a      	mov	r2, r3
 8006748:	f7fa f994 	bl	8000a74 <_read>
 800674c:	1c43      	adds	r3, r0, #1
 800674e:	d102      	bne.n	8006756 <_read_r+0x1e>
 8006750:	682b      	ldr	r3, [r5, #0]
 8006752:	b103      	cbz	r3, 8006756 <_read_r+0x1e>
 8006754:	6023      	str	r3, [r4, #0]
 8006756:	bd38      	pop	{r3, r4, r5, pc}
 8006758:	20004120 	.word	0x20004120

0800675c <_init>:
 800675c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675e:	bf00      	nop
 8006760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006762:	bc08      	pop	{r3}
 8006764:	469e      	mov	lr, r3
 8006766:	4770      	bx	lr

08006768 <_fini>:
 8006768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676a:	bf00      	nop
 800676c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676e:	bc08      	pop	{r3}
 8006770:	469e      	mov	lr, r3
 8006772:	4770      	bx	lr
